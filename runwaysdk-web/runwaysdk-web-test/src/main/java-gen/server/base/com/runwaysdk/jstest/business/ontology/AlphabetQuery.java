/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.jstest.business.ontology;

@com.runwaysdk.business.ClassSignature(hash = 919154799)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Alphabet.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class AlphabetQuery extends com.runwaysdk.query.GeneratedBusinessQuery
 implements com.runwaysdk.generation.loader.
{

  public AlphabetQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public AlphabetQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return com.runwaysdk.jstest.business.ontology.Alphabet.CLASS;
  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF getDescription()
  {
    return getDescription(null);

  }
 
  public com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF getDescription(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.jstest.business.ontology.Alphabet.DESCRIPTION);

    return (com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.DESCRIPTION, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF getDescription(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.jstest.business.ontology.Alphabet.DESCRIPTION);

    return (com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.DESCRIPTION, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF getDisplayLabel()
  {
    return getDisplayLabel(null);

  }
 
  public com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF getDisplayLabel(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.jstest.business.ontology.Alphabet.DISPLAYLABEL);

    return (com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.DISPLAYLABEL, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.jstest.business.ontology.Alphabet.DISPLAYLABEL);

    return (com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.DISPLAYLABEL, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.jstest.business.ontology.Alphabet.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.ENTITYDOMAIN, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.jstest.business.ontology.Alphabet.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.ENTITYDOMAIN, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableChar getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.jstest.business.ontology.Alphabet.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.jstest.business.ontology.Alphabet.OID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.jstest.business.ontology.Alphabet.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.jstest.business.ontology.Alphabet.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.jstest.business.ontology.Alphabet.LOCKEDBY);

    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.LOCKEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.jstest.business.ontology.Alphabet.LOCKEDBY);

    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.LOCKEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.jstest.business.ontology.Alphabet.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.OWNER, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.jstest.business.ontology.Alphabet.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.OWNER, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(com.runwaysdk.jstest.business.ontology.Alphabet.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(com.runwaysdk.jstest.business.ontology.Alphabet.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.jstest.business.ontology.Alphabet.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.jstest.business.ontology.Alphabet.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.jstest.business.ontology.Alphabet.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.jstest.business.ontology.Alphabet.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getUniversalId()
  {
    return getUniversalId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getUniversalId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.jstest.business.ontology.Alphabet.UNIVERSALID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getUniversalId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.jstest.business.ontology.Alphabet.UNIVERSALID, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.UsersQuery.UsersQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.DESCRIPTION)) 
    {
       return new com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.DISPLAYLABEL)) 
    {
       return new com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends Alphabet> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<Alphabet>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition alphabetAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRoot.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_alphabetAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRoot.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition alphabetAttributeRoots(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery)
  {
    return this.getBusinessQuery().isChildIn(alphabetAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_alphabetAttributeRoots(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(alphabetAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery)
  {
    alphabetAttributeRootQuery.AND(alphabetAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.getBusinessQuery().isChildIn(alphabetAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery)
  {
    alphabetAttributeRootQuery.AND(alphabetAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(alphabetAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_alphabetAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_alphabetAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_alphabetAttributeRoots(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotChildIn(alphabetAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_alphabetAttributeRoots(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(alphabetAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery)
  {
    alphabetAttributeRootQuery.AND(alphabetAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.getBusinessQuery().isNotChildIn(alphabetAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery)
  {
    alphabetAttributeRootQuery.AND(alphabetAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(alphabetAttributeRootQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface AlphabetQueryReferenceIF extends com.runwaysdk.generation.loader., com.runwaysdk.query.SelectableReference
  {

    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF getDescription();
    public com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF getDescription(String alias);
    public com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF getDescription(String alias, String displayLabel);
    public com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF getDisplayLabel();
    public com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF getDisplayLabel(String alias);
    public com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getOid();
    public com.runwaysdk.query.SelectableChar getOid(String alias);
    public com.runwaysdk.query.SelectableChar getOid(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getUniversalId();
    public com.runwaysdk.query.SelectableChar getUniversalId(String alias);
    public com.runwaysdk.query.SelectableChar getUniversalId(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(com.runwaysdk.jstest.business.ontology.Alphabet alphabet);

    public com.runwaysdk.query.BasicCondition NE(com.runwaysdk.jstest.business.ontology.Alphabet alphabet);


  public com.runwaysdk.query.Condition alphabetAttributeRoots();
  public com.runwaysdk.query.Condition alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery);

  public com.runwaysdk.query.Condition alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_alphabetAttributeRoots();
  public com.runwaysdk.query.Condition SUBSELECT_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery);

  public com.runwaysdk.query.Condition SUBSELECT_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery);


  public com.runwaysdk.query.Condition NOT_IN_alphabetAttributeRoots();
  public com.runwaysdk.query.Condition NOT_IN_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery);

  public com.runwaysdk.query.Condition NOT_IN_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_alphabetAttributeRoots();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class AlphabetQueryReference extends com.runwaysdk.query.AttributeTerm
 implements AlphabetQueryReferenceIF
, com.runwaysdk.generation.loader.
  {

  public AlphabetQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(com.runwaysdk.jstest.business.ontology.Alphabet alphabet)
    {
      if(alphabet == null) return this.EQ((java.lang.String)null);
      return this.EQ(alphabet.getOid());
    }

    public com.runwaysdk.query.BasicCondition NE(com.runwaysdk.jstest.business.ontology.Alphabet alphabet)
    {
      if(alphabet == null) return this.NE((java.lang.String)null);
      return this.NE(alphabet.getOid());
    }

  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF getDescription()
  {
    return getDescription(null);

  }
 
  public com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF getDescription(String alias)
  {
    return (com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF)this.attributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.DESCRIPTION, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, null);

  }
 
  public com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF getDescription(String alias, String displayLabel)
  {
    return (com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF)this.attributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.DESCRIPTION, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, displayLabel);

  }
  public com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF getDisplayLabel()
  {
    return getDisplayLabel(null);

  }
 
  public com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF getDisplayLabel(String alias)
  {
    return (com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF)this.attributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, null);

  }
 
  public com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel)
  {
    return (com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF)this.attributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableChar getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.OID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getUniversalId()
  {
    return getUniversalId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getUniversalId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.UNIVERSALID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getUniversalId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.UNIVERSALID, alias, displayLabel);

  }

  public com.runwaysdk.query.Condition alphabetAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRoot.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_alphabetAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRoot.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition alphabetAttributeRoots(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery)
  {
    return this.isChildIn(alphabetAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_alphabetAttributeRoots(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery)
  {
    return this.isChildIn_SUBSELECT(alphabetAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery)
  {
    alphabetAttributeRootQuery.AND(alphabetAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.isChildIn(alphabetAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery)
  {
    alphabetAttributeRootQuery.AND(alphabetAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.isChildIn_SUBSELECT(alphabetAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_alphabetAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRoot.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_alphabetAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRoot.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_alphabetAttributeRoots(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery)
  {
    return this.isNotChildIn(alphabetAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_alphabetAttributeRoots(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery)
  {
    return this.isNotChildIn_SUBSELECT(alphabetAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.jstest.business.ontology.AlphabetAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery)
  {
    alphabetAttributeRootQuery.AND(alphabetAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.isNotChildIn(alphabetAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_alphabetAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.jstest.business.ontology.AlphabetAttributeRootQuery alphabetAttributeRootQuery)
  {
    alphabetAttributeRootQuery.AND(alphabetAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.isNotChildIn_SUBSELECT(alphabetAttributeRootQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.UsersQuery.UsersQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.DESCRIPTION)) 
    {
       return new com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.DISPLAYLABEL)) 
    {
       return new com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface AlphabetQueryMultiReferenceIF extends com.runwaysdk.generation.loader., com.runwaysdk.query.SelectableMultiReference
  {

    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF getDescription();
    public com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF getDescription(String alias);
    public com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF getDescription(String alias, String displayLabel);
    public com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF getDisplayLabel();
    public com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF getDisplayLabel(String alias);
    public com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getOid();
    public com.runwaysdk.query.SelectableChar getOid(String alias);
    public com.runwaysdk.query.SelectableChar getOid(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getUniversalId();
    public com.runwaysdk.query.SelectableChar getUniversalId(String alias);
    public com.runwaysdk.query.SelectableChar getUniversalId(String alias, String displayLabel);

    public com.runwaysdk.query.Condition containsAny(com.runwaysdk.jstest.business.ontology.Alphabet ... alphabet);
    public com.runwaysdk.query.Condition notContainsAny(com.runwaysdk.jstest.business.ontology.Alphabet ... alphabet);
    public com.runwaysdk.query.Condition containsAll(com.runwaysdk.jstest.business.ontology.Alphabet ... alphabet);
    public com.runwaysdk.query.Condition notContainsAll(com.runwaysdk.jstest.business.ontology.Alphabet ... alphabet);
    public com.runwaysdk.query.Condition containsExactly(com.runwaysdk.jstest.business.ontology.Alphabet ... alphabet);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class AlphabetQueryMultiReference extends com.runwaysdk.query.AttributeMultiTerm
 implements AlphabetQueryMultiReferenceIF
, com.runwaysdk.generation.loader.
  {

  public AlphabetQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(com.runwaysdk.jstest.business.ontology.Alphabet ... alphabet)  {

      String[] itemIdArray = new String[alphabet.length]; 

      for (int i=0; i<alphabet.length; i++)
      {
        itemIdArray[i] = alphabet[i].getOid();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(com.runwaysdk.jstest.business.ontology.Alphabet ... alphabet)  {

      String[] itemIdArray = new String[alphabet.length]; 

      for (int i=0; i<alphabet.length; i++)
      {
        itemIdArray[i] = alphabet[i].getOid();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(com.runwaysdk.jstest.business.ontology.Alphabet ... alphabet)  {

      String[] itemIdArray = new String[alphabet.length]; 

      for (int i=0; i<alphabet.length; i++)
      {
        itemIdArray[i] = alphabet[i].getOid();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(com.runwaysdk.jstest.business.ontology.Alphabet ... alphabet)  {

      String[] itemIdArray = new String[alphabet.length]; 

      for (int i=0; i<alphabet.length; i++)
      {
        itemIdArray[i] = alphabet[i].getOid();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(com.runwaysdk.jstest.business.ontology.Alphabet ... alphabet)  {

      String[] itemIdArray = new String[alphabet.length]; 

      for (int i=0; i<alphabet.length; i++)
      {
        itemIdArray[i] = alphabet[i].getOid();
      }

      return this.containsExactly(itemIdArray);
  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF getDescription()
  {
    return getDescription(null);

  }
 
  public com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF getDescription(String alias)
  {
    return (com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF)this.attributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.DESCRIPTION, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, null);

  }
 
  public com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF getDescription(String alias, String displayLabel)
  {
    return (com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStructIF)this.attributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.DESCRIPTION, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, displayLabel);

  }
  public com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF getDisplayLabel()
  {
    return getDisplayLabel(null);

  }
 
  public com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF getDisplayLabel(String alias)
  {
    return (com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF)this.attributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, null);

  }
 
  public com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel)
  {
    return (com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStructIF)this.attributeFactory(com.runwaysdk.jstest.business.ontology.Alphabet.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableChar getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.OID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getUniversalId()
  {
    return getUniversalId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getUniversalId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.UNIVERSALID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getUniversalId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.jstest.business.ontology.Alphabet.UNIVERSALID, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.UsersQuery.UsersQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.DESCRIPTION)) 
    {
       return new com.runwaysdk.jstest.business.ontology.AlphabetDescriptionQuery.AlphabetDescriptionQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.jstest.business.ontology.Alphabet.DISPLAYLABEL)) 
    {
       return new com.runwaysdk.jstest.business.ontology.AlphabetDisplayLabelQuery.AlphabetDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }
}
