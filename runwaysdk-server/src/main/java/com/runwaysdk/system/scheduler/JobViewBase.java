/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.scheduler;

@com.runwaysdk.business.ClassSignature(hash = 795436464)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to JobView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class JobViewBase extends com.runwaysdk.business.View
{
  public final static String CLASS = "com.runwaysdk.system.scheduler.JobView";
  public static java.lang.String DOWNSTREAMJOB = "downstreamJob";
  public static java.lang.String DOWNSTREAMJOBDISPLAYLABEL = "downstreamJobDisplayLabel";
  public static java.lang.String OID = "oid";
  public static java.lang.String JOB = "job";
  public static java.lang.String TRIGGERONFAILURE = "triggerOnFailure";
  private static final long serialVersionUID = 795436464;
  
  public JobViewBase()
  {
    super();
  }
  
  public com.runwaysdk.system.scheduler.ExecutableJob getDownstreamJob()
  {
    if (getValue(DOWNSTREAMJOB).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.scheduler.ExecutableJob.get(getValue(DOWNSTREAMJOB));
    }
  }
  
  public String getDownstreamJobId()
  {
    return getValue(DOWNSTREAMJOB);
  }
  
  public void validateDownstreamJob()
  {
    this.validateAttribute(DOWNSTREAMJOB);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getDownstreamJobMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(DOWNSTREAMJOB);
  }
  
  public void setDownstreamJob(com.runwaysdk.system.scheduler.ExecutableJob value)
  {
    if(value == null)
    {
      setValue(DOWNSTREAMJOB, "");
    }
    else
    {
      setValue(DOWNSTREAMJOB, value.getOid());
    }
  }
  
  public String getDownstreamJobDisplayLabel()
  {
    return getValue(DOWNSTREAMJOBDISPLAYLABEL);
  }
  
  public void validateDownstreamJobDisplayLabel()
  {
    this.validateAttribute(DOWNSTREAMJOBDISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getDownstreamJobDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(DOWNSTREAMJOBDISPLAYLABEL);
  }
  
  public void setDownstreamJobDisplayLabel(String value)
  {
    if(value == null)
    {
      setValue(DOWNSTREAMJOBDISPLAYLABEL, "");
    }
    else
    {
      setValue(DOWNSTREAMJOBDISPLAYLABEL, value);
    }
  }
  
  public String getOid()
  {
    return getValue(OID);
  }
  
  public void validateId()
  {
    this.validateAttribute(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public com.runwaysdk.system.scheduler.ExecutableJob getJob()
  {
    if (getValue(JOB).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.scheduler.ExecutableJob.get(getValue(JOB));
    }
  }
  
  public String getJobId()
  {
    return getValue(JOB);
  }
  
  public void validateJob()
  {
    this.validateAttribute(JOB);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getJobMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(JOB);
  }
  
  public void setJob(com.runwaysdk.system.scheduler.ExecutableJob value)
  {
    if(value == null)
    {
      setValue(JOB, "");
    }
    else
    {
      setValue(JOB, value.getOid());
    }
  }
  
  public Boolean getTriggerOnFailure()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(TRIGGERONFAILURE));
  }
  
  public void validateTriggerOnFailure()
  {
    this.validateAttribute(TRIGGERONFAILURE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getTriggerOnFailureMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(TRIGGERONFAILURE);
  }
  
  public void setTriggerOnFailure(Boolean value)
  {
    if(value == null)
    {
      setValue(TRIGGERONFAILURE, "");
    }
    else
    {
      setValue(TRIGGERONFAILURE, java.lang.Boolean.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static JobView get(String oid)
  {
    return (JobView) com.runwaysdk.business.View.get(oid);
  }
  
  public void applyWithJob(com.runwaysdk.system.scheduler.ExecutableJob job)
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.system.scheduler.JobView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void applyWithJob(java.lang.String oid, com.runwaysdk.system.scheduler.ExecutableJob job)
  {
    JobView _instance = JobView.get(oid);
    _instance.applyWithJob(job);
  }
  
  public static com.runwaysdk.system.scheduler.JobView lockJob(java.lang.String jobId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.system.scheduler.JobView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
