/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = -1919431289)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MdType.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MdTypeBase extends com.runwaysdk.system.metadata.Metadata
{
  public final static String CLASS = "com.runwaysdk.system.metadata.MdType";
  public static java.lang.String BASECLASS = "baseClass";
  public static java.lang.String BASESOURCE = "baseSource";
  public static java.lang.String DISPLAYLABEL = "displayLabel";
  private com.runwaysdk.business.Struct displayLabel = null;
  
  public static java.lang.String DTOCLASS = "dtoClass";
  public static java.lang.String DTOSOURCE = "dtoSource";
  public static java.lang.String EXPORTED = "exported";
  public static java.lang.String GENERATESOURCE = "generateSource";
  public static java.lang.String JSBASE = "jsBase";
  public static java.lang.String JSSTUB = "jsStub";
  public static java.lang.String PACKAGENAME = "packageName";
  public static java.lang.String ROOTID = "rootId";
  public static java.lang.String TYPENAME = "typeName";
  private static final long serialVersionUID = -1919431289;
  
  public MdTypeBase()
  {
    super();
    displayLabel = super.getStruct("displayLabel");
  }
  
  public byte[] getBaseClass()
  {
    return getBlob(BASECLASS);
  }
  
  public void validateBaseClass()
  {
    this.validateAttribute(BASECLASS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBlobDAOIF getBaseClassMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBlobDAOIF)mdClassIF.definesAttribute(BASECLASS);
  }
  
  public String getBaseSource()
  {
    return getValue(BASESOURCE);
  }
  
  public void validateBaseSource()
  {
    this.validateAttribute(BASESOURCE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeClobDAOIF getBaseSourceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeClobDAOIF)mdClassIF.definesAttribute(BASESOURCE);
  }
  
  public com.runwaysdk.system.metadata.MetadataDisplayLabel getDisplayLabel()
  {
    return (com.runwaysdk.system.metadata.MetadataDisplayLabel) displayLabel;
  }
  
  public void validateDisplayLabel()
  {
    this.validateAttribute(DISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalCharacterDAOIF getDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalCharacterDAOIF)mdClassIF.definesAttribute(DISPLAYLABEL);
  }
  
  public byte[] getDtoClass()
  {
    return getBlob(DTOCLASS);
  }
  
  public void validateDtoClass()
  {
    this.validateAttribute(DTOCLASS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBlobDAOIF getDtoClassMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBlobDAOIF)mdClassIF.definesAttribute(DTOCLASS);
  }
  
  public String getDtoSource()
  {
    return getValue(DTOSOURCE);
  }
  
  public void validateDtoSource()
  {
    this.validateAttribute(DTOSOURCE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeClobDAOIF getDtoSourceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeClobDAOIF)mdClassIF.definesAttribute(DTOSOURCE);
  }
  
  public Boolean getExported()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(EXPORTED));
  }
  
  public void validateExported()
  {
    this.validateAttribute(EXPORTED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getExportedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(EXPORTED);
  }
  
  public void setExported(Boolean value)
  {
    if(value == null)
    {
      setValue(EXPORTED, "");
    }
    else
    {
      setValue(EXPORTED, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getGenerateSource()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(GENERATESOURCE));
  }
  
  public void validateGenerateSource()
  {
    this.validateAttribute(GENERATESOURCE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getGenerateSourceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(GENERATESOURCE);
  }
  
  public void setGenerateSource(Boolean value)
  {
    if(value == null)
    {
      setValue(GENERATESOURCE, "");
    }
    else
    {
      setValue(GENERATESOURCE, java.lang.Boolean.toString(value));
    }
  }
  
  public String getJsBase()
  {
    return getValue(JSBASE);
  }
  
  public void validateJsBase()
  {
    this.validateAttribute(JSBASE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeClobDAOIF getJsBaseMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeClobDAOIF)mdClassIF.definesAttribute(JSBASE);
  }
  
  public void setJsBase(String value)
  {
    if(value == null)
    {
      setValue(JSBASE, "");
    }
    else
    {
      setValue(JSBASE, value);
    }
  }
  
  public String getJsStub()
  {
    return getValue(JSSTUB);
  }
  
  public void validateJsStub()
  {
    this.validateAttribute(JSSTUB);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeClobDAOIF getJsStubMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeClobDAOIF)mdClassIF.definesAttribute(JSSTUB);
  }
  
  public void setJsStub(String value)
  {
    if(value == null)
    {
      setValue(JSSTUB, "");
    }
    else
    {
      setValue(JSSTUB, value);
    }
  }
  
  public String getPackageName()
  {
    return getValue(PACKAGENAME);
  }
  
  public void validatePackageName()
  {
    this.validateAttribute(PACKAGENAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getPackageNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(PACKAGENAME);
  }
  
  public void setPackageName(String value)
  {
    if(value == null)
    {
      setValue(PACKAGENAME, "");
    }
    else
    {
      setValue(PACKAGENAME, value);
    }
  }
  
  protected String getRootId()
  {
    return getValue(ROOTID);
  }
  
  protected void validateRootId()
  {
    this.validateAttribute(ROOTID);
  }
  
  protected static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getRootIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ROOTID);
  }
  
  public String getTypeName()
  {
    return getValue(TYPENAME);
  }
  
  public void validateTypeName()
  {
    this.validateAttribute(TYPENAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getTypeNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(TYPENAME);
  }
  
  public void setTypeName(String value)
  {
    if(value == null)
    {
      setValue(TYPENAME, "");
    }
    else
    {
      setValue(TYPENAME, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.system.metadata.TypeMethod addMdMethod(com.runwaysdk.system.metadata.MdMethod mdMethod)
  {
    return (com.runwaysdk.system.metadata.TypeMethod) addChild(mdMethod, com.runwaysdk.system.metadata.TypeMethod.CLASS);
  }
  
  public void removeMdMethod(com.runwaysdk.system.metadata.MdMethod mdMethod)
  {
    removeAllChildren(mdMethod, com.runwaysdk.system.metadata.TypeMethod.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdMethod> getAllMdMethod()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdMethod>) getChildren(com.runwaysdk.system.metadata.TypeMethod.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.TypeMethod> getAllMdMethodRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.TypeMethod>) getChildRelationships(com.runwaysdk.system.metadata.TypeMethod.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.TypeMethod getMdMethodRel(com.runwaysdk.system.metadata.MdMethod mdMethod)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.TypeMethod> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.TypeMethod>) getRelationshipsWithChild(mdMethod, com.runwaysdk.system.metadata.TypeMethod.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static MdType get(String oid)
  {
    return (MdType) com.runwaysdk.business.Business.get(oid);
  }
  
  public static MdType getByKey(String key)
  {
    return (MdType) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static MdType lock(java.lang.String oid)
  {
    MdType _instance = MdType.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static MdType unlock(java.lang.String oid)
  {
    MdType _instance = MdType.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return this.getClassDisplayLabel();
    }
  }
}
