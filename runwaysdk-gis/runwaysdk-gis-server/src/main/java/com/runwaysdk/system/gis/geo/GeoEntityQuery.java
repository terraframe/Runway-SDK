/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK GIS(tm).
 *
 * Runway SDK GIS(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK GIS(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK GIS(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.gis.geo;

@com.runwaysdk.business.ClassSignature(hash = 848402659)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to GeoEntity.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class GeoEntityQuery extends com.runwaysdk.query.GeneratedBusinessQuery

{

  public GeoEntityQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public GeoEntityQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return com.runwaysdk.system.gis.geo.GeoEntity.CLASS;
  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF getDisplayLabel()
  {
    return getDisplayLabel(null);

  }
 
  public com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF getDisplayLabel(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.GeoEntity.DISPLAYLABEL);

    return (com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.DISPLAYLABEL, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.GeoEntity.DISPLAYLABEL);

    return (com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.DISPLAYLABEL, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.GeoEntity.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.ENTITYDOMAIN, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.GeoEntity.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.ENTITYDOMAIN, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getGeoId()
  {
    return getGeoId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getGeoId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.GEOID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getGeoId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.GEOID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableGeometry getGeoMultiPolygon()
  {
    return getGeoMultiPolygon(null);

  }
 
  public com.runwaysdk.query.SelectableGeometry getGeoMultiPolygon(String alias)
  {
    return (com.runwaysdk.query.SelectableGeometry)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.GEOMULTIPOLYGON, alias, null);

  }
 
  public com.runwaysdk.query.SelectableGeometry getGeoMultiPolygon(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableGeometry)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.GEOMULTIPOLYGON, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableGeometry getGeoPoint()
  {
    return getGeoPoint(null);

  }
 
  public com.runwaysdk.query.SelectableGeometry getGeoPoint(String alias)
  {
    return (com.runwaysdk.query.SelectableGeometry)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.GEOPOINT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableGeometry getGeoPoint(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableGeometry)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.GEOPOINT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableChar getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.OID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.GeoEntity.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.LOCKEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.GeoEntity.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.LOCKEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.GeoEntity.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.OWNER, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.GeoEntity.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.OWNER, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF getUniversal()
  {
    return getUniversal(null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF getUniversal(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.GeoEntity.UNIVERSAL);

    return (com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.UNIVERSAL, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF getUniversal(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.GeoEntity.UNIVERSAL);

    return (com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.UNIVERSAL, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getWkt()
  {
    return getWkt(null);

  }
 
  public com.runwaysdk.query.SelectableChar getWkt(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.WKT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getWkt(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.GeoEntity.WKT, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.UNIVERSAL)) 
    {
       return new com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.DISPLAYLABEL)) 
    {
       return new com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends GeoEntity> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<GeoEntity>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isChildIn(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeMultiTermQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeMultiTermQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    geoEntityMultiTermAttributeRootQuery.AND(geoEntityMultiTermAttributeRootQuery.hasParent(mdAttributeMultiTermQuery));
    return this.getBusinessQuery().isChildIn(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    geoEntityMultiTermAttributeRootQuery.AND(geoEntityMultiTermAttributeRootQuery.hasParent(mdAttributeMultiTermQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(geoEntityMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotChildIn(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeMultiTermQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeMultiTermQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    geoEntityMultiTermAttributeRootQuery.AND(geoEntityMultiTermAttributeRootQuery.hasParent(mdAttributeMultiTermQuery));
    return this.getBusinessQuery().isNotChildIn(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    geoEntityMultiTermAttributeRootQuery.AND(geoEntityMultiTermAttributeRootQuery.hasParent(mdAttributeMultiTermQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(geoEntityMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isChildIn(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    geoEntityTermAttributeRootQuery.AND(geoEntityTermAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.getBusinessQuery().isChildIn(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    geoEntityTermAttributeRootQuery.AND(geoEntityTermAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(geoEntityTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotChildIn(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    geoEntityTermAttributeRootQuery.AND(geoEntityTermAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.getBusinessQuery().isNotChildIn(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    geoEntityTermAttributeRootQuery.AND(geoEntityTermAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(geoEntityTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition locatedIn()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_locatedIn()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition locatedIn(com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    return this.getBusinessQuery().isChildIn(locatedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_locatedIn(com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(locatedInQuery);
  }

  public com.runwaysdk.query.Condition locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoEntityQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoEntityQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    locatedInQuery.AND(locatedInQuery.hasParent(geoEntityQuery));
    return this.getBusinessQuery().isChildIn(locatedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    locatedInQuery.AND(locatedInQuery.hasParent(geoEntityQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(locatedInQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_locatedIn()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_locatedIn()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_locatedIn(com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    return this.getBusinessQuery().isNotChildIn(locatedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_locatedIn(com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(locatedInQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoEntityQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoEntityQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    locatedInQuery.AND(locatedInQuery.hasParent(geoEntityQuery));
    return this.getBusinessQuery().isNotChildIn(locatedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    locatedInQuery.AND(locatedInQuery.hasParent(geoEntityQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(locatedInQuery);
  }


  public com.runwaysdk.query.Condition contains()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_contains()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition contains(com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    return this.getBusinessQuery().isParentIn(locatedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_contains(com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(locatedInQuery);
  }

  public com.runwaysdk.query.Condition contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    locatedInQuery.AND(locatedInQuery.hasChild(geoEntityQuery));
    return this.getBusinessQuery().isParentIn(locatedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    locatedInQuery.AND(locatedInQuery.hasChild(geoEntityQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(locatedInQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_contains()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_contains(com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    return this.getBusinessQuery().isNotParentIn(locatedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains(com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(locatedInQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    locatedInQuery.AND(locatedInQuery.hasChild(geoEntityQuery));
    return this.getBusinessQuery().isNotParentIn(locatedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    locatedInQuery.AND(locatedInQuery.hasChild(geoEntityQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(locatedInQuery);
  }


  public com.runwaysdk.query.Condition synonym()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymRelationship.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_synonym()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymRelationship.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition synonym(com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery)
  {
    return this.getBusinessQuery().isParentIn(synonymRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonym(com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(synonymRelationshipQuery);
  }

  public com.runwaysdk.query.Condition synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery)
  {
    synonymRelationshipQuery.AND(synonymRelationshipQuery.hasChild(synonymQuery));
    return this.getBusinessQuery().isParentIn(synonymRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery)
  {
    synonymRelationshipQuery.AND(synonymRelationshipQuery.hasChild(synonymQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(synonymRelationshipQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_synonym()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymRelationship.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonym()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymRelationship.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonym(com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery)
  {
    return this.getBusinessQuery().isNotParentIn(synonymRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonym(com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(synonymRelationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery)
  {
    synonymRelationshipQuery.AND(synonymRelationshipQuery.hasChild(synonymQuery));
    return this.getBusinessQuery().isNotParentIn(synonymRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery)
  {
    synonymRelationshipQuery.AND(synonymRelationshipQuery.hasChild(synonymQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(synonymRelationshipQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface GeoEntityQueryReferenceIF extends com.runwaysdk.query.SelectableReference
  {

    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF getDisplayLabel();
    public com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF getDisplayLabel(String alias);
    public com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getGeoId();
    public com.runwaysdk.query.SelectableChar getGeoId(String alias);
    public com.runwaysdk.query.SelectableChar getGeoId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableGeometry getGeoMultiPolygon();
    public com.runwaysdk.query.SelectableGeometry getGeoMultiPolygon(String alias);
    public com.runwaysdk.query.SelectableGeometry getGeoMultiPolygon(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableGeometry getGeoPoint();
    public com.runwaysdk.query.SelectableGeometry getGeoPoint(String alias);
    public com.runwaysdk.query.SelectableGeometry getGeoPoint(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getOid();
    public com.runwaysdk.query.SelectableChar getOid(String alias);
    public com.runwaysdk.query.SelectableChar getOid(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);
    public com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF getUniversal();
    public com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF getUniversal(String alias);
    public com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF getUniversal(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getWkt();
    public com.runwaysdk.query.SelectableChar getWkt(String alias);
    public com.runwaysdk.query.SelectableChar getWkt(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(com.runwaysdk.system.gis.geo.GeoEntity geoEntity);

    public com.runwaysdk.query.BasicCondition NE(com.runwaysdk.system.gis.geo.GeoEntity geoEntity);


  public com.runwaysdk.query.Condition contains();

  public com.runwaysdk.query.Condition contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery);

  public com.runwaysdk.query.Condition contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery);


  public com.runwaysdk.query.Condition SUBSELECT_contains();

  public com.runwaysdk.query.Condition SUBSELECT_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery);

  public com.runwaysdk.query.Condition SUBSELECT_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery);


  public com.runwaysdk.query.Condition synonym();

  public com.runwaysdk.query.Condition synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery);

  public com.runwaysdk.query.Condition synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery);


  public com.runwaysdk.query.Condition SUBSELECT_synonym();

  public com.runwaysdk.query.Condition SUBSELECT_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery);

  public com.runwaysdk.query.Condition SUBSELECT_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery);


  public com.runwaysdk.query.Condition NOT_IN_contains();

  public com.runwaysdk.query.Condition NOT_IN_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery);

  public com.runwaysdk.query.Condition NOT_IN_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery);


  public com.runwaysdk.query.Condition NOT_IN_synonym();

  public com.runwaysdk.query.Condition NOT_IN_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery);

  public com.runwaysdk.query.Condition NOT_IN_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonym();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery);


  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots();
  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery);

  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots();
  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery);

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots();
  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery);

  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots();
  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery);

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery);


  public com.runwaysdk.query.Condition locatedIn();
  public com.runwaysdk.query.Condition locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery);

  public com.runwaysdk.query.Condition locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery);


  public com.runwaysdk.query.Condition SUBSELECT_locatedIn();
  public com.runwaysdk.query.Condition SUBSELECT_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery);

  public com.runwaysdk.query.Condition SUBSELECT_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery);


  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots();
  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery);

  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots();
  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery);

  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery);


  public com.runwaysdk.query.Condition NOT_IN_locatedIn();
  public com.runwaysdk.query.Condition NOT_IN_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery);

  public com.runwaysdk.query.Condition NOT_IN_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_locatedIn();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class GeoEntityQueryReference extends com.runwaysdk.query.AttributeTerm
 implements GeoEntityQueryReferenceIF

  {

  public GeoEntityQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(com.runwaysdk.system.gis.geo.GeoEntity geoEntity)
    {
      if(geoEntity == null) return this.EQ((java.lang.String)null);
      return this.EQ(geoEntity.getOid());
    }

    public com.runwaysdk.query.BasicCondition NE(com.runwaysdk.system.gis.geo.GeoEntity geoEntity)
    {
      if(geoEntity == null) return this.NE((java.lang.String)null);
      return this.NE(geoEntity.getOid());
    }

  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF getDisplayLabel()
  {
    return getDisplayLabel(null);

  }
 
  public com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF getDisplayLabel(String alias)
  {
    return (com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF)this.attributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, null);

  }
 
  public com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF)this.attributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getGeoId()
  {
    return getGeoId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getGeoId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.GEOID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getGeoId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.GEOID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableGeometry getGeoMultiPolygon()
  {
    return getGeoMultiPolygon(null);

  }
 
  public com.runwaysdk.query.SelectableGeometry getGeoMultiPolygon(String alias)
  {
    return (com.runwaysdk.query.SelectableGeometry)this.get(com.runwaysdk.system.gis.geo.GeoEntity.GEOMULTIPOLYGON, alias, null);

  }
 
  public com.runwaysdk.query.SelectableGeometry getGeoMultiPolygon(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableGeometry)this.get(com.runwaysdk.system.gis.geo.GeoEntity.GEOMULTIPOLYGON, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableGeometry getGeoPoint()
  {
    return getGeoPoint(null);

  }
 
  public com.runwaysdk.query.SelectableGeometry getGeoPoint(String alias)
  {
    return (com.runwaysdk.query.SelectableGeometry)this.get(com.runwaysdk.system.gis.geo.GeoEntity.GEOPOINT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableGeometry getGeoPoint(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableGeometry)this.get(com.runwaysdk.system.gis.geo.GeoEntity.GEOPOINT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableChar getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.OID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(com.runwaysdk.system.gis.geo.GeoEntity.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(com.runwaysdk.system.gis.geo.GeoEntity.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF getUniversal()
  {
    return getUniversal(null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF getUniversal(String alias)
  {
    return (com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.UNIVERSAL, alias, null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF getUniversal(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.UNIVERSAL,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getWkt()
  {
    return getWkt(null);

  }
 
  public com.runwaysdk.query.SelectableChar getWkt(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.WKT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getWkt(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.WKT, alias, displayLabel);

  }

  public com.runwaysdk.query.Condition contains()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_contains()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition contains(com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    return this.isParentIn(locatedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_contains(com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    return this.isParentIn_SUBSELECT(locatedInQuery);
  }

  public com.runwaysdk.query.Condition contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    locatedInQuery.AND(locatedInQuery.hasChild(geoEntityQuery));
    return this.isParentIn(locatedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    locatedInQuery.AND(locatedInQuery.hasChild(geoEntityQuery));
    return this.isParentIn_SUBSELECT(locatedInQuery);
  }


  public com.runwaysdk.query.Condition synonym()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymRelationship.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_synonym()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymRelationship.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition synonym(com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery)
  {
    return this.isParentIn(synonymRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonym(com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery)
  {
    return this.isParentIn_SUBSELECT(synonymRelationshipQuery);
  }

  public com.runwaysdk.query.Condition synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery)
  {
    synonymRelationshipQuery.AND(synonymRelationshipQuery.hasChild(synonymQuery));
    return this.isParentIn(synonymRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery)
  {
    synonymRelationshipQuery.AND(synonymRelationshipQuery.hasChild(synonymQuery));
    return this.isParentIn_SUBSELECT(synonymRelationshipQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_contains()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_contains(com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    return this.isNotParentIn(locatedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains(com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    return this.isNotParentIn_SUBSELECT(locatedInQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    locatedInQuery.AND(locatedInQuery.hasChild(geoEntityQuery));
    return this.isNotParentIn(locatedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    locatedInQuery.AND(locatedInQuery.hasChild(geoEntityQuery));
    return this.isNotParentIn_SUBSELECT(locatedInQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_synonym()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymRelationship.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonym()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymRelationship.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonym(com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery)
  {
    return this.isNotParentIn(synonymRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonym(com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery)
  {
    return this.isNotParentIn_SUBSELECT(synonymRelationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery)
  {
    synonymRelationshipQuery.AND(synonymRelationshipQuery.hasChild(synonymQuery));
    return this.isNotParentIn(synonymRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonym(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymRelationshipQuery synonymRelationshipQuery)
  {
    synonymRelationshipQuery.AND(synonymRelationshipQuery.hasChild(synonymQuery));
    return this.isNotParentIn_SUBSELECT(synonymRelationshipQuery);
  }


  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    return this.isChildIn(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    return this.isChildIn_SUBSELECT(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeMultiTermQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeMultiTermQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    geoEntityMultiTermAttributeRootQuery.AND(geoEntityMultiTermAttributeRootQuery.hasParent(mdAttributeMultiTermQuery));
    return this.isChildIn(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    geoEntityMultiTermAttributeRootQuery.AND(geoEntityMultiTermAttributeRootQuery.hasParent(mdAttributeMultiTermQuery));
    return this.isChildIn_SUBSELECT(geoEntityMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    return this.isChildIn(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    return this.isChildIn_SUBSELECT(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    geoEntityTermAttributeRootQuery.AND(geoEntityTermAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.isChildIn(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    geoEntityTermAttributeRootQuery.AND(geoEntityTermAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.isChildIn_SUBSELECT(geoEntityTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition locatedIn()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_locatedIn()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition locatedIn(com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    return this.isChildIn(locatedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_locatedIn(com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    return this.isChildIn_SUBSELECT(locatedInQuery);
  }

  public com.runwaysdk.query.Condition locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoEntityQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoEntityQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    locatedInQuery.AND(locatedInQuery.hasParent(geoEntityQuery));
    return this.isChildIn(locatedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    locatedInQuery.AND(locatedInQuery.hasParent(geoEntityQuery));
    return this.isChildIn_SUBSELECT(locatedInQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    return this.isNotChildIn(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    return this.isNotChildIn_SUBSELECT(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeMultiTermQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeMultiTermQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    geoEntityMultiTermAttributeRootQuery.AND(geoEntityMultiTermAttributeRootQuery.hasParent(mdAttributeMultiTermQuery));
    return this.isNotChildIn(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    geoEntityMultiTermAttributeRootQuery.AND(geoEntityMultiTermAttributeRootQuery.hasParent(mdAttributeMultiTermQuery));
    return this.isNotChildIn_SUBSELECT(geoEntityMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    return this.isNotChildIn(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    return this.isNotChildIn_SUBSELECT(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    geoEntityTermAttributeRootQuery.AND(geoEntityTermAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.isNotChildIn(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    geoEntityTermAttributeRootQuery.AND(geoEntityTermAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.isNotChildIn_SUBSELECT(geoEntityTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_locatedIn()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_locatedIn()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_locatedIn(com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    return this.isNotChildIn(locatedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_locatedIn(com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    return this.isNotChildIn_SUBSELECT(locatedInQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoEntityQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.LocatedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoEntityQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    locatedInQuery.AND(locatedInQuery.hasParent(geoEntityQuery));
    return this.isNotChildIn(locatedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_locatedIn(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.LocatedInQuery locatedInQuery)
  {
    locatedInQuery.AND(locatedInQuery.hasParent(geoEntityQuery));
    return this.isNotChildIn_SUBSELECT(locatedInQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.UNIVERSAL)) 
    {
       return new com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.DISPLAYLABEL)) 
    {
       return new com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface GeoEntityQueryMultiReferenceIF extends com.runwaysdk.query.SelectableMultiReference
  {

    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF getDisplayLabel();
    public com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF getDisplayLabel(String alias);
    public com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getGeoId();
    public com.runwaysdk.query.SelectableChar getGeoId(String alias);
    public com.runwaysdk.query.SelectableChar getGeoId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableGeometry getGeoMultiPolygon();
    public com.runwaysdk.query.SelectableGeometry getGeoMultiPolygon(String alias);
    public com.runwaysdk.query.SelectableGeometry getGeoMultiPolygon(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableGeometry getGeoPoint();
    public com.runwaysdk.query.SelectableGeometry getGeoPoint(String alias);
    public com.runwaysdk.query.SelectableGeometry getGeoPoint(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getOid();
    public com.runwaysdk.query.SelectableChar getOid(String alias);
    public com.runwaysdk.query.SelectableChar getOid(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);
    public com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF getUniversal();
    public com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF getUniversal(String alias);
    public com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF getUniversal(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getWkt();
    public com.runwaysdk.query.SelectableChar getWkt(String alias);
    public com.runwaysdk.query.SelectableChar getWkt(String alias, String displayLabel);

    public com.runwaysdk.query.Condition containsAny(com.runwaysdk.system.gis.geo.GeoEntity ... geoEntity);
    public com.runwaysdk.query.Condition notContainsAny(com.runwaysdk.system.gis.geo.GeoEntity ... geoEntity);
    public com.runwaysdk.query.Condition containsAll(com.runwaysdk.system.gis.geo.GeoEntity ... geoEntity);
    public com.runwaysdk.query.Condition notContainsAll(com.runwaysdk.system.gis.geo.GeoEntity ... geoEntity);
    public com.runwaysdk.query.Condition containsExactly(com.runwaysdk.system.gis.geo.GeoEntity ... geoEntity);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class GeoEntityQueryMultiReference extends com.runwaysdk.query.AttributeMultiTerm
 implements GeoEntityQueryMultiReferenceIF

  {

  public GeoEntityQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(com.runwaysdk.system.gis.geo.GeoEntity ... geoEntity)  {

      String[] itemIdArray = new String[geoEntity.length]; 

      for (int i=0; i<geoEntity.length; i++)
      {
        itemIdArray[i] = geoEntity[i].getOid();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(com.runwaysdk.system.gis.geo.GeoEntity ... geoEntity)  {

      String[] itemIdArray = new String[geoEntity.length]; 

      for (int i=0; i<geoEntity.length; i++)
      {
        itemIdArray[i] = geoEntity[i].getOid();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(com.runwaysdk.system.gis.geo.GeoEntity ... geoEntity)  {

      String[] itemIdArray = new String[geoEntity.length]; 

      for (int i=0; i<geoEntity.length; i++)
      {
        itemIdArray[i] = geoEntity[i].getOid();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(com.runwaysdk.system.gis.geo.GeoEntity ... geoEntity)  {

      String[] itemIdArray = new String[geoEntity.length]; 

      for (int i=0; i<geoEntity.length; i++)
      {
        itemIdArray[i] = geoEntity[i].getOid();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(com.runwaysdk.system.gis.geo.GeoEntity ... geoEntity)  {

      String[] itemIdArray = new String[geoEntity.length]; 

      for (int i=0; i<geoEntity.length; i++)
      {
        itemIdArray[i] = geoEntity[i].getOid();
      }

      return this.containsExactly(itemIdArray);
  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF getDisplayLabel()
  {
    return getDisplayLabel(null);

  }
 
  public com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF getDisplayLabel(String alias)
  {
    return (com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF)this.attributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, null);

  }
 
  public com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStructIF)this.attributeFactory(com.runwaysdk.system.gis.geo.GeoEntity.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getGeoId()
  {
    return getGeoId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getGeoId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.GEOID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getGeoId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.GEOID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableGeometry getGeoMultiPolygon()
  {
    return getGeoMultiPolygon(null);

  }
 
  public com.runwaysdk.query.SelectableGeometry getGeoMultiPolygon(String alias)
  {
    return (com.runwaysdk.query.SelectableGeometry)this.get(com.runwaysdk.system.gis.geo.GeoEntity.GEOMULTIPOLYGON, alias, null);

  }
 
  public com.runwaysdk.query.SelectableGeometry getGeoMultiPolygon(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableGeometry)this.get(com.runwaysdk.system.gis.geo.GeoEntity.GEOMULTIPOLYGON, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableGeometry getGeoPoint()
  {
    return getGeoPoint(null);

  }
 
  public com.runwaysdk.query.SelectableGeometry getGeoPoint(String alias)
  {
    return (com.runwaysdk.query.SelectableGeometry)this.get(com.runwaysdk.system.gis.geo.GeoEntity.GEOPOINT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableGeometry getGeoPoint(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableGeometry)this.get(com.runwaysdk.system.gis.geo.GeoEntity.GEOPOINT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableChar getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.OID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(com.runwaysdk.system.gis.geo.GeoEntity.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(com.runwaysdk.system.gis.geo.GeoEntity.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF getUniversal()
  {
    return getUniversal(null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF getUniversal(String alias)
  {
    return (com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.UNIVERSAL, alias, null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF getUniversal(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.GeoEntity.UNIVERSAL,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getWkt()
  {
    return getWkt(null);

  }
 
  public com.runwaysdk.query.SelectableChar getWkt(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.WKT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getWkt(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.GeoEntity.WKT, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.UNIVERSAL)) 
    {
       return new com.runwaysdk.system.gis.geo.UniversalQuery.UniversalQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.gis.geo.GeoEntity.DISPLAYLABEL)) 
    {
       return new com.runwaysdk.system.gis.geo.GeoEntityDisplayLabelQuery.GeoEntityDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }
}
