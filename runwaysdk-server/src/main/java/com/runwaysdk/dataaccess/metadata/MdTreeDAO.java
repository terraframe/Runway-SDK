/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.dataaccess.metadata;

import java.util.Map;

import com.runwaysdk.constants.MdTreeInfo;
import com.runwaysdk.dataaccess.BusinessDAO;
import com.runwaysdk.dataaccess.DataAccessException;
import com.runwaysdk.dataaccess.MdRelationshipDAOIF;
import com.runwaysdk.dataaccess.MdTreeDAOIF;
import com.runwaysdk.dataaccess.attributes.entity.Attribute;
import com.runwaysdk.dataaccess.cache.ObjectCache;


public class MdTreeDAO extends MdGraphDAO implements MdTreeDAOIF
{

  /**
   * Generated by Eclipse.
   */
  private static final long serialVersionUID = -2408692524434762547L;

  public MdTreeDAO()
  {
    super();
  }

  public MdTreeDAO(Map<String, Attribute> attributeMap, String type)
  {
    super(attributeMap, type);
  }
  
  /* (non-Javadoc)
   * @see com.runwaysdk.dataaccess.BusinessDAO#create(java.util.Hashtable)
   */
  public MdTreeDAO create(Map<String, Attribute> attributeMap, String relationishipType)
  {
    return new MdTreeDAO(attributeMap, MdTreeInfo.CLASS);
  }
  
  /**
   * Returns a new MdTree. 
   * Some attributes will contain default values, as defined in the attribute
   * metadata. Otherwise, the attributes will be blank.
   * 
   * @return MdTree.
   */
  public static MdTreeDAO newInstance()
  {
    return (MdTreeDAO)BusinessDAO.newInstance(MdTreeInfo.CLASS);
  }
  
  
  
  /**
   * Returns the MdTreeIF that defines the relationship 
   * with the given type.
   * 
   * <br/><b>Precondition:</b>   relationshipType != null
   * <br/><b>Precondition:</b>   !relationshipType.trim().equals("")
   * <br/><b>Precondition:</b>   relationshipType is a valid relationship type defined in the database
   * <br/><b>Postcondition:</b>  return value is not null
   * 
   * @param relationshipType type of the relationship
   * @return MdTreeIF that defines the relationship with the given type
   * @throws DataAccessException if the relationship type is not valid.
   */
  public static MdTreeDAOIF getMdTreeDAO(String relationshipType)
  {
    return (MdTreeDAOIF)ObjectCache.getMdEntityDAO(relationshipType); 
  }
  
  /* (non-Javadoc)
   * @see com.runwaysdk.dataaccess.BusinessDAO#getBusinessDAO()
   */
  public MdTreeDAO getBusinessDAO()
  {
    return (MdTreeDAO)super.getBusinessDAO();
  }
  
  /**
   * Ensures that the parent relationship type is valid.  An MdRelationship can only extend another
   * MdRelationship.  An MdGraph can only extend another MdGraph.  An MdTree can only extend another
   * MdTree.
   * @param parentMdEntityIF
   */
  protected void validateParentRelationshipType(MdRelationshipDAOIF parentMdRelationshipIF)
  {
    // A MdRelationship can only extend another MdRelationship
    if (!parentMdRelationshipIF.getType().equals(MdTreeInfo.CLASS))
    {
      String error = "[" + definesType() + "] cannot extend [" + parentMdRelationshipIF.definesType()
          + "] - it can only extend an [" + this.getType() +"] ";
      throw new InheritanceException(error);
    }
  }
  
}
