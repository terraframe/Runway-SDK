package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = -1804128127)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MdAttributeMultiTerm.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class MdAttributeMultiTermQuery extends com.runwaysdk.system.metadata.MdAttributeMultiReferenceQuery

{

  public MdAttributeMultiTermQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
    super(componentQueryFactory);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public MdAttributeMultiTermQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
    super(valueQuery);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return com.runwaysdk.system.metadata.MdAttributeMultiTerm.CLASS;
  }
  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends MdAttributeMultiTerm> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<MdAttributeMultiTerm>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isParentIn(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    geoEntityMultiTermAttributeRootQuery.AND(geoEntityMultiTermAttributeRootQuery.hasChild(geoEntityQuery));
    return this.getBusinessQuery().isParentIn(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    geoEntityMultiTermAttributeRootQuery.AND(geoEntityMultiTermAttributeRootQuery.hasChild(geoEntityQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(geoEntityMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotParentIn(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    geoEntityMultiTermAttributeRootQuery.AND(geoEntityMultiTermAttributeRootQuery.hasChild(geoEntityQuery));
    return this.getBusinessQuery().isNotParentIn(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    geoEntityMultiTermAttributeRootQuery.AND(geoEntityMultiTermAttributeRootQuery.hasChild(geoEntityQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(geoEntityMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition synonymMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_synonymMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isParentIn(synonymMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(synonymMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery)
  {
    synonymMultiTermAttributeRootQuery.AND(synonymMultiTermAttributeRootQuery.hasChild(synonymQuery));
    return this.getBusinessQuery().isParentIn(synonymMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery)
  {
    synonymMultiTermAttributeRootQuery.AND(synonymMultiTermAttributeRootQuery.hasChild(synonymQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(synonymMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_synonymMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotParentIn(synonymMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(synonymMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery)
  {
    synonymMultiTermAttributeRootQuery.AND(synonymMultiTermAttributeRootQuery.hasChild(synonymQuery));
    return this.getBusinessQuery().isNotParentIn(synonymMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery)
  {
    synonymMultiTermAttributeRootQuery.AND(synonymMultiTermAttributeRootQuery.hasChild(synonymQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(synonymMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition universalMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_universalMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isParentIn(universalMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(universalMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery)
  {
    universalMultiTermAttributeRootQuery.AND(universalMultiTermAttributeRootQuery.hasChild(universalQuery));
    return this.getBusinessQuery().isParentIn(universalMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery)
  {
    universalMultiTermAttributeRootQuery.AND(universalMultiTermAttributeRootQuery.hasChild(universalQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(universalMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_universalMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotParentIn(universalMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(universalMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery)
  {
    universalMultiTermAttributeRootQuery.AND(universalMultiTermAttributeRootQuery.hasChild(universalQuery));
    return this.getBusinessQuery().isNotParentIn(universalMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery)
  {
    universalMultiTermAttributeRootQuery.AND(universalMultiTermAttributeRootQuery.hasChild(universalQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(universalMultiTermAttributeRootQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface MdAttributeMultiTermQueryReferenceIF extends com.runwaysdk.system.metadata.MdAttributeMultiReferenceQuery.MdAttributeMultiReferenceQueryReferenceIF
  {


    public com.runwaysdk.query.BasicCondition EQ(com.runwaysdk.system.metadata.MdAttributeMultiTerm mdAttributeMultiTerm);

    public com.runwaysdk.query.BasicCondition NE(com.runwaysdk.system.metadata.MdAttributeMultiTerm mdAttributeMultiTerm);


  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots();

  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery);

  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots();

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery);

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition synonymMultiTermAttributeRoots();

  public com.runwaysdk.query.Condition synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery);

  public com.runwaysdk.query.Condition synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_synonymMultiTermAttributeRoots();

  public com.runwaysdk.query.Condition SUBSELECT_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery);

  public com.runwaysdk.query.Condition SUBSELECT_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition universalMultiTermAttributeRoots();

  public com.runwaysdk.query.Condition universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_universalMultiTermAttributeRoots();

  public com.runwaysdk.query.Condition SUBSELECT_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition SUBSELECT_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots();

  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery);

  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition NOT_IN_synonymMultiTermAttributeRoots();

  public com.runwaysdk.query.Condition NOT_IN_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery);

  public com.runwaysdk.query.Condition NOT_IN_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymMultiTermAttributeRoots();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition NOT_IN_universalMultiTermAttributeRoots();

  public com.runwaysdk.query.Condition NOT_IN_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition NOT_IN_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalMultiTermAttributeRoots();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class MdAttributeMultiTermQueryReference extends com.runwaysdk.system.metadata.MdAttributeMultiReferenceQuery.MdAttributeMultiReferenceQueryReference
 implements MdAttributeMultiTermQueryReferenceIF

  {

  public MdAttributeMultiTermQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(com.runwaysdk.system.metadata.MdAttributeMultiTerm mdAttributeMultiTerm)
    {
      if(mdAttributeMultiTerm == null) return this.EQ((java.lang.String)null);
      return this.EQ(mdAttributeMultiTerm.getOid());
    }

    public com.runwaysdk.query.BasicCondition NE(com.runwaysdk.system.metadata.MdAttributeMultiTerm mdAttributeMultiTerm)
    {
      if(mdAttributeMultiTerm == null) return this.NE((java.lang.String)null);
      return this.NE(mdAttributeMultiTerm.getOid());
    }


  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    return this.isParentIn(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    return this.isParentIn_SUBSELECT(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    geoEntityMultiTermAttributeRootQuery.AND(geoEntityMultiTermAttributeRootQuery.hasChild(geoEntityQuery));
    return this.isParentIn(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    geoEntityMultiTermAttributeRootQuery.AND(geoEntityMultiTermAttributeRootQuery.hasChild(geoEntityQuery));
    return this.isParentIn_SUBSELECT(geoEntityMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition synonymMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRoot.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_synonymMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRoot.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery)
  {
    return this.isParentIn(synonymMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery)
  {
    return this.isParentIn_SUBSELECT(synonymMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery)
  {
    synonymMultiTermAttributeRootQuery.AND(synonymMultiTermAttributeRootQuery.hasChild(synonymQuery));
    return this.isParentIn(synonymMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery)
  {
    synonymMultiTermAttributeRootQuery.AND(synonymMultiTermAttributeRootQuery.hasChild(synonymQuery));
    return this.isParentIn_SUBSELECT(synonymMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition universalMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRoot.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_universalMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRoot.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery)
  {
    return this.isParentIn(universalMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery)
  {
    return this.isParentIn_SUBSELECT(universalMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery)
  {
    universalMultiTermAttributeRootQuery.AND(universalMultiTermAttributeRootQuery.hasChild(universalQuery));
    return this.isParentIn(universalMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery)
  {
    universalMultiTermAttributeRootQuery.AND(universalMultiTermAttributeRootQuery.hasChild(universalQuery));
    return this.isParentIn_SUBSELECT(universalMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    return this.isNotParentIn(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    return this.isNotParentIn_SUBSELECT(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    geoEntityMultiTermAttributeRootQuery.AND(geoEntityMultiTermAttributeRootQuery.hasChild(geoEntityQuery));
    return this.isNotParentIn(geoEntityMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityMultiTermAttributeRootQuery geoEntityMultiTermAttributeRootQuery)
  {
    geoEntityMultiTermAttributeRootQuery.AND(geoEntityMultiTermAttributeRootQuery.hasChild(geoEntityQuery));
    return this.isNotParentIn_SUBSELECT(geoEntityMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_synonymMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRoot.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRoot.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery)
  {
    return this.isNotParentIn(synonymMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery)
  {
    return this.isNotParentIn_SUBSELECT(synonymMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery)
  {
    synonymMultiTermAttributeRootQuery.AND(synonymMultiTermAttributeRootQuery.hasChild(synonymQuery));
    return this.isNotParentIn(synonymMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymMultiTermAttributeRootQuery synonymMultiTermAttributeRootQuery)
  {
    synonymMultiTermAttributeRootQuery.AND(synonymMultiTermAttributeRootQuery.hasChild(synonymQuery));
    return this.isNotParentIn_SUBSELECT(synonymMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_universalMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRoot.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRoot.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery)
  {
    return this.isNotParentIn(universalMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery)
  {
    return this.isNotParentIn_SUBSELECT(universalMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery)
  {
    universalMultiTermAttributeRootQuery.AND(universalMultiTermAttributeRootQuery.hasChild(universalQuery));
    return this.isNotParentIn(universalMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalMultiTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalMultiTermAttributeRootQuery universalMultiTermAttributeRootQuery)
  {
    universalMultiTermAttributeRootQuery.AND(universalMultiTermAttributeRootQuery.hasChild(universalQuery));
    return this.isNotParentIn_SUBSELECT(universalMultiTermAttributeRootQuery);
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface MdAttributeMultiTermQueryMultiReferenceIF extends com.runwaysdk.system.metadata.MdAttributeMultiReferenceQuery.MdAttributeMultiReferenceQueryMultiReferenceIF
  {


    public com.runwaysdk.query.Condition containsAny(com.runwaysdk.system.metadata.MdAttributeMultiTerm ... mdAttributeMultiTerm);
    public com.runwaysdk.query.Condition notContainsAny(com.runwaysdk.system.metadata.MdAttributeMultiTerm ... mdAttributeMultiTerm);
    public com.runwaysdk.query.Condition containsAll(com.runwaysdk.system.metadata.MdAttributeMultiTerm ... mdAttributeMultiTerm);
    public com.runwaysdk.query.Condition notContainsAll(com.runwaysdk.system.metadata.MdAttributeMultiTerm ... mdAttributeMultiTerm);
    public com.runwaysdk.query.Condition containsExactly(com.runwaysdk.system.metadata.MdAttributeMultiTerm ... mdAttributeMultiTerm);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class MdAttributeMultiTermQueryMultiReference extends com.runwaysdk.system.metadata.MdAttributeMultiReferenceQuery.MdAttributeMultiReferenceQueryMultiReference
 implements MdAttributeMultiTermQueryMultiReferenceIF

  {

  public MdAttributeMultiTermQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(com.runwaysdk.system.metadata.MdAttributeMultiTerm ... mdAttributeMultiTerm)  {

      String[] itemIdArray = new String[mdAttributeMultiTerm.length]; 

      for (int i=0; i<mdAttributeMultiTerm.length; i++)
      {
        itemIdArray[i] = mdAttributeMultiTerm[i].getOid();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(com.runwaysdk.system.metadata.MdAttributeMultiTerm ... mdAttributeMultiTerm)  {

      String[] itemIdArray = new String[mdAttributeMultiTerm.length]; 

      for (int i=0; i<mdAttributeMultiTerm.length; i++)
      {
        itemIdArray[i] = mdAttributeMultiTerm[i].getOid();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(com.runwaysdk.system.metadata.MdAttributeMultiTerm ... mdAttributeMultiTerm)  {

      String[] itemIdArray = new String[mdAttributeMultiTerm.length]; 

      for (int i=0; i<mdAttributeMultiTerm.length; i++)
      {
        itemIdArray[i] = mdAttributeMultiTerm[i].getOid();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(com.runwaysdk.system.metadata.MdAttributeMultiTerm ... mdAttributeMultiTerm)  {

      String[] itemIdArray = new String[mdAttributeMultiTerm.length]; 

      for (int i=0; i<mdAttributeMultiTerm.length; i++)
      {
        itemIdArray[i] = mdAttributeMultiTerm[i].getOid();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(com.runwaysdk.system.metadata.MdAttributeMultiTerm ... mdAttributeMultiTerm)  {

      String[] itemIdArray = new String[mdAttributeMultiTerm.length]; 

      for (int i=0; i<mdAttributeMultiTerm.length; i++)
      {
        itemIdArray[i] = mdAttributeMultiTerm[i].getOid();
      }

      return this.containsExactly(itemIdArray);
  }
  }
}
