/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.dataaccess;

import com.runwaysdk.ServerExceptionMessageLocalizer;
import com.runwaysdk.business.Entity;
import com.runwaysdk.session.Session;

/**
 * Thrown when a user attempts to modify a businessDAO from a site that isn't its source.
 * 
 * @author Eric Grunzke
 */
public class SiteException extends DataAccessException
{
  /**
   * Generated by Eclipse.
   */
  private static final long serialVersionUID = 4829565952558452397L;

  /**
   * The site that owns the object responsible for the SiteException.
   */
  private String entitySite;
  
  /**
   * The current site attempting to edit an object it doesn't own.
   */
  private String currentSite;
  
  /**
   * EntityDAO from a different site.
   */
  private EntityDAO entityDAO;
  
  /**
   * Constructs a new SiteException with the specified developer message and a default
   * business message. Leaving the default business message is discouraged, as it provides
   * no context information for end users.
   * 
   * @param devMessage
   *          The non-localized developer error message. Contains specific data access
   *          layer information useful for application debugging. The developer message is
   *          saved for later retrieval by the {@link #getMessage()} method.
   * @param entityDAO EntityDAO from a different site.
   * @param currentSite site of this node
   */
  public SiteException(String devMessage, EntityDAO entityDAO, String currentSite)
  {
    super(devMessage);
    this.entityDAO = entityDAO;
    this.entitySite = entityDAO.getSiteMaster();
    this.currentSite = currentSite;
  }

  /**
   * Constructs a new SiteException with the specified detail message and cause.
   * <p>
   * Note that the detail message associated with <code>cause</code> is <i>not</i>
   * automatically incorporated in this SiteException's detail message.
   * 
   * @param devMessage
   *          The non-localized developer error message. Contains specific data access
   *          layer information useful for application debugging. The developer message is
   *          saved for later retrieval by the {@link #getMessage()} method.
   * @param cause
   *          the cause (which is saved for later retrieval by the {@link #getCause()}
   *          method). (A <tt>null</tt> value is permitted, and indicates that the cause
   *          is nonexistent or unknown.)
   * @param entityDAO EntityDAO from a different site.
   * @param currentSite site of this node
   */
  public SiteException(String devMessage, Throwable cause, EntityDAO entityDAO, String currentSite)
  {
    super(devMessage, cause);
    this.entityDAO = entityDAO;
    this.entitySite = entityDAO.getSiteMaster();
    this.currentSite = currentSite;
  }

  /**
   * Constructs a new SiteException with the specified cause and a developer message taken
   * from the cause. This constructor is useful if the SiteException is a wrapper for
   * another throwable.
   * 
   * @param cause
   *          the cause (which is saved for later retrieval by the {@link #getCause()}
   *          method). (A <tt>null</tt> value is permitted, and indicates that the cause
   *          is nonexistent or unknown.)
   * @param entityDAO EntityDAO from a different site.
   * @param currentSite site of this node
   */
  public SiteException(Throwable cause, EntityDAO entityDAO, String currentSite)
  {
    super(cause);
    this.entityDAO = entityDAO;
    this.entitySite = entityDAO.getSiteMaster();
    this.currentSite = currentSite;
  }
  
  /**
   * Uses the stored parameters and the given Locale to produce an error message
   * suitable for display to end users.
   * 
   */
  public String getLocalizedMessage()
  { 
    Entity entity = Entity.getEntity(this.entityDAO);
    
    MdClassDAOIF mdClassDAOIF = entity.getMdClass();
    
    String classDisplayLabel = mdClassDAOIF.getDisplayLabel(Session.getCurrentLocale());
    
    return ServerExceptionMessageLocalizer.siteException(this.getLocale(), classDisplayLabel+": "+entity.toString(), this.entitySite, this.currentSite);
  }
}
