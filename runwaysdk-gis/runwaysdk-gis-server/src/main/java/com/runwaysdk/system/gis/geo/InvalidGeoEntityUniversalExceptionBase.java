/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK GIS(tm).
 *
 * Runway SDK GIS(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK GIS(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK GIS(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.gis.geo;

@com.runwaysdk.business.ClassSignature(hash = 1113355236)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to InvalidGeoEntityUniversalException.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class InvalidGeoEntityUniversalExceptionBase extends com.runwaysdk.business.SmartException
{
  public final static String CLASS = "com.runwaysdk.system.gis.geo.InvalidGeoEntityUniversalException";
  public static java.lang.String CHILDUNIVERSAL = "childUniversal";
  public static java.lang.String OID = "oid";
  public static java.lang.String PARENTUNIVERSAL = "parentUniversal";
  private static final long serialVersionUID = 1113355236;
  
  public InvalidGeoEntityUniversalExceptionBase()
  {
    super();
  }
  
  public InvalidGeoEntityUniversalExceptionBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public InvalidGeoEntityUniversalExceptionBase(java.lang.String developerMessage, java.lang.Throwable cause)
  {
    super(developerMessage, cause);
  }
  
  public InvalidGeoEntityUniversalExceptionBase(java.lang.Throwable cause)
  {
    super(cause);
  }
  
  public String getChildUniversal()
  {
    return getValue(CHILDUNIVERSAL);
  }
  
  public void validateChildUniversal()
  {
    this.validateAttribute(CHILDUNIVERSAL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getChildUniversalMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.gis.geo.InvalidGeoEntityUniversalException.CLASS);
    return mdClassIF.definesAttribute(CHILDUNIVERSAL);
  }
  
  public void setChildUniversal(String value)
  {
    if(value == null)
    {
      setValue(CHILDUNIVERSAL, "");
    }
    else
    {
      setValue(CHILDUNIVERSAL, value);
    }
  }
  
  public String getOid()
  {
    return getValue(OID);
  }
  
  public void validateId()
  {
    this.validateAttribute(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.gis.geo.InvalidGeoEntityUniversalException.CLASS);
    return mdClassIF.definesAttribute(OID);
  }
  
  public String getParentUniversal()
  {
    return getValue(PARENTUNIVERSAL);
  }
  
  public void validateParentUniversal()
  {
    this.validateAttribute(PARENTUNIVERSAL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getParentUniversalMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.gis.geo.InvalidGeoEntityUniversalException.CLASS);
    return mdClassIF.definesAttribute(PARENTUNIVERSAL);
  }
  
  public void setParentUniversal(String value)
  {
    if(value == null)
    {
      setValue(PARENTUNIVERSAL, "");
    }
    else
    {
      setValue(PARENTUNIVERSAL, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{childUniversal}", this.getChildUniversal());
    message = replace(message, "{oid}", this.getOid());
    message = replace(message, "{parentUniversal}", this.getParentUniversal());
    return message;
  }
  
}
