/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * Created January 12, 2006
 */
package com.runwaysdk.dataaccess.attributes.entity;

import com.runwaysdk.dataaccess.AttributeIF;
import com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF;
import com.runwaysdk.dataaccess.MdAttributeConcreteDAOIF;
import com.runwaysdk.dataaccess.MdAttributeDAOIF;
import com.runwaysdk.dataaccess.MdClassDAOIF;
import com.runwaysdk.dataaccess.attributes.AttributeLengthCharacterException;

public class AttributeCharacter extends Attribute 
{
  /**
   * Generated by Eclipse
   */
  private static final long serialVersionUID = -939122217739547358L;

  /**
   * Inherited constructor, sets <code>name</code> and
   * <code>definingEntityType</code>.
   * 
   * @param name
   *          The name of this character attribute.
   * @param mdAttributeKey
   *          key of the defining attribute metadata
   * @param definingEntityType
   *          The class that defines this attribute.
   */
  protected AttributeCharacter(String name, String mdAttributeKey, String definingEntityType)
  {
    super(name, mdAttributeKey, definingEntityType);
  }

  /**
   * Inherited constrcutor, sets <code>name</code>,
   * <code>definingEntityType</code>, and <code>value</code>.
   * 
   * @param name
   *          The name of this character attribute.
   * @param mdAttributeKey
   *          key of the defining attribute metadata
   * @param definingEntityType
   *          The type that defines this attribute.
   * @param value
   *          The value of this character. "<code>true</code>" or
   *          "<code>false</code>"
   */
  protected AttributeCharacter(String name, String mdAttributeKey, String definingEntityType, String value)
  {
    super(name, mdAttributeKey, definingEntityType, value);
  }

  /**
   * Test if the input String is valid.
   * 
   * <br/>
   * <b>Precondition: </b> valueToValidate != null <br/>
   * <b>Postcondition: </b> true
   * 
   * @param valueToValidate
   *          the primitive attribute value to be validated
   * @param mdAttribute
   *          the defining Metadata object of the class that contains this
   *          Attribute
   * @return boolean value representing the validity of the input
   */
  protected void validate(String valueToValidate, MdAttributeDAOIF mdAttribute)
  {
    super.validate(valueToValidate, mdAttribute);

    validateLength(this, valueToValidate, (MdAttributeCharacterDAOIF) mdAttribute);
  }

  public static void validateLength(AttributeIF attributeIF, String valueToValidate, MdAttributeCharacterDAOIF mdAttributeCharacter)
  {
    MdClassDAOIF mdClass = mdAttributeCharacter.definedByClass();

    if (! ( mdClass instanceof MdAttributeConcreteDAOIF ))
    {
      int charLength = valueToValidate.length();
      int maxCharLength = 0;

      maxCharLength = Integer.parseInt(mdAttributeCharacter.getSize());
      if (charLength > maxCharLength)
      {
        String error = "Attribute [" + attributeIF.getName() + "] on type [" + attributeIF.getDefiningClassType() + "] may not exceed " + maxCharLength + " characters in length.";
        throw new AttributeLengthCharacterException(error, attributeIF, maxCharLength);
      }
    }
  }

  /**
   * Returns the BusinessDAO that defines the this attribute.
   * 
   * <br>
   * <b>Precondition: </b> true <br>
   * <b>Postcondition: </b> true
   * 
   * @return MdAttributeCharacterIF that defines the this attribute
   */

  public MdAttributeCharacterDAOIF getMdAttribute()
  {
    return (MdAttributeCharacterDAOIF) super.getMdAttribute();
  }

  /**
   * Returns a deep clone of this attribute.
   * 
   * <br/>
   * <b>Precondition: </b> true <br/>
   * <b>Postcondition: </b> true
   * 
   * @return a deep clone of this Attribute
   */
  public AttributeCharacter attributeClone()
  {
    return new AttributeCharacter(this.getName(), this.mdAttributeKey, this.getDefiningClassType(), new String(this.getRawValue()));
  }
}
