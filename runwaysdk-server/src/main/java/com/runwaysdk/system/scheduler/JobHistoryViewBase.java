/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.scheduler;

@com.runwaysdk.business.ClassSignature(hash = -1518825943)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to JobHistoryView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class JobHistoryViewBase extends com.runwaysdk.business.View
{
  public final static String CLASS = "com.runwaysdk.system.scheduler.JobHistoryView";
  public static java.lang.String CREATEDATE = "createDate";
  public static java.lang.String CRONEXPRESSION = "cronExpression";
  public static java.lang.String DESCRIPTION = "description";
  private com.runwaysdk.business.Struct description = null;
  
  public static java.lang.String DISPLAYLABEL = "displayLabel";
  private com.runwaysdk.business.Struct displayLabel = null;
  
  public static java.lang.String ENDTIME = "endTime";
  public static java.lang.String HISTORYCOMMENT = "historyComment";
  private com.runwaysdk.business.Struct historyComment = null;
  
  public static java.lang.String HISTORYINFORMATION = "historyInformation";
  private com.runwaysdk.business.Struct historyInformation = null;
  
  public static java.lang.String JOBOPERATION = "jobOperation";
  public static java.lang.String LASTRUN = "lastRun";
  public static java.lang.String OID = "oid";
  public static java.lang.String STARTTIME = "startTime";
  public static java.lang.String STATUS = "status";
  public static java.lang.String STATUSLABEL = "statusLabel";
  public static java.lang.String WORKPROGRESS = "workProgress";
  public static java.lang.String WORKTOTAL = "workTotal";
  private static final long serialVersionUID = -1518825943;
  
  public JobHistoryViewBase()
  {
    super();
    description = super.getStruct("description");
    displayLabel = super.getStruct("displayLabel");
    historyComment = super.getStruct("historyComment");
    historyInformation = super.getStruct("historyInformation");
  }
  
  public java.util.Date getCreateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(CREATEDATE));
  }
  
  public void validateCreateDate()
  {
    this.validateAttribute(CREATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getCreateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobHistoryView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(CREATEDATE);
  }
  
  public void setCreateDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(CREATEDATE, "");
    }
    else
    {
      setValue(CREATEDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATETIME_FORMAT).format(value));
    }
  }
  
  public String getCronExpression()
  {
    return getValue(CRONEXPRESSION);
  }
  
  public void validateCronExpression()
  {
    this.validateAttribute(CRONEXPRESSION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getCronExpressionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobHistoryView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(CRONEXPRESSION);
  }
  
  public void setCronExpression(String value)
  {
    if(value == null)
    {
      setValue(CRONEXPRESSION, "");
    }
    else
    {
      setValue(CRONEXPRESSION, value);
    }
  }
  
  public com.runwaysdk.system.scheduler.ExecutableJobDescription getDescription()
  {
    return (com.runwaysdk.system.scheduler.ExecutableJobDescription) description;
  }
  
  public void validateDescription()
  {
    this.validateAttribute(DESCRIPTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getDescriptionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobHistoryView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(DESCRIPTION);
  }
  
  public com.runwaysdk.system.scheduler.AbstractJobDisplayLabel getDisplayLabel()
  {
    return (com.runwaysdk.system.scheduler.AbstractJobDisplayLabel) displayLabel;
  }
  
  public void validateDisplayLabel()
  {
    this.validateAttribute(DISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobHistoryView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(DISPLAYLABEL);
  }
  
  public java.util.Date getEndTime()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(ENDTIME));
  }
  
  public void validateEndTime()
  {
    this.validateAttribute(ENDTIME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getEndTimeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobHistoryView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(ENDTIME);
  }
  
  public void setEndTime(java.util.Date value)
  {
    if(value == null)
    {
      setValue(ENDTIME, "");
    }
    else
    {
      setValue(ENDTIME, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATETIME_FORMAT).format(value));
    }
  }
  
  public com.runwaysdk.system.scheduler.JobHistoryHistoryComment getHistoryComment()
  {
    return (com.runwaysdk.system.scheduler.JobHistoryHistoryComment) historyComment;
  }
  
  public void validateHistoryComment()
  {
    this.validateAttribute(HISTORYCOMMENT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getHistoryCommentMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobHistoryView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(HISTORYCOMMENT);
  }
  
  public com.runwaysdk.system.scheduler.JobHistoryHistoryInformation getHistoryInformation()
  {
    return (com.runwaysdk.system.scheduler.JobHistoryHistoryInformation) historyInformation;
  }
  
  public void validateHistoryInformation()
  {
    this.validateAttribute(HISTORYINFORMATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getHistoryInformationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobHistoryView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(HISTORYINFORMATION);
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<com.runwaysdk.system.scheduler.AllJobOperation> getJobOperation()
  {
    return (java.util.List<com.runwaysdk.system.scheduler.AllJobOperation>) getEnumValues(JOBOPERATION);
  }
  
  public void addJobOperation(com.runwaysdk.system.scheduler.AllJobOperation value)
  {
    if(value != null)
    {
      addEnumItem(JOBOPERATION, value.getOid());
    }
  }
  
  public void removeJobOperation(com.runwaysdk.system.scheduler.AllJobOperation value)
  {
    if(value != null)
    {
      removeEnumItem(JOBOPERATION, value.getOid());
    }
  }
  
  public void clearJobOperation()
  {
    clearEnum(JOBOPERATION);
  }
  
  public void validateJobOperation()
  {
    this.validateAttribute(JOBOPERATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getJobOperationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobHistoryView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(JOBOPERATION);
  }
  
  public java.util.Date getLastRun()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(LASTRUN));
  }
  
  public void validateLastRun()
  {
    this.validateAttribute(LASTRUN);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getLastRunMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobHistoryView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(LASTRUN);
  }
  
  public void setLastRun(java.util.Date value)
  {
    if(value == null)
    {
      setValue(LASTRUN, "");
    }
    else
    {
      setValue(LASTRUN, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATETIME_FORMAT).format(value));
    }
  }
  
  public String getOid()
  {
    return getValue(OID);
  }
  
  public void validateOid()
  {
    this.validateAttribute(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobHistoryView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public java.util.Date getStartTime()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(STARTTIME));
  }
  
  public void validateStartTime()
  {
    this.validateAttribute(STARTTIME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getStartTimeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobHistoryView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(STARTTIME);
  }
  
  public void setStartTime(java.util.Date value)
  {
    if(value == null)
    {
      setValue(STARTTIME, "");
    }
    else
    {
      setValue(STARTTIME, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATETIME_FORMAT).format(value));
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<com.runwaysdk.system.scheduler.AllJobStatus> getStatus()
  {
    return (java.util.List<com.runwaysdk.system.scheduler.AllJobStatus>) getEnumValues(STATUS);
  }
  
  public void addStatus(com.runwaysdk.system.scheduler.AllJobStatus value)
  {
    if(value != null)
    {
      addEnumItem(STATUS, value.getOid());
    }
  }
  
  public void removeStatus(com.runwaysdk.system.scheduler.AllJobStatus value)
  {
    if(value != null)
    {
      removeEnumItem(STATUS, value.getOid());
    }
  }
  
  public void clearStatus()
  {
    clearEnum(STATUS);
  }
  
  public void validateStatus()
  {
    this.validateAttribute(STATUS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getStatusMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobHistoryView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(STATUS);
  }
  
  public String getStatusLabel()
  {
    return getValue(STATUSLABEL);
  }
  
  public void validateStatusLabel()
  {
    this.validateAttribute(STATUSLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getStatusLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobHistoryView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(STATUSLABEL);
  }
  
  public void setStatusLabel(String value)
  {
    if(value == null)
    {
      setValue(STATUSLABEL, "");
    }
    else
    {
      setValue(STATUSLABEL, value);
    }
  }
  
  public Long getWorkProgress()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(WORKPROGRESS));
  }
  
  public void validateWorkProgress()
  {
    this.validateAttribute(WORKPROGRESS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getWorkProgressMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobHistoryView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(WORKPROGRESS);
  }
  
  public void setWorkProgress(Long value)
  {
    if(value == null)
    {
      setValue(WORKPROGRESS, "");
    }
    else
    {
      setValue(WORKPROGRESS, java.lang.Long.toString(value));
    }
  }
  
  public Long getWorkTotal()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(WORKTOTAL));
  }
  
  public void validateWorkTotal()
  {
    this.validateAttribute(WORKTOTAL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getWorkTotalMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.JobHistoryView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(WORKTOTAL);
  }
  
  public void setWorkTotal(Long value)
  {
    if(value == null)
    {
      setValue(WORKTOTAL, "");
    }
    else
    {
      setValue(WORKTOTAL, java.lang.Long.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static JobHistoryView get(String oid)
  {
    return (JobHistoryView) com.runwaysdk.business.View.get(oid);
  }
  
  public static com.runwaysdk.system.scheduler.JobHistoryViewQuery getJobHistories(java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.system.scheduler.JobHistoryView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
