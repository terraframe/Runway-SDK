package test.generated;
public class Collection extends CollectionBase
{
  public Collection()
  {
    super();
  }
  public static Collection get(String id)
  {
    return (Collection) com.runwaysdk.business.Business.get(id);
  }
  public void testMethod(test.generated.Collection collection)
  {
     if(collection instanceof test.generated.Bag)
     {
       this.setALong(collection.getALong() + 10L);
     }
     else
     {
       this.setALong(collection.getALong());
     }
     this.apply();
  }
  public test.generated.Collection modifyNoPersist(test.generated.Collection collection)
  {
    this.setALong(77L);
    collection.setALong(77L);
    return collection;
  }
  @com.runwaysdk.business.rbac.Authenticate
  public test.generated.Collection sortNumbers(Long[] numbers, Boolean ascending)
  {
     test.generated.Collection collection = new test.generated.Collection();
     if(numbers == null)
     {
       collection.setALong(13L);
     }
     else if(numbers.length > 0)
     {
       collection.setALong(numbers[0]);
     }
     collection.setABoolean(ascending);
     return collection;
  }
  public test.generated.Collection[] sortCollections(test.generated.Collection[] collections, String collectionName)
  {
     test.generated.Collection[] out = new test.generated.Collection[collections.length];
     for(int i = 0; i < collections.length; i++)
     {
       out[i] = new Collection();
       out[i].setACharacter(collectionName);
       out[i].setALong(collections[i].getALong());
     }
     return out;
  }
  public java.lang.String[][] testMultiArray(test.generated.Collection[][][][] collection4)
  {
    String[][] output = new String[2][];
    output[0] = new String[]{"Yo my nizzle", "Leroy Im witha or against ya."};
    output[1] = new String[]{collection4.getClass().getName(), collection4.getClass().getSimpleName()};
    return output;
  }
  public void poopNothing()
  {
  }
  public test.generated.Reference[] getReferences(test.generated.Reference reference)
  {
    test.generated.Reference[] array = new test.generated.Reference[5];
    for(int i = 0; i < 5; i++)
      array[i] = reference;
    return array;
  }
  public test.generated.AllStates[] getStates(test.generated.AllStates state)
  {
    test.generated.AllStates[] array = new test.generated.AllStates[5];
    for(int i = 0; i < 5; i++)
      array[i] = state;
    return array;
  }
  @com.runwaysdk.business.rbac.Authenticate
  public static java.lang.Integer[] sortIntegers(java.lang.Integer[] integers)
  {
    if(integers == null) return null;
    java.lang.Integer[] array = new Integer[integers.length];
    java.util.List<Integer> list = java.util.Arrays.asList(integers);
    java.util.Collections.sort(list);
    return list.toArray(array);
  }
  public static java.util.Date[] getDates(java.util.Date date)
  {
    java.util.Date[] array = new java.util.Date[4];
    array[0] = new java.util.Date(date.getTime() + 0L);
    array[1] = new java.util.Date(date.getTime() + 10L);
    array[2] = new java.util.Date(date.getTime() + 20L);
    array[3] = new java.util.Date(date.getTime() + 30L);
    return array;
  }
  public test.generated.Util getUtil(test.generated.Util util)
  {
    return util;
  }
  public test.generated.TestView getView(test.generated.TestView view)
  {
    return view;
  }
  public test.generated.Util[] utilArray(test.generated.Util[] utilArray)
  {
     test.generated.Util[] out = new test.generated.Util[utilArray.length];
     for(int i = 0; i< utilArray.length; i++)
     {
       out[i] = new test.generated.Util();
       out[i].setACharacter(utilArray[i].getACharacter());
     }
     return out;
  }
  public test.generated.TestView[] viewArray(test.generated.TestView[] viewArray)
  {
     test.generated.TestView[] out = new test.generated.TestView[viewArray.length];
     for(int i = 0; i< viewArray.length; i++)
     {
       out[i] = new test.generated.TestView();
       out[i].setACharacter(viewArray[i].getACharacter());
     }
     return out;
  }
  public static test.generated.CollectionQuery getCollectionQuery()
  {
     com.runwaysdk.query.QueryFactory f = new com.runwaysdk.query.QueryFactory();
     test.generated.CollectionQuery query = new test.generated.CollectionQuery(f);
     
     return query;
  }
  public static test.generated.TestViewQuery getViewQuery()
  {
     com.runwaysdk.query.QueryFactory f = new com.runwaysdk.query.QueryFactory();
     test.generated.TestViewQuery query = new test.generated.TestViewQuery(f);
     
     return query;
  }
  public static com.runwaysdk.query.GeneratedComponentQuery getBusinessQuery()
  {
     com.runwaysdk.query.QueryFactory f = new com.runwaysdk.query.QueryFactory();
     test.generated.CollectionQuery query = new test.generated.CollectionQuery(f);
     
     return query;
  }
  public static test.generated.CollectionQuery getCollectionQueryRestrictRows()
  {
     com.runwaysdk.query.QueryFactory f = new com.runwaysdk.query.QueryFactory();
     test.generated.CollectionQuery query = new test.generated.CollectionQuery(f);
     
     query.restrictRows(2, 1);
     return query;
  }
  public static test.generated.TestViewQuery getViewQueryRestrictRows()
  {
     com.runwaysdk.query.QueryFactory f = new com.runwaysdk.query.QueryFactory();
     test.generated.TestViewQuery query = new test.generated.TestViewQuery(f);
     
     query.restrictRows(2, 1);
     return query;
  }
  public test.generated.AllStates[] returnStates(test.generated.AllStates[] states)
  {
    return states;
  }
  public static java.lang.Integer getCollectionObjectCount()
  {
    com.runwaysdk.query.QueryFactory queryFactory = new com.runwaysdk.query.QueryFactory();
    com.runwaysdk.business.BusinessQuery bq = queryFactory.businessQuery("test.generated.Collection");

    long recordCount = bq.getCount();
    return (int)recordCount;
  }
  public static java.lang.Byte[] getExcelFile()
  {
    com.runwaysdk.query.QueryFactory queryFactory = new com.runwaysdk.query.QueryFactory();
    com.runwaysdk.business.BusinessQuery bq = queryFactory.businessQuery("test.generated.Collection");

    com.runwaysdk.query.ValueQuery valueQuery = new com.runwaysdk.query.ValueQuery(queryFactory);

    valueQuery.SELECT(bq.aCharacter("aCharacter"));

    com.runwaysdk.query.ValueQueryExcelExporter excelExporter = new com.runwaysdk.query.ValueQueryExcelExporter(valueQuery, "Test Sheet");
    return excelExporter.export();

  }
  public static java.io.InputStream getFileStream()
  {
    com.runwaysdk.query.QueryFactory queryFactory = new com.runwaysdk.query.QueryFactory();
    com.runwaysdk.business.BusinessQuery bq = queryFactory.businessQuery("test.generated.Collection");

    com.runwaysdk.query.ValueQuery valueQuery = new com.runwaysdk.query.ValueQuery(queryFactory);

    valueQuery.SELECT(bq.aCharacter("aCharacter"));

    com.runwaysdk.query.ValueQueryExcelExporter excelExporter = new com.runwaysdk.query.ValueQueryExcelExporter(valueQuery, "Test Sheet");

    try
    {
      return new java.io.ByteArrayInputStream ( com.runwaysdk.util.FileIO.convertFromBytes(excelExporter.export()));
    }
    catch(java.lang.Exception e)
    { 
      throw new java.lang.RuntimeException(e);
    }

  }
  @com.runwaysdk.business.rbac.Authenticate
  public static test.generated.Collection methodActorRead()
  {
     test.generated.Collection collection = new test.generated.Collection();
     collection.setALong2(13L);
     collection.apply();
     return collection;
  }
}
