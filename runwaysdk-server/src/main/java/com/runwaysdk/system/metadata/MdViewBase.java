/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = -938481109)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MdView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MdViewBase extends com.runwaysdk.system.metadata.MdSession
{
  public final static String CLASS = "com.runwaysdk.system.metadata.MdView";
  public static java.lang.String QUERYBASECLASS = "queryBaseClass";
  public static java.lang.String QUERYBASESOURCE = "queryBaseSource";
  public static java.lang.String QUERYDTOCLASS = "queryDTOclass";
  public static java.lang.String QUERYDTOSOURCE = "queryDTOsource";
  public static java.lang.String QUERYSTUBCLASS = "queryStubClass";
  public static java.lang.String QUERYSTUBSOURCE = "queryStubSource";
  public static java.lang.String SUPERMDVIEW = "superMdView";
  private static final long serialVersionUID = -938481109;
  
  public MdViewBase()
  {
    super();
  }
  
  public byte[] getQueryBaseClass()
  {
    return getBlob(QUERYBASECLASS);
  }
  
  public void validateQueryBaseClass()
  {
    this.validateAttribute(QUERYBASECLASS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getQueryBaseClassMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdView.CLASS);
    return mdClassIF.definesAttribute(QUERYBASECLASS);
  }
  
  public String getQueryBaseSource()
  {
    return getValue(QUERYBASESOURCE);
  }
  
  public void validateQueryBaseSource()
  {
    this.validateAttribute(QUERYBASESOURCE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getQueryBaseSourceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdView.CLASS);
    return mdClassIF.definesAttribute(QUERYBASESOURCE);
  }
  
  public byte[] getQueryDTOclass()
  {
    return getBlob(QUERYDTOCLASS);
  }
  
  public void validateQueryDTOclass()
  {
    this.validateAttribute(QUERYDTOCLASS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getQueryDTOclassMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdView.CLASS);
    return mdClassIF.definesAttribute(QUERYDTOCLASS);
  }
  
  public String getQueryDTOsource()
  {
    return getValue(QUERYDTOSOURCE);
  }
  
  public void validateQueryDTOsource()
  {
    this.validateAttribute(QUERYDTOSOURCE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getQueryDTOsourceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdView.CLASS);
    return mdClassIF.definesAttribute(QUERYDTOSOURCE);
  }
  
  public byte[] getQueryStubClass()
  {
    return getBlob(QUERYSTUBCLASS);
  }
  
  public void validateQueryStubClass()
  {
    this.validateAttribute(QUERYSTUBCLASS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getQueryStubClassMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdView.CLASS);
    return mdClassIF.definesAttribute(QUERYSTUBCLASS);
  }
  
  public String getQueryStubSource()
  {
    return getValue(QUERYSTUBSOURCE);
  }
  
  public void validateQueryStubSource()
  {
    this.validateAttribute(QUERYSTUBSOURCE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getQueryStubSourceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdView.CLASS);
    return mdClassIF.definesAttribute(QUERYSTUBSOURCE);
  }
  
  public void setQueryStubSource(String value)
  {
    if(value == null)
    {
      setValue(QUERYSTUBSOURCE, "");
    }
    else
    {
      setValue(QUERYSTUBSOURCE, value);
    }
  }
  
  public com.runwaysdk.system.metadata.MdView getSuperMdView()
  {
    if (getValue(SUPERMDVIEW).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdView.get(getValue(SUPERMDVIEW));
    }
  }
  
  public String getSuperMdViewId()
  {
    return getValue(SUPERMDVIEW);
  }
  
  public void validateSuperMdView()
  {
    this.validateAttribute(SUPERMDVIEW);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getSuperMdViewMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdView.CLASS);
    return mdClassIF.definesAttribute(SUPERMDVIEW);
  }
  
  public void setSuperMdView(com.runwaysdk.system.metadata.MdView value)
  {
    if(value == null)
    {
      setValue(SUPERMDVIEW, "");
    }
    else
    {
      setValue(SUPERMDVIEW, value.getOid());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.system.metadata.ViewInheritance addChildViews(com.runwaysdk.system.metadata.MdView mdView)
  {
    return (com.runwaysdk.system.metadata.ViewInheritance) addChild(mdView, com.runwaysdk.system.metadata.ViewInheritance.CLASS);
  }
  
  public void removeChildViews(com.runwaysdk.system.metadata.MdView mdView)
  {
    removeAllChildren(mdView, com.runwaysdk.system.metadata.ViewInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdView> getAllChildViews()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdView>) getChildren(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.ViewInheritance> getAllChildViewsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.ViewInheritance>) getChildRelationships(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.ViewInheritance getChildViewsRel(com.runwaysdk.system.metadata.MdView mdView)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.ViewInheritance> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.ViewInheritance>) getRelationshipsWithChild(mdView, com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public com.runwaysdk.system.metadata.ClassAttributeVirtual addVirtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtual mdAttributeVirtual)
  {
    return (com.runwaysdk.system.metadata.ClassAttributeVirtual) addChild(mdAttributeVirtual, com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);
  }
  
  public void removeVirtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtual mdAttributeVirtual)
  {
    removeAllChildren(mdAttributeVirtual, com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdAttributeVirtual> getAllVirtualAttribute()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdAttributeVirtual>) getChildren(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.ClassAttributeVirtual> getAllVirtualAttributeRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.ClassAttributeVirtual>) getChildRelationships(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.ClassAttributeVirtual getVirtualAttributeRel(com.runwaysdk.system.metadata.MdAttributeVirtual mdAttributeVirtual)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.ClassAttributeVirtual> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.ClassAttributeVirtual>) getRelationshipsWithChild(mdAttributeVirtual, com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public com.runwaysdk.system.metadata.ViewInheritance addParentView(com.runwaysdk.system.metadata.MdView mdView)
  {
    return (com.runwaysdk.system.metadata.ViewInheritance) addParent(mdView, com.runwaysdk.system.metadata.ViewInheritance.CLASS);
  }
  
  public void removeParentView(com.runwaysdk.system.metadata.MdView mdView)
  {
    removeAllParents(mdView, com.runwaysdk.system.metadata.ViewInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdView> getAllParentView()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdView>) getParents(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.ViewInheritance> getAllParentViewRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.ViewInheritance>) getParentRelationships(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.ViewInheritance getParentViewRel(com.runwaysdk.system.metadata.MdView mdView)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.ViewInheritance> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.ViewInheritance>) getRelationshipsWithParent(mdView, com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static MdView get(String oid)
  {
    return (MdView) com.runwaysdk.business.Business.get(oid);
  }
  
  public static MdView getByKey(String key)
  {
    return (MdView) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static MdView lock(java.lang.String oid)
  {
    MdView _instance = MdView.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static MdView unlock(java.lang.String oid)
  {
    MdView _instance = MdView.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
