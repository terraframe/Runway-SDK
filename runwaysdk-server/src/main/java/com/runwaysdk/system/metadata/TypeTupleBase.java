/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = 1008096034)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to TypeTuple.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class TypeTupleBase extends com.runwaysdk.system.metadata.Metadata
{
  public final static String CLASS = "com.runwaysdk.system.metadata.TypeTuple";
  public static java.lang.String DISPLAYLABEL = "displayLabel";
  private com.runwaysdk.business.Struct displayLabel = null;
  
  public static java.lang.String METADATA = "metadata";
  public static java.lang.String STATEMASTER = "stateMaster";
  private static final long serialVersionUID = 1008096034;
  
  public TypeTupleBase()
  {
    super();
    displayLabel = super.getStruct("displayLabel");
  }
  
  public com.runwaysdk.system.metadata.MetadataDisplayLabel getDisplayLabel()
  {
    return (com.runwaysdk.system.metadata.MetadataDisplayLabel) displayLabel;
  }
  
  public void validateDisplayLabel()
  {
    this.validateAttribute(DISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.TypeTuple.CLASS);
    return mdClassIF.definesAttribute(DISPLAYLABEL);
  }
  
  public com.runwaysdk.system.metadata.Metadata getMetadata()
  {
    if (getValue(METADATA).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.Metadata.get(getValue(METADATA));
    }
  }
  
  public String getMetadataId()
  {
    return getValue(METADATA);
  }
  
  public void validateMetadata()
  {
    this.validateAttribute(METADATA);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getMetadataMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.TypeTuple.CLASS);
    return mdClassIF.definesAttribute(METADATA);
  }
  
  public void setMetadata(com.runwaysdk.system.metadata.Metadata value)
  {
    if(value == null)
    {
      setValue(METADATA, "");
    }
    else
    {
      setValue(METADATA, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static TypeTuple get(String id)
  {
    return (TypeTuple) com.runwaysdk.business.Business.get(id);
  }
  
  public static TypeTuple getByKey(String key)
  {
    return (TypeTuple) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static TypeTuple lock(java.lang.String id)
  {
    TypeTuple _instance = TypeTuple.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static TypeTuple unlock(java.lang.String id)
  {
    TypeTuple _instance = TypeTuple.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return this.getClassDisplayLabel();
    }
  }
}
