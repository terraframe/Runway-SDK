/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.jstest;

@com.runwaysdk.business.ClassSignature(hash = -2079002763)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to TestUtil.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class TestUtilBase extends com.runwaysdk.business.Util implements com.runwaysdk.generation.loader.
{
  public final static String CLASS = "com.runwaysdk.jstest.TestUtil";
  public static java.lang.String ID = "id";
  public static java.lang.String UTILCHARACTER = "utilCharacter";
  public static java.lang.String UTILPHONE = "utilPhone";
  private com.runwaysdk.business.Struct utilPhone = null;
  
  public static java.lang.String UTILREFERENCEOBJECT = "utilReferenceObject";
  public static java.lang.String UTILSINGLESTATE = "utilSingleState";
  private static final long serialVersionUID = -2079002763;
  
  public TestUtilBase()
  {
    super();
    utilPhone = super.getStruct("utilPhone");
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestUtil.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getUtilCharacter()
  {
    return getValue(UTILCHARACTER);
  }
  
  public void validateUtilCharacter()
  {
    this.validateAttribute(UTILCHARACTER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getUtilCharacterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestUtil.CLASS);
    return mdClassIF.definesAttribute(UTILCHARACTER);
  }
  
  public void setUtilCharacter(String value)
  {
    if(value == null)
    {
      setValue(UTILCHARACTER, "");
    }
    else
    {
      setValue(UTILCHARACTER, value);
    }
  }
  
  public com.runwaysdk.system.PhoneNumber getUtilPhone()
  {
    return (com.runwaysdk.system.PhoneNumber) utilPhone;
  }
  
  public void validateUtilPhone()
  {
    this.validateAttribute(UTILPHONE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getUtilPhoneMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestUtil.CLASS);
    return mdClassIF.definesAttribute(UTILPHONE);
  }
  
  public com.runwaysdk.jstest.RefClass getUtilReferenceObject()
  {
    if (getValue(UTILREFERENCEOBJECT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.jstest.RefClass.get(getValue(UTILREFERENCEOBJECT));
    }
  }
  
  public String getUtilReferenceObjectId()
  {
    return getValue(UTILREFERENCEOBJECT);
  }
  
  public void validateUtilReferenceObject()
  {
    this.validateAttribute(UTILREFERENCEOBJECT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getUtilReferenceObjectMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestUtil.CLASS);
    return mdClassIF.definesAttribute(UTILREFERENCEOBJECT);
  }
  
  public void setUtilReferenceObject(com.runwaysdk.jstest.RefClass value)
  {
    if(value == null)
    {
      setValue(UTILREFERENCEOBJECT, "");
    }
    else
    {
      setValue(UTILREFERENCEOBJECT, value.getId());
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<com.runwaysdk.jstest.States> getUtilSingleState()
  {
    return (java.util.List<com.runwaysdk.jstest.States>) getEnumValues(UTILSINGLESTATE);
  }
  
  public void addUtilSingleState(com.runwaysdk.jstest.States value)
  {
    if(value != null)
    {
      addEnumItem(UTILSINGLESTATE, value.getId());
    }
  }
  
  public void removeUtilSingleState(com.runwaysdk.jstest.States value)
  {
    if(value != null)
    {
      removeEnumItem(UTILSINGLESTATE, value.getId());
    }
  }
  
  public void clearUtilSingleState()
  {
    clearEnum(UTILSINGLESTATE);
  }
  
  public void validateUtilSingleState()
  {
    this.validateAttribute(UTILSINGLESTATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getUtilSingleStateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestUtil.CLASS);
    return mdClassIF.definesAttribute(UTILSINGLESTATE);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static TestUtil get(String id)
  {
    return (TestUtil) com.runwaysdk.business.Util.get(id);
  }
  
  public static java.lang.Integer doubleAnInt(java.lang.Integer num)
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.jstest.TestUtil.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public com.runwaysdk.jstest.TestUtil returnUtil(com.runwaysdk.jstest.TestUtil input)
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.jstest.TestUtil.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final com.runwaysdk.jstest.TestUtil returnUtil(java.lang.String id, com.runwaysdk.jstest.TestUtil input)
  {
    TestUtil _instance = TestUtil.get(id);
    return _instance.returnUtil(input);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
