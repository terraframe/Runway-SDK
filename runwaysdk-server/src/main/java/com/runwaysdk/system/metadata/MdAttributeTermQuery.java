package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = -1984672341)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MdAttributeTerm.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class MdAttributeTermQuery extends com.runwaysdk.system.metadata.MdAttributeReferenceQuery

{

  public MdAttributeTermQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
    super(componentQueryFactory);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public MdAttributeTermQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
    super(valueQuery);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return com.runwaysdk.system.metadata.MdAttributeTerm.CLASS;
  }
  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends MdAttributeTerm> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<MdAttributeTerm>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isParentIn(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    geoEntityTermAttributeRootQuery.AND(geoEntityTermAttributeRootQuery.hasChild(geoEntityQuery));
    return this.getBusinessQuery().isParentIn(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    geoEntityTermAttributeRootQuery.AND(geoEntityTermAttributeRootQuery.hasChild(geoEntityQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(geoEntityTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotParentIn(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    geoEntityTermAttributeRootQuery.AND(geoEntityTermAttributeRootQuery.hasChild(geoEntityQuery));
    return this.getBusinessQuery().isNotParentIn(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    geoEntityTermAttributeRootQuery.AND(geoEntityTermAttributeRootQuery.hasChild(geoEntityQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(geoEntityTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition synonymTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_synonymTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isParentIn(synonymTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(synonymTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery)
  {
    synonymTermAttributeRootQuery.AND(synonymTermAttributeRootQuery.hasChild(synonymQuery));
    return this.getBusinessQuery().isParentIn(synonymTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery)
  {
    synonymTermAttributeRootQuery.AND(synonymTermAttributeRootQuery.hasChild(synonymQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(synonymTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_synonymTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotParentIn(synonymTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(synonymTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery)
  {
    synonymTermAttributeRootQuery.AND(synonymTermAttributeRootQuery.hasChild(synonymQuery));
    return this.getBusinessQuery().isNotParentIn(synonymTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery)
  {
    synonymTermAttributeRootQuery.AND(synonymTermAttributeRootQuery.hasChild(synonymQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(synonymTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition universalTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_universalTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isParentIn(universalTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(universalTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery)
  {
    universalTermAttributeRootQuery.AND(universalTermAttributeRootQuery.hasChild(universalQuery));
    return this.getBusinessQuery().isParentIn(universalTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery)
  {
    universalTermAttributeRootQuery.AND(universalTermAttributeRootQuery.hasChild(universalQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(universalTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_universalTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotParentIn(universalTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(universalTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery)
  {
    universalTermAttributeRootQuery.AND(universalTermAttributeRootQuery.hasChild(universalQuery));
    return this.getBusinessQuery().isNotParentIn(universalTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery)
  {
    universalTermAttributeRootQuery.AND(universalTermAttributeRootQuery.hasChild(universalQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(universalTermAttributeRootQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface MdAttributeTermQueryReferenceIF extends com.runwaysdk.system.metadata.MdAttributeReferenceQuery.MdAttributeReferenceQueryReferenceIF
  {


    public com.runwaysdk.query.BasicCondition EQ(com.runwaysdk.system.metadata.MdAttributeTerm mdAttributeTerm);

    public com.runwaysdk.query.BasicCondition NE(com.runwaysdk.system.metadata.MdAttributeTerm mdAttributeTerm);


  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots();

  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery);

  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots();

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery);

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery);


  public com.runwaysdk.query.Condition synonymTermAttributeRoots();

  public com.runwaysdk.query.Condition synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery);

  public com.runwaysdk.query.Condition synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_synonymTermAttributeRoots();

  public com.runwaysdk.query.Condition SUBSELECT_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery);

  public com.runwaysdk.query.Condition SUBSELECT_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery);


  public com.runwaysdk.query.Condition universalTermAttributeRoots();

  public com.runwaysdk.query.Condition universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_universalTermAttributeRoots();

  public com.runwaysdk.query.Condition SUBSELECT_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition SUBSELECT_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery);


  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots();

  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery);

  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery);


  public com.runwaysdk.query.Condition NOT_IN_synonymTermAttributeRoots();

  public com.runwaysdk.query.Condition NOT_IN_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery);

  public com.runwaysdk.query.Condition NOT_IN_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymTermAttributeRoots();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery);


  public com.runwaysdk.query.Condition NOT_IN_universalTermAttributeRoots();

  public com.runwaysdk.query.Condition NOT_IN_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition NOT_IN_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalTermAttributeRoots();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class MdAttributeTermQueryReference extends com.runwaysdk.system.metadata.MdAttributeReferenceQuery.MdAttributeReferenceQueryReference
 implements MdAttributeTermQueryReferenceIF

  {

  public MdAttributeTermQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(com.runwaysdk.system.metadata.MdAttributeTerm mdAttributeTerm)
    {
      if(mdAttributeTerm == null) return this.EQ((java.lang.String)null);
      return this.EQ(mdAttributeTerm.getOid());
    }

    public com.runwaysdk.query.BasicCondition NE(com.runwaysdk.system.metadata.MdAttributeTerm mdAttributeTerm)
    {
      if(mdAttributeTerm == null) return this.NE((java.lang.String)null);
      return this.NE(mdAttributeTerm.getOid());
    }


  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    return this.isParentIn(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    return this.isParentIn_SUBSELECT(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    geoEntityTermAttributeRootQuery.AND(geoEntityTermAttributeRootQuery.hasChild(geoEntityQuery));
    return this.isParentIn(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    geoEntityTermAttributeRootQuery.AND(geoEntityTermAttributeRootQuery.hasChild(geoEntityQuery));
    return this.isParentIn_SUBSELECT(geoEntityTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition synonymTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_synonymTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery)
  {
    return this.isParentIn(synonymTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery)
  {
    return this.isParentIn_SUBSELECT(synonymTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery)
  {
    synonymTermAttributeRootQuery.AND(synonymTermAttributeRootQuery.hasChild(synonymQuery));
    return this.isParentIn(synonymTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery)
  {
    synonymTermAttributeRootQuery.AND(synonymTermAttributeRootQuery.hasChild(synonymQuery));
    return this.isParentIn_SUBSELECT(synonymTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition universalTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_universalTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery)
  {
    return this.isParentIn(universalTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery)
  {
    return this.isParentIn_SUBSELECT(universalTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery)
  {
    universalTermAttributeRootQuery.AND(universalTermAttributeRootQuery.hasChild(universalQuery));
    return this.isParentIn(universalTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery)
  {
    universalTermAttributeRootQuery.AND(universalTermAttributeRootQuery.hasChild(universalQuery));
    return this.isParentIn_SUBSELECT(universalTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    return this.isNotParentIn(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    return this.isNotParentIn_SUBSELECT(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoEntityQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    geoEntityTermAttributeRootQuery.AND(geoEntityTermAttributeRootQuery.hasChild(geoEntityQuery));
    return this.isNotParentIn(geoEntityTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntityQuery geoEntityQuery, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRootQuery geoEntityTermAttributeRootQuery)
  {
    geoEntityTermAttributeRootQuery.AND(geoEntityTermAttributeRootQuery.hasChild(geoEntityQuery));
    return this.isNotParentIn_SUBSELECT(geoEntityTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_synonymTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery)
  {
    return this.isNotParentIn(synonymTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery)
  {
    return this.isNotParentIn_SUBSELECT(synonymTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(synonymQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery)
  {
    synonymTermAttributeRootQuery.AND(synonymTermAttributeRootQuery.hasChild(synonymQuery));
    return this.isNotParentIn(synonymTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_synonymTermAttributeRoots(com.runwaysdk.system.gis.geo.SynonymQuery synonymQuery, com.runwaysdk.system.gis.geo.SynonymTermAttributeRootQuery synonymTermAttributeRootQuery)
  {
    synonymTermAttributeRootQuery.AND(synonymTermAttributeRootQuery.hasChild(synonymQuery));
    return this.isNotParentIn_SUBSELECT(synonymTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_universalTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery)
  {
    return this.isNotParentIn(universalTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery)
  {
    return this.isNotParentIn_SUBSELECT(universalTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery)
  {
    universalTermAttributeRootQuery.AND(universalTermAttributeRootQuery.hasChild(universalQuery));
    return this.isNotParentIn(universalTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalTermAttributeRoots(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.UniversalTermAttributeRootQuery universalTermAttributeRootQuery)
  {
    universalTermAttributeRootQuery.AND(universalTermAttributeRootQuery.hasChild(universalQuery));
    return this.isNotParentIn_SUBSELECT(universalTermAttributeRootQuery);
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface MdAttributeTermQueryMultiReferenceIF extends com.runwaysdk.system.metadata.MdAttributeReferenceQuery.MdAttributeReferenceQueryMultiReferenceIF
  {


    public com.runwaysdk.query.Condition containsAny(com.runwaysdk.system.metadata.MdAttributeTerm ... mdAttributeTerm);
    public com.runwaysdk.query.Condition notContainsAny(com.runwaysdk.system.metadata.MdAttributeTerm ... mdAttributeTerm);
    public com.runwaysdk.query.Condition containsAll(com.runwaysdk.system.metadata.MdAttributeTerm ... mdAttributeTerm);
    public com.runwaysdk.query.Condition notContainsAll(com.runwaysdk.system.metadata.MdAttributeTerm ... mdAttributeTerm);
    public com.runwaysdk.query.Condition containsExactly(com.runwaysdk.system.metadata.MdAttributeTerm ... mdAttributeTerm);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class MdAttributeTermQueryMultiReference extends com.runwaysdk.system.metadata.MdAttributeReferenceQuery.MdAttributeReferenceQueryMultiReference
 implements MdAttributeTermQueryMultiReferenceIF

  {

  public MdAttributeTermQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(com.runwaysdk.system.metadata.MdAttributeTerm ... mdAttributeTerm)  {

      String[] itemIdArray = new String[mdAttributeTerm.length]; 

      for (int i=0; i<mdAttributeTerm.length; i++)
      {
        itemIdArray[i] = mdAttributeTerm[i].getOid();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(com.runwaysdk.system.metadata.MdAttributeTerm ... mdAttributeTerm)  {

      String[] itemIdArray = new String[mdAttributeTerm.length]; 

      for (int i=0; i<mdAttributeTerm.length; i++)
      {
        itemIdArray[i] = mdAttributeTerm[i].getOid();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(com.runwaysdk.system.metadata.MdAttributeTerm ... mdAttributeTerm)  {

      String[] itemIdArray = new String[mdAttributeTerm.length]; 

      for (int i=0; i<mdAttributeTerm.length; i++)
      {
        itemIdArray[i] = mdAttributeTerm[i].getOid();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(com.runwaysdk.system.metadata.MdAttributeTerm ... mdAttributeTerm)  {

      String[] itemIdArray = new String[mdAttributeTerm.length]; 

      for (int i=0; i<mdAttributeTerm.length; i++)
      {
        itemIdArray[i] = mdAttributeTerm[i].getOid();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(com.runwaysdk.system.metadata.MdAttributeTerm ... mdAttributeTerm)  {

      String[] itemIdArray = new String[mdAttributeTerm.length]; 

      for (int i=0; i<mdAttributeTerm.length; i++)
      {
        itemIdArray[i] = mdAttributeTerm[i].getOid();
      }

      return this.containsExactly(itemIdArray);
  }
  }
}
