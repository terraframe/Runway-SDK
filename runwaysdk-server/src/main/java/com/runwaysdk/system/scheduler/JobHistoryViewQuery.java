/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.scheduler;

import com.runwaysdk.query.QueryFactory;
import com.runwaysdk.query.Selectable;
import com.runwaysdk.query.SelectablePrimitive;

/**
 *
 * @author Autogenerated by RunwaySDK
 */
public class JobHistoryViewQuery extends com.runwaysdk.system.scheduler.JobHistoryViewQueryBase 
{
  protected JobHistoryQuery historyQ;
  protected ExecutableJobQuery execJobQ;
  protected JobHistoryRecordQuery jobHistoryRecordQ;
  
  public JobHistoryViewQuery(com.runwaysdk.query.QueryFactory queryFactory)
  {
    super(queryFactory);
    
    this.historyQ = new JobHistoryQuery(queryFactory);
    this.execJobQ = new ExecutableJobQuery(queryFactory);
    this.jobHistoryRecordQ = new JobHistoryRecordQuery(queryFactory);
    
    this.buildQuery(new DefaultJobHistoryViewBuilder(queryFactory));
  }
  
  public JobHistoryViewQuery(QueryFactory queryFactory, String sortAttribute, Boolean isAscending, Integer pageSize, Integer pageNumber){
    super(queryFactory);
    
    this.historyQ = new JobHistoryQuery(queryFactory);
    this.execJobQ = new ExecutableJobQuery(queryFactory);
    this.jobHistoryRecordQ = new JobHistoryRecordQuery(queryFactory);
    
    this.buildQuery(new DefaultJobHistoryViewBuilder(queryFactory));
    
    if (sortAttribute != null && !(sortAttribute.equals(""))) {
      Selectable attr = this.getSelectable(sortAttribute, null, null);
      
      if (attr != null && attr instanceof SelectablePrimitive) {
        if (isAscending) {
          this.ORDER_BY_ASC((SelectablePrimitive) attr);
        }
        else {
          this.ORDER_BY_DESC((SelectablePrimitive) attr);
        }
      }
    }
    this.restrictRows(pageSize, pageNumber);
  }

  public JobHistoryViewQuery(com.runwaysdk.query.QueryFactory queryFactory, com.runwaysdk.query.ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  public JobHistoryViewQuery(QueryFactory queryFactory, String sortAttribute, Boolean isAscending, Integer pageSize,
      Integer pageNumber, String[] typeExcludes)
  {
    super(queryFactory);
    
    this.historyQ = new JobHistoryQuery(queryFactory);
    this.execJobQ = new ExecutableJobQuery(queryFactory);
    this.jobHistoryRecordQ = new JobHistoryRecordQuery(queryFactory);
    
    this.buildQuery(new DefaultJobHistoryViewBuilder(queryFactory, typeExcludes));
    
    if (sortAttribute != null && !(sortAttribute.equals(""))) {
      Selectable attr = this.getSelectable(sortAttribute, null, null);
      
      if (attr != null && attr instanceof SelectablePrimitive) {
        if (isAscending) {
          this.ORDER_BY_ASC((SelectablePrimitive) attr);
        }
        else {
          this.ORDER_BY_DESC((SelectablePrimitive) attr);
        }
      }
    }
    this.restrictRows(pageSize, pageNumber);
  }

  class DefaultJobHistoryViewBuilder extends com.runwaysdk.query.ViewQueryBuilder
  {
    private String[] typeExcludes;
    
    public DefaultJobHistoryViewBuilder(com.runwaysdk.query.QueryFactory queryFactory)
    {
      super(queryFactory);
    }

    public DefaultJobHistoryViewBuilder(QueryFactory queryFactory, String[] typeExcludes)
    {
      super(queryFactory);
      
      this.typeExcludes = typeExcludes;
    }

    protected JobHistoryViewQuery getViewQuery()
    {
      return (JobHistoryViewQuery)super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      JobHistoryViewQuery q = this.getViewQuery();
      
      q.map(JobHistoryView.CREATEDATE, historyQ.getCreateDate());
      q.map(JobHistoryView.HISTORYCOMMENT, historyQ.getHistoryComment().localize());
      q.map(JobHistoryView.HISTORYINFORMATION, historyQ.getHistoryInformation().localize());
      q.map(JobHistoryView.DESCRIPTION, execJobQ.getDescription().localize());
      q.map(JobHistoryView.DISPLAYLABEL, execJobQ.getDisplayLabel().localize());
      q.map(JobHistoryView.CRONEXPRESSION, execJobQ.getCronExpression());
      q.map(JobHistoryView.STARTTIME, historyQ.getStartTime());
      q.map(JobHistoryView.ENDTIME, historyQ.getEndTime());
      q.map(JobHistoryView.WORKPROGRESS, historyQ.getWorkProgress());
      q.map(JobHistoryView.WORKTOTAL, historyQ.getWorkTotal());
      q.map(JobHistoryView.STATUS, historyQ.getStatus());
      q.map(JobHistoryView.STATUSLABEL, historyQ.getStatus().getDisplayLabel().getDefaultLocale());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {
      this.getViewQuery().WHERE(jobHistoryRecordQ.childId().EQ(historyQ.getId()).AND(jobHistoryRecordQ.parentId().EQ(execJobQ.getId())));
      
      if (this.typeExcludes != null)
      {
        for (String exclude : typeExcludes)
        {
          this.getViewQuery().WHERE(execJobQ.getType().NE(exclude));
        }
      }
    }

  }
}
