/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = -436519902)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MdView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class MdViewQuery extends com.runwaysdk.system.metadata.MdSessionQuery

{

  public MdViewQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
    super(componentQueryFactory);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public MdViewQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
    super(valueQuery);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return com.runwaysdk.system.metadata.MdView.CLASS;
  }
  public com.runwaysdk.query.SelectableBlob getQueryBaseClass()
  {
    return getQueryBaseClass(null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryBaseClass(String alias)
  {
    return (com.runwaysdk.query.SelectableBlob)this.getComponentQuery().get(com.runwaysdk.system.metadata.MdView.QUERYBASECLASS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryBaseClass(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBlob)this.getComponentQuery().get(com.runwaysdk.system.metadata.MdView.QUERYBASECLASS, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getQueryBaseSource()
  {
    return getQueryBaseSource(null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryBaseSource(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.metadata.MdView.QUERYBASESOURCE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryBaseSource(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.metadata.MdView.QUERYBASESOURCE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBlob getQueryDTOclass()
  {
    return getQueryDTOclass(null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryDTOclass(String alias)
  {
    return (com.runwaysdk.query.SelectableBlob)this.getComponentQuery().get(com.runwaysdk.system.metadata.MdView.QUERYDTOCLASS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryDTOclass(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBlob)this.getComponentQuery().get(com.runwaysdk.system.metadata.MdView.QUERYDTOCLASS, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getQueryDTOsource()
  {
    return getQueryDTOsource(null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryDTOsource(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.metadata.MdView.QUERYDTOSOURCE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryDTOsource(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.metadata.MdView.QUERYDTOSOURCE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBlob getQueryStubClass()
  {
    return getQueryStubClass(null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryStubClass(String alias)
  {
    return (com.runwaysdk.query.SelectableBlob)this.getComponentQuery().get(com.runwaysdk.system.metadata.MdView.QUERYSTUBCLASS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryStubClass(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBlob)this.getComponentQuery().get(com.runwaysdk.system.metadata.MdView.QUERYSTUBCLASS, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getQueryStubSource()
  {
    return getQueryStubSource(null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryStubSource(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.metadata.MdView.QUERYSTUBSOURCE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryStubSource(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.metadata.MdView.QUERYSTUBSOURCE, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF getSuperMdView()
  {
    return getSuperMdView(null);

  }
 
  public com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF getSuperMdView(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.metadata.MdView.SUPERMDVIEW);

    return (com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.metadata.MdView.SUPERMDVIEW, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF getSuperMdView(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.metadata.MdView.SUPERMDVIEW);

    return (com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.metadata.MdView.SUPERMDVIEW, mdAttributeIF, this, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.metadata.MdView.SUPERMDVIEW)) 
    {
       return new com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      return super.referenceFactory(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends MdView> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<MdView>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition parentView()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_parentView()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition parentView(com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    return this.getBusinessQuery().isChildIn(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentView(com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdViewQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdViewQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    viewInheritanceQuery.AND(viewInheritanceQuery.hasParent(mdViewQuery));
    return this.getBusinessQuery().isChildIn(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    viewInheritanceQuery.AND(viewInheritanceQuery.hasParent(mdViewQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(viewInheritanceQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_parentView()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentView()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentView(com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    return this.getBusinessQuery().isNotChildIn(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentView(com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdViewQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdViewQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    viewInheritanceQuery.AND(viewInheritanceQuery.hasParent(mdViewQuery));
    return this.getBusinessQuery().isNotChildIn(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    viewInheritanceQuery.AND(viewInheritanceQuery.hasParent(mdViewQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(viewInheritanceQuery);
  }


  public com.runwaysdk.query.Condition childViews()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_childViews()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition childViews(com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    return this.getBusinessQuery().isParentIn(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childViews(com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdViewQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdViewQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    viewInheritanceQuery.AND(viewInheritanceQuery.hasChild(mdViewQuery));
    return this.getBusinessQuery().isParentIn(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    viewInheritanceQuery.AND(viewInheritanceQuery.hasChild(mdViewQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(viewInheritanceQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_childViews()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childViews()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childViews(com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    return this.getBusinessQuery().isNotParentIn(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childViews(com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdViewQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdViewQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    viewInheritanceQuery.AND(viewInheritanceQuery.hasChild(mdViewQuery));
    return this.getBusinessQuery().isNotParentIn(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    viewInheritanceQuery.AND(viewInheritanceQuery.hasChild(mdViewQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(viewInheritanceQuery);
  }


  public com.runwaysdk.query.Condition virtualAttribute()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_virtualAttribute()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition virtualAttribute(com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery)
  {
    return this.getBusinessQuery().isParentIn(classAttributeVirtualQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_virtualAttribute(com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(classAttributeVirtualQuery);
  }

  public com.runwaysdk.query.Condition virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdAttributeVirtualQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdAttributeVirtualQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery, com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery)
  {
    classAttributeVirtualQuery.AND(classAttributeVirtualQuery.hasChild(mdAttributeVirtualQuery));
    return this.getBusinessQuery().isParentIn(classAttributeVirtualQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery, com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery)
  {
    classAttributeVirtualQuery.AND(classAttributeVirtualQuery.hasChild(mdAttributeVirtualQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(classAttributeVirtualQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_virtualAttribute()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_virtualAttribute()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_virtualAttribute(com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery)
  {
    return this.getBusinessQuery().isNotParentIn(classAttributeVirtualQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_virtualAttribute(com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(classAttributeVirtualQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdAttributeVirtualQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdAttributeVirtualQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery, com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery)
  {
    classAttributeVirtualQuery.AND(classAttributeVirtualQuery.hasChild(mdAttributeVirtualQuery));
    return this.getBusinessQuery().isNotParentIn(classAttributeVirtualQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery, com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery)
  {
    classAttributeVirtualQuery.AND(classAttributeVirtualQuery.hasChild(mdAttributeVirtualQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(classAttributeVirtualQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface MdViewQueryReferenceIF extends com.runwaysdk.system.metadata.MdSessionQuery.MdSessionQueryReferenceIF
  {

    public com.runwaysdk.query.SelectableBlob getQueryBaseClass();
    public com.runwaysdk.query.SelectableBlob getQueryBaseClass(String alias);
    public com.runwaysdk.query.SelectableBlob getQueryBaseClass(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getQueryBaseSource();
    public com.runwaysdk.query.SelectableChar getQueryBaseSource(String alias);
    public com.runwaysdk.query.SelectableChar getQueryBaseSource(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBlob getQueryDTOclass();
    public com.runwaysdk.query.SelectableBlob getQueryDTOclass(String alias);
    public com.runwaysdk.query.SelectableBlob getQueryDTOclass(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getQueryDTOsource();
    public com.runwaysdk.query.SelectableChar getQueryDTOsource(String alias);
    public com.runwaysdk.query.SelectableChar getQueryDTOsource(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBlob getQueryStubClass();
    public com.runwaysdk.query.SelectableBlob getQueryStubClass(String alias);
    public com.runwaysdk.query.SelectableBlob getQueryStubClass(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getQueryStubSource();
    public com.runwaysdk.query.SelectableChar getQueryStubSource(String alias);
    public com.runwaysdk.query.SelectableChar getQueryStubSource(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF getSuperMdView();
    public com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF getSuperMdView(String alias);
    public com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF getSuperMdView(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(com.runwaysdk.system.metadata.MdView mdView);

    public com.runwaysdk.query.BasicCondition NE(com.runwaysdk.system.metadata.MdView mdView);


  public com.runwaysdk.query.Condition childViews();

  public com.runwaysdk.query.Condition childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery);

  public com.runwaysdk.query.Condition childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery);


  public com.runwaysdk.query.Condition SUBSELECT_childViews();

  public com.runwaysdk.query.Condition SUBSELECT_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery);

  public com.runwaysdk.query.Condition SUBSELECT_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery);


  public com.runwaysdk.query.Condition virtualAttribute();

  public com.runwaysdk.query.Condition virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery);

  public com.runwaysdk.query.Condition virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery, com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery);


  public com.runwaysdk.query.Condition SUBSELECT_virtualAttribute();

  public com.runwaysdk.query.Condition SUBSELECT_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery);

  public com.runwaysdk.query.Condition SUBSELECT_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery, com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery);


  public com.runwaysdk.query.Condition NOT_IN_childViews();

  public com.runwaysdk.query.Condition NOT_IN_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery);

  public com.runwaysdk.query.Condition NOT_IN_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childViews();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery);


  public com.runwaysdk.query.Condition NOT_IN_virtualAttribute();

  public com.runwaysdk.query.Condition NOT_IN_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery);

  public com.runwaysdk.query.Condition NOT_IN_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery, com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_virtualAttribute();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery, com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery);


  public com.runwaysdk.query.Condition parentView();
  public com.runwaysdk.query.Condition parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery);

  public com.runwaysdk.query.Condition parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery);


  public com.runwaysdk.query.Condition SUBSELECT_parentView();
  public com.runwaysdk.query.Condition SUBSELECT_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery);

  public com.runwaysdk.query.Condition SUBSELECT_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery);


  public com.runwaysdk.query.Condition NOT_IN_parentView();
  public com.runwaysdk.query.Condition NOT_IN_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery);

  public com.runwaysdk.query.Condition NOT_IN_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentView();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class MdViewQueryReference extends com.runwaysdk.system.metadata.MdSessionQuery.MdSessionQueryReference
 implements MdViewQueryReferenceIF

  {

  public MdViewQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(com.runwaysdk.system.metadata.MdView mdView)
    {
      if(mdView == null) return this.EQ((java.lang.String)null);
      return this.EQ(mdView.getOid());
    }

    public com.runwaysdk.query.BasicCondition NE(com.runwaysdk.system.metadata.MdView mdView)
    {
      if(mdView == null) return this.NE((java.lang.String)null);
      return this.NE(mdView.getOid());
    }

  public com.runwaysdk.query.SelectableBlob getQueryBaseClass()
  {
    return getQueryBaseClass(null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryBaseClass(String alias)
  {
    return (com.runwaysdk.query.SelectableBlob)this.get(com.runwaysdk.system.metadata.MdView.QUERYBASECLASS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryBaseClass(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBlob)this.get(com.runwaysdk.system.metadata.MdView.QUERYBASECLASS, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getQueryBaseSource()
  {
    return getQueryBaseSource(null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryBaseSource(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.metadata.MdView.QUERYBASESOURCE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryBaseSource(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.metadata.MdView.QUERYBASESOURCE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBlob getQueryDTOclass()
  {
    return getQueryDTOclass(null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryDTOclass(String alias)
  {
    return (com.runwaysdk.query.SelectableBlob)this.get(com.runwaysdk.system.metadata.MdView.QUERYDTOCLASS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryDTOclass(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBlob)this.get(com.runwaysdk.system.metadata.MdView.QUERYDTOCLASS, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getQueryDTOsource()
  {
    return getQueryDTOsource(null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryDTOsource(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.metadata.MdView.QUERYDTOSOURCE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryDTOsource(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.metadata.MdView.QUERYDTOSOURCE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBlob getQueryStubClass()
  {
    return getQueryStubClass(null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryStubClass(String alias)
  {
    return (com.runwaysdk.query.SelectableBlob)this.get(com.runwaysdk.system.metadata.MdView.QUERYSTUBCLASS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryStubClass(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBlob)this.get(com.runwaysdk.system.metadata.MdView.QUERYSTUBCLASS, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getQueryStubSource()
  {
    return getQueryStubSource(null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryStubSource(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.metadata.MdView.QUERYSTUBSOURCE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryStubSource(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.metadata.MdView.QUERYSTUBSOURCE, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF getSuperMdView()
  {
    return getSuperMdView(null);

  }
 
  public com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF getSuperMdView(String alias)
  {
    return (com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF)this.get(com.runwaysdk.system.metadata.MdView.SUPERMDVIEW, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF getSuperMdView(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF)this.get(com.runwaysdk.system.metadata.MdView.SUPERMDVIEW,  alias, displayLabel);

  }

  public com.runwaysdk.query.Condition childViews()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_childViews()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition childViews(com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    return this.isParentIn(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childViews(com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    return this.isParentIn_SUBSELECT(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdViewQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdViewQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    viewInheritanceQuery.AND(viewInheritanceQuery.hasChild(mdViewQuery));
    return this.isParentIn(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    viewInheritanceQuery.AND(viewInheritanceQuery.hasChild(mdViewQuery));
    return this.isParentIn_SUBSELECT(viewInheritanceQuery);
  }


  public com.runwaysdk.query.Condition virtualAttribute()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_virtualAttribute()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition virtualAttribute(com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery)
  {
    return this.isParentIn(classAttributeVirtualQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_virtualAttribute(com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery)
  {
    return this.isParentIn_SUBSELECT(classAttributeVirtualQuery);
  }

  public com.runwaysdk.query.Condition virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdAttributeVirtualQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdAttributeVirtualQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery, com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery)
  {
    classAttributeVirtualQuery.AND(classAttributeVirtualQuery.hasChild(mdAttributeVirtualQuery));
    return this.isParentIn(classAttributeVirtualQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery, com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery)
  {
    classAttributeVirtualQuery.AND(classAttributeVirtualQuery.hasChild(mdAttributeVirtualQuery));
    return this.isParentIn_SUBSELECT(classAttributeVirtualQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_childViews()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childViews()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childViews(com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    return this.isNotParentIn(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childViews(com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    return this.isNotParentIn_SUBSELECT(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdViewQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdViewQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    viewInheritanceQuery.AND(viewInheritanceQuery.hasChild(mdViewQuery));
    return this.isNotParentIn(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childViews(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    viewInheritanceQuery.AND(viewInheritanceQuery.hasChild(mdViewQuery));
    return this.isNotParentIn_SUBSELECT(viewInheritanceQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_virtualAttribute()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_virtualAttribute()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_virtualAttribute(com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery)
  {
    return this.isNotParentIn(classAttributeVirtualQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_virtualAttribute(com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery)
  {
    return this.isNotParentIn_SUBSELECT(classAttributeVirtualQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdAttributeVirtualQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ClassAttributeVirtual.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdAttributeVirtualQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery, com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery)
  {
    classAttributeVirtualQuery.AND(classAttributeVirtualQuery.hasChild(mdAttributeVirtualQuery));
    return this.isNotParentIn(classAttributeVirtualQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_virtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtualQuery mdAttributeVirtualQuery, com.runwaysdk.system.metadata.ClassAttributeVirtualQuery classAttributeVirtualQuery)
  {
    classAttributeVirtualQuery.AND(classAttributeVirtualQuery.hasChild(mdAttributeVirtualQuery));
    return this.isNotParentIn_SUBSELECT(classAttributeVirtualQuery);
  }


  public com.runwaysdk.query.Condition parentView()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_parentView()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition parentView(com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    return this.isChildIn(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentView(com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    return this.isChildIn_SUBSELECT(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdViewQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdViewQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    viewInheritanceQuery.AND(viewInheritanceQuery.hasParent(mdViewQuery));
    return this.isChildIn(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    viewInheritanceQuery.AND(viewInheritanceQuery.hasParent(mdViewQuery));
    return this.isChildIn_SUBSELECT(viewInheritanceQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_parentView()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentView()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentView(com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    return this.isNotChildIn(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentView(com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    return this.isNotChildIn_SUBSELECT(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdViewQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.ViewInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdViewQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    viewInheritanceQuery.AND(viewInheritanceQuery.hasParent(mdViewQuery));
    return this.isNotChildIn(viewInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentView(com.runwaysdk.system.metadata.MdViewQuery mdViewQuery, com.runwaysdk.system.metadata.ViewInheritanceQuery viewInheritanceQuery)
  {
    viewInheritanceQuery.AND(viewInheritanceQuery.hasParent(mdViewQuery));
    return this.isNotChildIn_SUBSELECT(viewInheritanceQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.metadata.MdView.SUPERMDVIEW)) 
    {
       return new com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      return super.referenceFactory(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface MdViewQueryMultiReferenceIF extends com.runwaysdk.system.metadata.MdSessionQuery.MdSessionQueryMultiReferenceIF
  {

    public com.runwaysdk.query.SelectableBlob getQueryBaseClass();
    public com.runwaysdk.query.SelectableBlob getQueryBaseClass(String alias);
    public com.runwaysdk.query.SelectableBlob getQueryBaseClass(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getQueryBaseSource();
    public com.runwaysdk.query.SelectableChar getQueryBaseSource(String alias);
    public com.runwaysdk.query.SelectableChar getQueryBaseSource(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBlob getQueryDTOclass();
    public com.runwaysdk.query.SelectableBlob getQueryDTOclass(String alias);
    public com.runwaysdk.query.SelectableBlob getQueryDTOclass(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getQueryDTOsource();
    public com.runwaysdk.query.SelectableChar getQueryDTOsource(String alias);
    public com.runwaysdk.query.SelectableChar getQueryDTOsource(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBlob getQueryStubClass();
    public com.runwaysdk.query.SelectableBlob getQueryStubClass(String alias);
    public com.runwaysdk.query.SelectableBlob getQueryStubClass(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getQueryStubSource();
    public com.runwaysdk.query.SelectableChar getQueryStubSource(String alias);
    public com.runwaysdk.query.SelectableChar getQueryStubSource(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF getSuperMdView();
    public com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF getSuperMdView(String alias);
    public com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF getSuperMdView(String alias, String displayLabel);

    public com.runwaysdk.query.Condition containsAny(com.runwaysdk.system.metadata.MdView ... mdView);
    public com.runwaysdk.query.Condition notContainsAny(com.runwaysdk.system.metadata.MdView ... mdView);
    public com.runwaysdk.query.Condition containsAll(com.runwaysdk.system.metadata.MdView ... mdView);
    public com.runwaysdk.query.Condition notContainsAll(com.runwaysdk.system.metadata.MdView ... mdView);
    public com.runwaysdk.query.Condition containsExactly(com.runwaysdk.system.metadata.MdView ... mdView);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class MdViewQueryMultiReference extends com.runwaysdk.system.metadata.MdSessionQuery.MdSessionQueryMultiReference
 implements MdViewQueryMultiReferenceIF

  {

  public MdViewQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(com.runwaysdk.system.metadata.MdView ... mdView)  {

      String[] itemIdArray = new String[mdView.length]; 

      for (int i=0; i<mdView.length; i++)
      {
        itemIdArray[i] = mdView[i].getOid();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(com.runwaysdk.system.metadata.MdView ... mdView)  {

      String[] itemIdArray = new String[mdView.length]; 

      for (int i=0; i<mdView.length; i++)
      {
        itemIdArray[i] = mdView[i].getOid();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(com.runwaysdk.system.metadata.MdView ... mdView)  {

      String[] itemIdArray = new String[mdView.length]; 

      for (int i=0; i<mdView.length; i++)
      {
        itemIdArray[i] = mdView[i].getOid();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(com.runwaysdk.system.metadata.MdView ... mdView)  {

      String[] itemIdArray = new String[mdView.length]; 

      for (int i=0; i<mdView.length; i++)
      {
        itemIdArray[i] = mdView[i].getOid();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(com.runwaysdk.system.metadata.MdView ... mdView)  {

      String[] itemIdArray = new String[mdView.length]; 

      for (int i=0; i<mdView.length; i++)
      {
        itemIdArray[i] = mdView[i].getOid();
      }

      return this.containsExactly(itemIdArray);
  }
  public com.runwaysdk.query.SelectableBlob getQueryBaseClass()
  {
    return getQueryBaseClass(null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryBaseClass(String alias)
  {
    return (com.runwaysdk.query.SelectableBlob)this.get(com.runwaysdk.system.metadata.MdView.QUERYBASECLASS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryBaseClass(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBlob)this.get(com.runwaysdk.system.metadata.MdView.QUERYBASECLASS, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getQueryBaseSource()
  {
    return getQueryBaseSource(null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryBaseSource(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.metadata.MdView.QUERYBASESOURCE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryBaseSource(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.metadata.MdView.QUERYBASESOURCE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBlob getQueryDTOclass()
  {
    return getQueryDTOclass(null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryDTOclass(String alias)
  {
    return (com.runwaysdk.query.SelectableBlob)this.get(com.runwaysdk.system.metadata.MdView.QUERYDTOCLASS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryDTOclass(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBlob)this.get(com.runwaysdk.system.metadata.MdView.QUERYDTOCLASS, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getQueryDTOsource()
  {
    return getQueryDTOsource(null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryDTOsource(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.metadata.MdView.QUERYDTOSOURCE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryDTOsource(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.metadata.MdView.QUERYDTOSOURCE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBlob getQueryStubClass()
  {
    return getQueryStubClass(null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryStubClass(String alias)
  {
    return (com.runwaysdk.query.SelectableBlob)this.get(com.runwaysdk.system.metadata.MdView.QUERYSTUBCLASS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBlob getQueryStubClass(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBlob)this.get(com.runwaysdk.system.metadata.MdView.QUERYSTUBCLASS, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getQueryStubSource()
  {
    return getQueryStubSource(null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryStubSource(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.metadata.MdView.QUERYSTUBSOURCE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getQueryStubSource(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.metadata.MdView.QUERYSTUBSOURCE, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF getSuperMdView()
  {
    return getSuperMdView(null);

  }
 
  public com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF getSuperMdView(String alias)
  {
    return (com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF)this.get(com.runwaysdk.system.metadata.MdView.SUPERMDVIEW, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF getSuperMdView(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReferenceIF)this.get(com.runwaysdk.system.metadata.MdView.SUPERMDVIEW,  alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.metadata.MdView.SUPERMDVIEW)) 
    {
       return new com.runwaysdk.system.metadata.MdViewQuery.MdViewQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      return super.referenceFactory(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
  }

  }
}
