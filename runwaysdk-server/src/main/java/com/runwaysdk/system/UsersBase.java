/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system;

@com.runwaysdk.business.ClassSignature(hash = -47212880)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Users.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class UsersBase extends com.runwaysdk.system.SingleActor
{
  public final static String CLASS = "com.runwaysdk.system.Users";
  public static java.lang.String INACTIVE = "inactive";
  public static java.lang.String LOCALE = "locale";
  public static java.lang.String PASSWORD = "password";
  public static java.lang.String SESSIONLIMIT = "sessionLimit";
  public static java.lang.String USERNAME = "username";
  private static final long serialVersionUID = -47212880;
  
  public UsersBase()
  {
    super();
  }
  
  public Boolean getInactive()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(INACTIVE));
  }
  
  public void validateInactive()
  {
    this.validateAttribute(INACTIVE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getInactiveMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.Users.CLASS);
    return mdClassIF.definesAttribute(INACTIVE);
  }
  
  public void setInactive(Boolean value)
  {
    if(value == null)
    {
      setValue(INACTIVE, "");
    }
    else
    {
      setValue(INACTIVE, java.lang.Boolean.toString(value));
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<com.runwaysdk.system.metadata.UserLocales> getLocale()
  {
    return (java.util.List<com.runwaysdk.system.metadata.UserLocales>) getEnumValues(LOCALE);
  }
  
  public void addLocale(com.runwaysdk.system.metadata.UserLocales value)
  {
    if(value != null)
    {
      addEnumItem(LOCALE, value.getOid());
    }
  }
  
  public void removeLocale(com.runwaysdk.system.metadata.UserLocales value)
  {
    if(value != null)
    {
      removeEnumItem(LOCALE, value.getOid());
    }
  }
  
  public void clearLocale()
  {
    clearEnum(LOCALE);
  }
  
  public void validateLocale()
  {
    this.validateAttribute(LOCALE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLocaleMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.Users.CLASS);
    return mdClassIF.definesAttribute(LOCALE);
  }
  
  public boolean passwordEquals(String value)
  {
    return ((com.runwaysdk.dataaccess.AttributeEncryptionIF)com.runwaysdk.business.BusinessFacade.getAttribute(this, "password")).encryptionEquals(value, false);
  }
  
  public void validatePassword()
  {
    this.validateAttribute(PASSWORD);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPasswordMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.Users.CLASS);
    return mdClassIF.definesAttribute(PASSWORD);
  }
  
  public void setPassword(String value)
  {
    if(value == null)
    {
      setValue(PASSWORD, "");
    }
    else
    {
      setValue(PASSWORD, value);
    }
  }
  
  public Integer getSessionLimit()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(SESSIONLIMIT));
  }
  
  public void validateSessionLimit()
  {
    this.validateAttribute(SESSIONLIMIT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getSessionLimitMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.Users.CLASS);
    return mdClassIF.definesAttribute(SESSIONLIMIT);
  }
  
  public void setSessionLimit(Integer value)
  {
    if(value == null)
    {
      setValue(SESSIONLIMIT, "");
    }
    else
    {
      setValue(SESSIONLIMIT, java.lang.Integer.toString(value));
    }
  }
  
  public String getUsername()
  {
    return getValue(USERNAME);
  }
  
  public void validateUsername()
  {
    this.validateAttribute(USERNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getUsernameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.Users.CLASS);
    return mdClassIF.definesAttribute(USERNAME);
  }
  
  public void setUsername(String value)
  {
    if(value == null)
    {
      setValue(USERNAME, "");
    }
    else
    {
      setValue(USERNAME, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static Users get(String oid)
  {
    return (Users) com.runwaysdk.business.Business.get(oid);
  }
  
  public static Users getByKey(String key)
  {
    return (Users) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static Users lock(java.lang.String oid)
  {
    Users _instance = Users.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static Users unlock(java.lang.String oid)
  {
    Users _instance = Users.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return this.getValue("username");
    }
  }
}
