/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = -29865020)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to SymmetricMethods.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class SymmetricMethodsBase extends com.runwaysdk.system.EnumerationMaster
{
  public final static String CLASS = "com.runwaysdk.system.metadata.SymmetricMethods";
  public final static java.lang.String TRANSFORMATION = "transformation";
  private static final long serialVersionUID = -29865020;
  
  public SymmetricMethodsBase()
  {
    super();
  }
  
  public String getTransformation()
  {
    return getValue(TRANSFORMATION);
  }
  
  public void validateTransformation()
  {
    this.validateAttribute(TRANSFORMATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTransformationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.SymmetricMethods.CLASS);
    return mdClassIF.definesAttribute(TRANSFORMATION);
  }
  
  public void setTransformation(String value)
  {
    if(value == null)
    {
      setValue(TRANSFORMATION, "");
    }
    else
    {
      setValue(TRANSFORMATION, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static SymmetricMethods get(String oid)
  {
    return (SymmetricMethods) com.runwaysdk.business.Business.get(oid);
  }
  
  public static SymmetricMethods getByKey(String key)
  {
    return (SymmetricMethods) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static SymmetricMethods getEnumeration(String enumName)
  {
    return (SymmetricMethods) com.runwaysdk.business.Business.getEnumeration(com.runwaysdk.system.metadata.SymmetricMethods.CLASS ,enumName);
  }
  
  public static SymmetricMethods lock(java.lang.String oid)
  {
    SymmetricMethods _instance = SymmetricMethods.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static SymmetricMethods unlock(java.lang.String oid)
  {
    SymmetricMethods _instance = SymmetricMethods.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
