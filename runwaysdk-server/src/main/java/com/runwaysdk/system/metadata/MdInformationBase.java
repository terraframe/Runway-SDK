/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = -889737677)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MdInformation.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MdInformationBase extends com.runwaysdk.system.metadata.MdMessage
{
  public final static String CLASS = "com.runwaysdk.system.metadata.MdInformation";
  public static java.lang.String SUPERMDINFORMATION = "superMdInformation";
  private static final long serialVersionUID = -889737677;
  
  public MdInformationBase()
  {
    super();
  }
  
  public com.runwaysdk.system.metadata.MdInformation getSuperMdInformation()
  {
    if (getValue(SUPERMDINFORMATION).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdInformation.get(getValue(SUPERMDINFORMATION));
    }
  }
  
  public String getSuperMdInformationId()
  {
    return getValue(SUPERMDINFORMATION);
  }
  
  public void validateSuperMdInformation()
  {
    this.validateAttribute(SUPERMDINFORMATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getSuperMdInformationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdInformation.CLASS);
    return mdClassIF.definesAttribute(SUPERMDINFORMATION);
  }
  
  public void setSuperMdInformation(com.runwaysdk.system.metadata.MdInformation value)
  {
    if(value == null)
    {
      setValue(SUPERMDINFORMATION, "");
    }
    else
    {
      setValue(SUPERMDINFORMATION, value.getOid());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.system.metadata.InformationInheritance addChildInformationClass(com.runwaysdk.system.metadata.MdInformation mdInformation)
  {
    return (com.runwaysdk.system.metadata.InformationInheritance) addChild(mdInformation, com.runwaysdk.system.metadata.InformationInheritance.CLASS);
  }
  
  public void removeChildInformationClass(com.runwaysdk.system.metadata.MdInformation mdInformation)
  {
    removeAllChildren(mdInformation, com.runwaysdk.system.metadata.InformationInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdInformation> getAllChildInformationClass()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdInformation>) getChildren(com.runwaysdk.system.metadata.InformationInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.InformationInheritance> getAllChildInformationClassRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.InformationInheritance>) getChildRelationships(com.runwaysdk.system.metadata.InformationInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.InformationInheritance getChildInformationClassRel(com.runwaysdk.system.metadata.MdInformation mdInformation)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.InformationInheritance> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.InformationInheritance>) getRelationshipsWithChild(mdInformation, com.runwaysdk.system.metadata.InformationInheritance.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public com.runwaysdk.system.metadata.InformationInheritance addSuperInformationClass(com.runwaysdk.system.metadata.MdInformation mdInformation)
  {
    return (com.runwaysdk.system.metadata.InformationInheritance) addParent(mdInformation, com.runwaysdk.system.metadata.InformationInheritance.CLASS);
  }
  
  public void removeSuperInformationClass(com.runwaysdk.system.metadata.MdInformation mdInformation)
  {
    removeAllParents(mdInformation, com.runwaysdk.system.metadata.InformationInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdInformation> getAllSuperInformationClass()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdInformation>) getParents(com.runwaysdk.system.metadata.InformationInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.InformationInheritance> getAllSuperInformationClassRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.InformationInheritance>) getParentRelationships(com.runwaysdk.system.metadata.InformationInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.InformationInheritance getSuperInformationClassRel(com.runwaysdk.system.metadata.MdInformation mdInformation)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.InformationInheritance> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.InformationInheritance>) getRelationshipsWithParent(mdInformation, com.runwaysdk.system.metadata.InformationInheritance.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static MdInformation get(String oid)
  {
    return (MdInformation) com.runwaysdk.business.Business.get(oid);
  }
  
  public static MdInformation getByKey(String key)
  {
    return (MdInformation) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static MdInformation lock(java.lang.String oid)
  {
    MdInformation _instance = MdInformation.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static MdInformation unlock(java.lang.String oid)
  {
    MdInformation _instance = MdInformation.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
