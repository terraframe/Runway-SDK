package com.runwaysdk.system.scheduler;

@com.runwaysdk.business.ClassSignature(hash = 994465420)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ExecutableJob.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ExecutableJobBase extends com.runwaysdk.system.scheduler.AbstractJob
{
  public final static String CLASS = "com.runwaysdk.system.scheduler.ExecutableJob";
  public static java.lang.String DESCRIPTION = "description";
  private com.runwaysdk.business.Struct description = null;
  
  public static java.lang.String RUNASDIMENSION = "runAsDimension";
  public static java.lang.String RUNASUSER = "runAsUser";
  private static final long serialVersionUID = 994465420;
  
  public ExecutableJobBase()
  {
    super();
    description = super.getStruct("description");
  }
  
  public com.runwaysdk.system.scheduler.ExecutableJobDescription getDescription()
  {
    return (com.runwaysdk.system.scheduler.ExecutableJobDescription) description;
  }
  
  public void validateDescription()
  {
    this.validateAttribute(DESCRIPTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalCharacterDAOIF getDescriptionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.ExecutableJob.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalCharacterDAOIF)mdClassIF.definesAttribute(DESCRIPTION);
  }
  
  public com.runwaysdk.system.metadata.MdDimension getRunAsDimension()
  {
    if (getValue(RUNASDIMENSION).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdDimension.get(getValue(RUNASDIMENSION));
    }
  }
  
  public String getRunAsDimensionId()
  {
    return getValue(RUNASDIMENSION);
  }
  
  public void validateRunAsDimension()
  {
    this.validateAttribute(RUNASDIMENSION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getRunAsDimensionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.ExecutableJob.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(RUNASDIMENSION);
  }
  
  public void setRunAsDimension(com.runwaysdk.system.metadata.MdDimension value)
  {
    if(value == null)
    {
      setValue(RUNASDIMENSION, "");
    }
    else
    {
      setValue(RUNASDIMENSION, value.getId());
    }
  }
  
  public void setRunAsDimensionId(java.lang.String id)
  {
    if(id == null)
    {
      setValue(RUNASDIMENSION, "");
    }
    else
    {
      setValue(RUNASDIMENSION, id);
    }
  }
  
  public com.runwaysdk.system.SingleActor getRunAsUser()
  {
    if (getValue(RUNASUSER).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(RUNASUSER));
    }
  }
  
  public String getRunAsUserId()
  {
    return getValue(RUNASUSER);
  }
  
  public void validateRunAsUser()
  {
    this.validateAttribute(RUNASUSER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getRunAsUserMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.ExecutableJob.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(RUNASUSER);
  }
  
  public void setRunAsUser(com.runwaysdk.system.SingleActor value)
  {
    if(value == null)
    {
      setValue(RUNASUSER, "");
    }
    else
    {
      setValue(RUNASUSER, value.getId());
    }
  }
  
  public void setRunAsUserId(java.lang.String id)
  {
    if(id == null)
    {
      setValue(RUNASUSER, "");
    }
    else
    {
      setValue(RUNASUSER, id);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.system.scheduler.JobHistoryRecord addJobHistory(com.runwaysdk.system.scheduler.JobHistory jobHistory)
  {
    return (com.runwaysdk.system.scheduler.JobHistoryRecord) addChild(jobHistory, com.runwaysdk.system.scheduler.JobHistoryRecord.CLASS);
  }
  
  public void removeJobHistory(com.runwaysdk.system.scheduler.JobHistory jobHistory)
  {
    removeAllChildren(jobHistory, com.runwaysdk.system.scheduler.JobHistoryRecord.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.JobHistory> getAllJobHistory()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.JobHistory>) getChildren(com.runwaysdk.system.scheduler.JobHistoryRecord.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.JobHistoryRecord> getAllJobHistoryRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.JobHistoryRecord>) getChildRelationships(com.runwaysdk.system.scheduler.JobHistoryRecord.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.JobHistoryRecord> getJobHistoryRel(com.runwaysdk.system.scheduler.JobHistory jobHistory)
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.JobHistoryRecord>) getRelationshipsWithChild(jobHistory, com.runwaysdk.system.scheduler.JobHistoryRecord.CLASS);
  }
  
  public com.runwaysdk.system.scheduler.DownstreamJobRelationship adddownstreamJob(com.runwaysdk.system.scheduler.ExecutableJob executableJob)
  {
    return (com.runwaysdk.system.scheduler.DownstreamJobRelationship) addChild(executableJob, com.runwaysdk.system.scheduler.DownstreamJobRelationship.CLASS);
  }
  
  public void removedownstreamJob(com.runwaysdk.system.scheduler.ExecutableJob executableJob)
  {
    removeAllChildren(executableJob, com.runwaysdk.system.scheduler.DownstreamJobRelationship.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.ExecutableJob> getAlldownstreamJob()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.ExecutableJob>) getChildren(com.runwaysdk.system.scheduler.DownstreamJobRelationship.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.DownstreamJobRelationship> getAlldownstreamJobRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.DownstreamJobRelationship>) getChildRelationships(com.runwaysdk.system.scheduler.DownstreamJobRelationship.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.scheduler.DownstreamJobRelationship getdownstreamJobRel(com.runwaysdk.system.scheduler.ExecutableJob executableJob)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.DownstreamJobRelationship> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.DownstreamJobRelationship>) getRelationshipsWithChild(executableJob, com.runwaysdk.system.scheduler.DownstreamJobRelationship.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public com.runwaysdk.system.scheduler.DownstreamJobRelationship addupstreamJob(com.runwaysdk.system.scheduler.ExecutableJob executableJob)
  {
    return (com.runwaysdk.system.scheduler.DownstreamJobRelationship) addParent(executableJob, com.runwaysdk.system.scheduler.DownstreamJobRelationship.CLASS);
  }
  
  public void removeupstreamJob(com.runwaysdk.system.scheduler.ExecutableJob executableJob)
  {
    removeAllParents(executableJob, com.runwaysdk.system.scheduler.DownstreamJobRelationship.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.ExecutableJob> getAllupstreamJob()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.ExecutableJob>) getParents(com.runwaysdk.system.scheduler.DownstreamJobRelationship.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.DownstreamJobRelationship> getAllupstreamJobRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.DownstreamJobRelationship>) getParentRelationships(com.runwaysdk.system.scheduler.DownstreamJobRelationship.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.scheduler.DownstreamJobRelationship getupstreamJobRel(com.runwaysdk.system.scheduler.ExecutableJob executableJob)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.DownstreamJobRelationship> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.DownstreamJobRelationship>) getRelationshipsWithParent(executableJob, com.runwaysdk.system.scheduler.DownstreamJobRelationship.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static ExecutableJob get(String id)
  {
    return (ExecutableJob) com.runwaysdk.business.Business.get(id);
  }
  
  public static ExecutableJob getByKey(String key)
  {
    return (ExecutableJob) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public void cancel()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.system.scheduler.ExecutableJob.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void cancel(java.lang.String id)
  {
    ExecutableJob _instance = ExecutableJob.get(id);
    _instance.cancel();
  }
  
  public void pause()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.system.scheduler.ExecutableJob.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void pause(java.lang.String id)
  {
    ExecutableJob _instance = ExecutableJob.get(id);
    _instance.pause();
  }
  
  public void resume()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.system.scheduler.ExecutableJob.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void resume(java.lang.String id)
  {
    ExecutableJob _instance = ExecutableJob.get(id);
    _instance.resume();
  }
  
  public com.runwaysdk.system.scheduler.JobHistory start()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.system.scheduler.ExecutableJob.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final com.runwaysdk.system.scheduler.JobHistory start(java.lang.String id)
  {
    ExecutableJob _instance = ExecutableJob.get(id);
    return _instance.start();
  }
  
  public void stop()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.system.scheduler.ExecutableJob.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void stop(java.lang.String id)
  {
    ExecutableJob _instance = ExecutableJob.get(id);
    _instance.stop();
  }
  
  public static ExecutableJob lock(java.lang.String id)
  {
    ExecutableJob _instance = ExecutableJob.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static ExecutableJob unlock(java.lang.String id)
  {
    ExecutableJob _instance = ExecutableJob.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
