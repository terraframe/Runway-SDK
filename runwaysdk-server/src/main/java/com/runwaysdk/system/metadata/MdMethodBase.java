/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = 580415374)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MdMethod.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MdMethodBase extends com.runwaysdk.system.metadata.Metadata
{
  public final static String CLASS = "com.runwaysdk.system.metadata.MdMethod";
  public static java.lang.String DISPLAYLABEL = "displayLabel";
  private com.runwaysdk.business.Struct displayLabel = null;
  
  public static java.lang.String ISSTATIC = "isStatic";
  public static java.lang.String MDTYPE = "mdType";
  public static java.lang.String METHODNAME = "methodName";
  public static java.lang.String RETURNTYPE = "returnType";
  private static final long serialVersionUID = 580415374;
  
  public MdMethodBase()
  {
    super();
    displayLabel = super.getStruct("displayLabel");
  }
  
  public com.runwaysdk.system.metadata.MetadataDisplayLabel getDisplayLabel()
  {
    return (com.runwaysdk.system.metadata.MetadataDisplayLabel) displayLabel;
  }
  
  public void validateDisplayLabel()
  {
    this.validateAttribute(DISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdMethod.CLASS);
    return mdClassIF.definesAttribute(DISPLAYLABEL);
  }
  
  public Boolean getIsStatic()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISSTATIC));
  }
  
  public void validateIsStatic()
  {
    this.validateAttribute(ISSTATIC);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIsStaticMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdMethod.CLASS);
    return mdClassIF.definesAttribute(ISSTATIC);
  }
  
  public void setIsStatic(Boolean value)
  {
    if(value == null)
    {
      setValue(ISSTATIC, "");
    }
    else
    {
      setValue(ISSTATIC, java.lang.Boolean.toString(value));
    }
  }
  
  public com.runwaysdk.system.metadata.MdType getMdType()
  {
    if (getValue(MDTYPE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdType.get(getValue(MDTYPE));
    }
  }
  
  public String getMdTypeId()
  {
    return getValue(MDTYPE);
  }
  
  public void validateMdType()
  {
    this.validateAttribute(MDTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getMdTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdMethod.CLASS);
    return mdClassIF.definesAttribute(MDTYPE);
  }
  
  public void setMdType(com.runwaysdk.system.metadata.MdType value)
  {
    if(value == null)
    {
      setValue(MDTYPE, "");
    }
    else
    {
      setValue(MDTYPE, value.getOid());
    }
  }
  
  public String getMethodName()
  {
    return getValue(METHODNAME);
  }
  
  public void validateMethodName()
  {
    this.validateAttribute(METHODNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getMethodNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdMethod.CLASS);
    return mdClassIF.definesAttribute(METHODNAME);
  }
  
  public void setMethodName(String value)
  {
    if(value == null)
    {
      setValue(METHODNAME, "");
    }
    else
    {
      setValue(METHODNAME, value);
    }
  }
  
  public String getReturnType()
  {
    return getValue(RETURNTYPE);
  }
  
  public void validateReturnType()
  {
    this.validateAttribute(RETURNTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getReturnTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdMethod.CLASS);
    return mdClassIF.definesAttribute(RETURNTYPE);
  }
  
  public void setReturnType(String value)
  {
    if(value == null)
    {
      setValue(RETURNTYPE, "");
    }
    else
    {
      setValue(RETURNTYPE, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.system.metadata.MdMethodMethodActor addMethodActor(com.runwaysdk.system.MethodActor methodActor)
  {
    return (com.runwaysdk.system.metadata.MdMethodMethodActor) addChild(methodActor, com.runwaysdk.system.metadata.MdMethodMethodActor.CLASS);
  }
  
  public void removeMethodActor(com.runwaysdk.system.MethodActor methodActor)
  {
    removeAllChildren(methodActor, com.runwaysdk.system.metadata.MdMethodMethodActor.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.MethodActor> getAllMethodActor()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.MethodActor>) getChildren(com.runwaysdk.system.metadata.MdMethodMethodActor.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdMethodMethodActor> getAllMethodActorRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdMethodMethodActor>) getChildRelationships(com.runwaysdk.system.metadata.MdMethodMethodActor.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.MdMethodMethodActor getMethodActorRel(com.runwaysdk.system.MethodActor methodActor)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdMethodMethodActor> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdMethodMethodActor>) getRelationshipsWithChild(methodActor, com.runwaysdk.system.metadata.MdMethodMethodActor.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public com.runwaysdk.system.metadata.TypeMethod addMdType(com.runwaysdk.system.metadata.MdType mdType)
  {
    return (com.runwaysdk.system.metadata.TypeMethod) addParent(mdType, com.runwaysdk.system.metadata.TypeMethod.CLASS);
  }
  
  public void removeMdType(com.runwaysdk.system.metadata.MdType mdType)
  {
    removeAllParents(mdType, com.runwaysdk.system.metadata.TypeMethod.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdType> getAllMdType()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdType>) getParents(com.runwaysdk.system.metadata.TypeMethod.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.TypeMethod> getAllMdTypeRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.TypeMethod>) getParentRelationships(com.runwaysdk.system.metadata.TypeMethod.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.TypeMethod getMdTypeRel(com.runwaysdk.system.metadata.MdType mdType)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.TypeMethod> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.TypeMethod>) getRelationshipsWithParent(mdType, com.runwaysdk.system.metadata.TypeMethod.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static MdMethod get(String oid)
  {
    return (MdMethod) com.runwaysdk.business.Business.get(oid);
  }
  
  public static MdMethod getByKey(String key)
  {
    return (MdMethod) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static MdMethod lock(java.lang.String oid)
  {
    MdMethod _instance = MdMethod.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static MdMethod unlock(java.lang.String oid)
  {
    MdMethod _instance = MdMethod.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return this.getClassDisplayLabel();
    }
  }
}
