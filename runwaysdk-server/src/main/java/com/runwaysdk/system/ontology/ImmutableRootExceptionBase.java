/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.ontology;

@com.runwaysdk.business.ClassSignature(hash = 265798160)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ImmutableRootException.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ImmutableRootExceptionBase extends com.runwaysdk.business.SmartException
{
  public final static String CLASS = "com.runwaysdk.system.ontology.ImmutableRootException";
  public static java.lang.String ID = "oid";
  public static java.lang.String ROOTNAME = "rootName";
  private static final long serialVersionUID = 265798160;
  
  public ImmutableRootExceptionBase()
  {
    super();
  }
  
  public ImmutableRootExceptionBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public ImmutableRootExceptionBase(java.lang.String developerMessage, java.lang.Throwable cause)
  {
    super(developerMessage, cause);
  }
  
  public ImmutableRootExceptionBase(java.lang.Throwable cause)
  {
    super(cause);
  }
  
  public String getOid()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.ontology.ImmutableRootException.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getRootName()
  {
    return getValue(ROOTNAME);
  }
  
  public void validateRootName()
  {
    this.validateAttribute(ROOTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getRootNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.ontology.ImmutableRootException.CLASS);
    return mdClassIF.definesAttribute(ROOTNAME);
  }
  
  public void setRootName(String value)
  {
    if(value == null)
    {
      setValue(ROOTNAME, "");
    }
    else
    {
      setValue(ROOTNAME, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{oid}", this.getOid());
    message = replace(message, "{rootName}", this.getRootName());
    return message;
  }
  
}
