/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = 375453614)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MdVertex.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MdVertexBase extends com.runwaysdk.system.metadata.MdGraphClass
{
  public final static String CLASS = "com.runwaysdk.system.metadata.MdVertex";
  public static java.lang.String ISABSTRACT = "isAbstract";
  public static java.lang.String SUPERMDVERTEX = "superMdVertex";
  private static final long serialVersionUID = 375453614;
  
  public MdVertexBase()
  {
    super();
  }
  
  public Boolean getIsAbstract()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISABSTRACT));
  }
  
  public void validateIsAbstract()
  {
    this.validateAttribute(ISABSTRACT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsAbstractMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdVertex.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISABSTRACT);
  }
  
  public void setIsAbstract(Boolean value)
  {
    if(value == null)
    {
      setValue(ISABSTRACT, "");
    }
    else
    {
      setValue(ISABSTRACT, java.lang.Boolean.toString(value));
    }
  }
  
  public com.runwaysdk.system.metadata.MdVertex getSuperMdVertex()
  {
    if (getValue(SUPERMDVERTEX).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdVertex.get(getValue(SUPERMDVERTEX));
    }
  }
  
  public String getSuperMdVertexOid()
  {
    return getValue(SUPERMDVERTEX);
  }
  
  public void validateSuperMdVertex()
  {
    this.validateAttribute(SUPERMDVERTEX);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getSuperMdVertexMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdVertex.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(SUPERMDVERTEX);
  }
  
  public void setSuperMdVertex(com.runwaysdk.system.metadata.MdVertex value)
  {
    if(value == null)
    {
      setValue(SUPERMDVERTEX, "");
    }
    else
    {
      setValue(SUPERMDVERTEX, value.getOid());
    }
  }
  
  public void setSuperMdVertexId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(SUPERMDVERTEX, "");
    }
    else
    {
      setValue(SUPERMDVERTEX, oid);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.system.metadata.VertexInheritance addsubVertexClasses(com.runwaysdk.system.metadata.MdVertex mdVertex)
  {
    return (com.runwaysdk.system.metadata.VertexInheritance) addChild(mdVertex, com.runwaysdk.system.metadata.VertexInheritance.CLASS);
  }
  
  public void removesubVertexClasses(com.runwaysdk.system.metadata.MdVertex mdVertex)
  {
    removeAllChildren(mdVertex, com.runwaysdk.system.metadata.VertexInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdVertex> getAllsubVertexClasses()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdVertex>) getChildren(com.runwaysdk.system.metadata.VertexInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.VertexInheritance> getAllsubVertexClassesRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.VertexInheritance>) getChildRelationships(com.runwaysdk.system.metadata.VertexInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.VertexInheritance getsubVertexClassesRel(com.runwaysdk.system.metadata.MdVertex mdVertex)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.VertexInheritance> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.VertexInheritance>) getRelationshipsWithChild(mdVertex, com.runwaysdk.system.metadata.VertexInheritance.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public com.runwaysdk.system.metadata.VertexInheritance addsuperVertexClass(com.runwaysdk.system.metadata.MdVertex mdVertex)
  {
    return (com.runwaysdk.system.metadata.VertexInheritance) addParent(mdVertex, com.runwaysdk.system.metadata.VertexInheritance.CLASS);
  }
  
  public void removesuperVertexClass(com.runwaysdk.system.metadata.MdVertex mdVertex)
  {
    removeAllParents(mdVertex, com.runwaysdk.system.metadata.VertexInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdVertex> getAllsuperVertexClass()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdVertex>) getParents(com.runwaysdk.system.metadata.VertexInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.VertexInheritance> getAllsuperVertexClassRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.VertexInheritance>) getParentRelationships(com.runwaysdk.system.metadata.VertexInheritance.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.VertexInheritance getsuperVertexClassRel(com.runwaysdk.system.metadata.MdVertex mdVertex)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.VertexInheritance> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.VertexInheritance>) getRelationshipsWithParent(mdVertex, com.runwaysdk.system.metadata.VertexInheritance.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static MdVertex get(String oid)
  {
    return (MdVertex) com.runwaysdk.business.Business.get(oid);
  }
  
  public static MdVertex getByKey(String key)
  {
    return (MdVertex) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static MdVertex lock(java.lang.String oid)
  {
    MdVertex _instance = MdVertex.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static MdVertex unlock(java.lang.String oid)
  {
    MdVertex _instance = MdVertex.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
