/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = -117201012)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MdIndex.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MdIndexBase extends com.runwaysdk.system.metadata.Metadata
{
  public final static String CLASS = "com.runwaysdk.system.metadata.MdIndex";
  public final static java.lang.String ACTIVE = "active";
  public final static java.lang.String DISPLAYLABEL = "displayLabel";
  private com.runwaysdk.business.Struct displayLabel = null;
  
  public final static java.lang.String INDEXNAME = "indexName";
  public final static java.lang.String MDENTITY = "mdEntity";
  public final static java.lang.String UNIQUEVALUE = "uniqueValue";
  private static final long serialVersionUID = -117201012;
  
  public MdIndexBase()
  {
    super();
    displayLabel = super.getStruct("displayLabel");
  }
  
  public Boolean getActive()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ACTIVE));
  }
  
  public void validateActive()
  {
    this.validateAttribute(ACTIVE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getActiveMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdIndex.CLASS);
    return mdClassIF.definesAttribute(ACTIVE);
  }
  
  public void setActive(Boolean value)
  {
    if(value == null)
    {
      setValue(ACTIVE, "");
    }
    else
    {
      setValue(ACTIVE, java.lang.Boolean.toString(value));
    }
  }
  
  public com.runwaysdk.system.metadata.MetadataDisplayLabel getDisplayLabel()
  {
    return (com.runwaysdk.system.metadata.MetadataDisplayLabel) displayLabel;
  }
  
  public void validateDisplayLabel()
  {
    this.validateAttribute(DISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdIndex.CLASS);
    return mdClassIF.definesAttribute(DISPLAYLABEL);
  }
  
  public String getIndexName()
  {
    return getValue(INDEXNAME);
  }
  
  public void validateIndexName()
  {
    this.validateAttribute(INDEXNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIndexNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdIndex.CLASS);
    return mdClassIF.definesAttribute(INDEXNAME);
  }
  
  public com.runwaysdk.system.metadata.MdEntity getMdEntity()
  {
    if (getValue(MDENTITY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdEntity.get(getValue(MDENTITY));
    }
  }
  
  public String getMdEntityId()
  {
    return getValue(MDENTITY);
  }
  
  public void validateMdEntity()
  {
    this.validateAttribute(MDENTITY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getMdEntityMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdIndex.CLASS);
    return mdClassIF.definesAttribute(MDENTITY);
  }
  
  public void setMdEntity(com.runwaysdk.system.metadata.MdEntity value)
  {
    if(value == null)
    {
      setValue(MDENTITY, "");
    }
    else
    {
      setValue(MDENTITY, value.getOid());
    }
  }
  
  public Boolean getUniqueValue()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(UNIQUEVALUE));
  }
  
  public void validateUniqueValue()
  {
    this.validateAttribute(UNIQUEVALUE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getUniqueValueMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdIndex.CLASS);
    return mdClassIF.definesAttribute(UNIQUEVALUE);
  }
  
  public void setUniqueValue(Boolean value)
  {
    if(value == null)
    {
      setValue(UNIQUEVALUE, "");
    }
    else
    {
      setValue(UNIQUEVALUE, java.lang.Boolean.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.system.metadata.IndexAttribute addIndexedAttribute(com.runwaysdk.system.metadata.MdAttributeConcrete mdAttributeConcrete)
  {
    return (com.runwaysdk.system.metadata.IndexAttribute) addChild(mdAttributeConcrete, com.runwaysdk.system.metadata.IndexAttribute.CLASS);
  }
  
  public void removeIndexedAttribute(com.runwaysdk.system.metadata.MdAttributeConcrete mdAttributeConcrete)
  {
    removeAllChildren(mdAttributeConcrete, com.runwaysdk.system.metadata.IndexAttribute.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdAttributeConcrete> getAllIndexedAttribute()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdAttributeConcrete>) getChildren(com.runwaysdk.system.metadata.IndexAttribute.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.IndexAttribute> getAllIndexedAttributeRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.IndexAttribute>) getChildRelationships(com.runwaysdk.system.metadata.IndexAttribute.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.IndexAttribute getIndexedAttributeRel(com.runwaysdk.system.metadata.MdAttributeConcrete mdAttributeConcrete)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.IndexAttribute> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.IndexAttribute>) getRelationshipsWithChild(mdAttributeConcrete, com.runwaysdk.system.metadata.IndexAttribute.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public com.runwaysdk.system.metadata.EntityIndex addEntity(com.runwaysdk.system.metadata.MdEntity mdEntity)
  {
    return (com.runwaysdk.system.metadata.EntityIndex) addParent(mdEntity, com.runwaysdk.system.metadata.EntityIndex.CLASS);
  }
  
  public void removeEntity(com.runwaysdk.system.metadata.MdEntity mdEntity)
  {
    removeAllParents(mdEntity, com.runwaysdk.system.metadata.EntityIndex.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdEntity> getAllEntity()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdEntity>) getParents(com.runwaysdk.system.metadata.EntityIndex.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.EntityIndex> getAllEntityRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.EntityIndex>) getParentRelationships(com.runwaysdk.system.metadata.EntityIndex.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.EntityIndex getEntityRel(com.runwaysdk.system.metadata.MdEntity mdEntity)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.EntityIndex> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.EntityIndex>) getRelationshipsWithParent(mdEntity, com.runwaysdk.system.metadata.EntityIndex.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static MdIndex get(String oid)
  {
    return (MdIndex) com.runwaysdk.business.Business.get(oid);
  }
  
  public static MdIndex getByKey(String key)
  {
    return (MdIndex) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static MdIndex lock(java.lang.String oid)
  {
    MdIndex _instance = MdIndex.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static MdIndex unlock(java.lang.String oid)
  {
    MdIndex _instance = MdIndex.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return this.getClassDisplayLabel();
    }
  }
}
