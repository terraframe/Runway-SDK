/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK GIS(tm).
 *
 * Runway SDK GIS(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK GIS(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK GIS(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.gis.geo;

@com.runwaysdk.business.ClassSignature(hash = -1625522447)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to GeoEntityView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class GeoEntityViewBase extends com.runwaysdk.business.View
{
  public final static String CLASS = "com.runwaysdk.system.gis.geo.GeoEntityView";
  public final static java.lang.String CANCREATECHILDREN = "canCreateChildren";
  public final static java.lang.String GEOENTITYDISPLAYLABEL = "geoEntityDisplayLabel";
  public final static java.lang.String GEOENTITYID = "geoEntityId";
  public final static java.lang.String OID = "oid";
  public final static java.lang.String RELATIONSHIPID = "relationshipId";
  public final static java.lang.String RELATIONSHIPTYPE = "relationshipType";
  public final static java.lang.String UNIVERSALDISPLAYLABEL = "universalDisplayLabel";
  private static final long serialVersionUID = -1625522447;
  
  public GeoEntityViewBase()
  {
    super();
  }
  
  public Boolean getCanCreateChildren()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(CANCREATECHILDREN));
  }
  
  public void validateCanCreateChildren()
  {
    this.validateAttribute(CANCREATECHILDREN);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getCanCreateChildrenMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.gis.geo.GeoEntityView.CLASS);
    return mdClassIF.definesAttribute(CANCREATECHILDREN);
  }
  
  public void setCanCreateChildren(Boolean value)
  {
    if(value == null)
    {
      setValue(CANCREATECHILDREN, "");
    }
    else
    {
      setValue(CANCREATECHILDREN, java.lang.Boolean.toString(value));
    }
  }
  
  public String getGeoEntityDisplayLabel()
  {
    return getValue(GEOENTITYDISPLAYLABEL);
  }
  
  public void validateGeoEntityDisplayLabel()
  {
    this.validateAttribute(GEOENTITYDISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getGeoEntityDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.gis.geo.GeoEntityView.CLASS);
    return mdClassIF.definesAttribute(GEOENTITYDISPLAYLABEL);
  }
  
  public void setGeoEntityDisplayLabel(String value)
  {
    if(value == null)
    {
      setValue(GEOENTITYDISPLAYLABEL, "");
    }
    else
    {
      setValue(GEOENTITYDISPLAYLABEL, value);
    }
  }
  
  public String getGeoEntityId()
  {
    return getValue(GEOENTITYID);
  }
  
  public void validateGeoEntityId()
  {
    this.validateAttribute(GEOENTITYID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getGeoEntityIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.gis.geo.GeoEntityView.CLASS);
    return mdClassIF.definesAttribute(GEOENTITYID);
  }
  
  public void setGeoEntityId(String value)
  {
    if(value == null)
    {
      setValue(GEOENTITYID, "");
    }
    else
    {
      setValue(GEOENTITYID, value);
    }
  }
  
  public String getOid()
  {
    return getValue(OID);
  }
  
  public void validateId()
  {
    this.validateAttribute(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.gis.geo.GeoEntityView.CLASS);
    return mdClassIF.definesAttribute(OID);
  }
  
  public String getRelationshipId()
  {
    return getValue(RELATIONSHIPID);
  }
  
  public void validateRelationshipId()
  {
    this.validateAttribute(RELATIONSHIPID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getRelationshipIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.gis.geo.GeoEntityView.CLASS);
    return mdClassIF.definesAttribute(RELATIONSHIPID);
  }
  
  public void setRelationshipId(String value)
  {
    if(value == null)
    {
      setValue(RELATIONSHIPID, "");
    }
    else
    {
      setValue(RELATIONSHIPID, value);
    }
  }
  
  public String getRelationshipType()
  {
    return getValue(RELATIONSHIPTYPE);
  }
  
  public void validateRelationshipType()
  {
    this.validateAttribute(RELATIONSHIPTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getRelationshipTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.gis.geo.GeoEntityView.CLASS);
    return mdClassIF.definesAttribute(RELATIONSHIPTYPE);
  }
  
  public void setRelationshipType(String value)
  {
    if(value == null)
    {
      setValue(RELATIONSHIPTYPE, "");
    }
    else
    {
      setValue(RELATIONSHIPTYPE, value);
    }
  }
  
  public String getUniversalDisplayLabel()
  {
    return getValue(UNIVERSALDISPLAYLABEL);
  }
  
  public void validateUniversalDisplayLabel()
  {
    this.validateAttribute(UNIVERSALDISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getUniversalDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.gis.geo.GeoEntityView.CLASS);
    return mdClassIF.definesAttribute(UNIVERSALDISPLAYLABEL);
  }
  
  public void setUniversalDisplayLabel(String value)
  {
    if(value == null)
    {
      setValue(UNIVERSALDISPLAYLABEL, "");
    }
    else
    {
      setValue(UNIVERSALDISPLAYLABEL, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static GeoEntityView get(String oid)
  {
    return (GeoEntityView) com.runwaysdk.business.View.get(oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
