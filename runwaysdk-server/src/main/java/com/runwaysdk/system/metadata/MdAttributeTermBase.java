package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = 722910850)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MdAttributeTerm.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MdAttributeTermBase extends com.runwaysdk.system.metadata.MdAttributeReference
{
  public final static String CLASS = "com.runwaysdk.system.metadata.MdAttributeTerm";
  private static final long serialVersionUID = 722910850;
  
  public MdAttributeTermBase()
  {
    super();
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot addGeoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntity geoEntity)
  {
    return (com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot) addChild(geoEntity, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
  }
  
  public void removeGeoEntityTermAttributeRoots(com.runwaysdk.system.gis.geo.GeoEntity geoEntity)
  {
    removeAllChildren(geoEntity, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.GeoEntity> getAllGeoEntityTermAttributeRoots()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.GeoEntity>) getChildren(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot> getAllGeoEntityTermAttributeRootsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot>) getChildRelationships(com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot> getGeoEntityTermAttributeRootsRel(com.runwaysdk.system.gis.geo.GeoEntity geoEntity)
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot>) getRelationshipsWithChild(geoEntity, com.runwaysdk.system.gis.geo.GeoEntityTermAttributeRoot.CLASS);
  }
  
  public com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot addSynonymTermAttributeRoots(com.runwaysdk.system.gis.geo.Synonym synonym)
  {
    return (com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot) addChild(synonym, com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);
  }
  
  public void removeSynonymTermAttributeRoots(com.runwaysdk.system.gis.geo.Synonym synonym)
  {
    removeAllChildren(synonym, com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.Synonym> getAllSynonymTermAttributeRoots()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.Synonym>) getChildren(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot> getAllSynonymTermAttributeRootsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot>) getChildRelationships(com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot> getSynonymTermAttributeRootsRel(com.runwaysdk.system.gis.geo.Synonym synonym)
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot>) getRelationshipsWithChild(synonym, com.runwaysdk.system.gis.geo.SynonymTermAttributeRoot.CLASS);
  }
  
  public com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot addUniversalTermAttributeRoots(com.runwaysdk.system.gis.geo.Universal universal)
  {
    return (com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot) addChild(universal, com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);
  }
  
  public void removeUniversalTermAttributeRoots(com.runwaysdk.system.gis.geo.Universal universal)
  {
    removeAllChildren(universal, com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.Universal> getAllUniversalTermAttributeRoots()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.Universal>) getChildren(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot> getAllUniversalTermAttributeRootsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot>) getChildRelationships(com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot> getUniversalTermAttributeRootsRel(com.runwaysdk.system.gis.geo.Universal universal)
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot>) getRelationshipsWithChild(universal, com.runwaysdk.system.gis.geo.UniversalTermAttributeRoot.CLASS);
  }
  
  public static MdAttributeTerm get(String oid)
  {
    return (MdAttributeTerm) com.runwaysdk.business.Business.get(oid);
  }
  
  public static MdAttributeTerm getByKey(String key)
  {
    return (MdAttributeTerm) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static MdAttributeTerm lock(java.lang.String oid)
  {
    MdAttributeTerm _instance = MdAttributeTerm.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static MdAttributeTerm unlock(java.lang.String oid)
  {
    MdAttributeTerm _instance = MdAttributeTerm.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
