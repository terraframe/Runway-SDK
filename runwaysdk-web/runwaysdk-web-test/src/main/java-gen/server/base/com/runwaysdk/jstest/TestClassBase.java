/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.jstest;

@com.runwaysdk.business.ClassSignature(hash = -909435333)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to TestClass.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class TestClassBase extends com.runwaysdk.business.Business implements com.runwaysdk.generation.loader.
{
  public final static String CLASS = "com.runwaysdk.jstest.TestClass";
  public static java.lang.String CELLPHONE = "cellPhone";
  private com.runwaysdk.business.Struct cellPhone = null;
  
  public static java.lang.String CREATEDATE = "createDate";
  public static java.lang.String CREATEDBY = "createdBy";
  public static java.lang.String ENTITYDOMAIN = "entityDomain";
  public static java.lang.String HOMEPHONE = "homePhone";
  private com.runwaysdk.business.Struct homePhone = null;
  
  public static java.lang.String ID = "oid";
  public static java.lang.String KEYNAME = "keyName";
  public static java.lang.String LASTUPDATEDATE = "lastUpdateDate";
  public static java.lang.String LASTUPDATEDBY = "lastUpdatedBy";
  public static java.lang.String LOCKEDBY = "lockedBy";
  public static java.lang.String MULTIPLESTATE = "multipleState";
  public static java.lang.String OWNER = "owner";
  public static java.lang.String SEQ = "seq";
  public static java.lang.String SINGLESTATE = "singleState";
  public static java.lang.String SITEMASTER = "siteMaster";
  public static java.lang.String TESTBLOB = "testBlob";
  public static java.lang.String TESTBOOLEAN = "testBoolean";
  public static java.lang.String TESTCHARACTER = "testCharacter";
  public static java.lang.String TESTDATE = "testDate";
  public static java.lang.String TESTDATETIME = "testDateTime";
  public static java.lang.String TESTDECIMAL = "testDecimal";
  public static java.lang.String TESTDOUBLE = "testDouble";
  public static java.lang.String TESTFLOAT = "testFloat";
  public static java.lang.String TESTHASH = "testHash";
  public static java.lang.String TESTINTEGER = "testInteger";
  public static java.lang.String TESTLONG = "testLong";
  public static java.lang.String TESTREFERENCEOBJECT = "testReferenceObject";
  public static java.lang.String TESTSYMMETRIC = "testSymmetric";
  public static java.lang.String TESTTEXT = "testText";
  public static java.lang.String TESTTIME = "testTime";
  public static java.lang.String TYPE = "type";
  public static java.lang.String WORKPHONE = "workPhone";
  private com.runwaysdk.business.Struct workPhone = null;
  
  private static final long serialVersionUID = -909435333;
  
  public TestClassBase()
  {
    super();
    cellPhone = super.getStruct("cellPhone");
    homePhone = super.getStruct("homePhone");
    workPhone = super.getStruct("workPhone");
  }
  
  public com.runwaysdk.system.PhoneNumber getCellPhone()
  {
    return (com.runwaysdk.system.PhoneNumber) cellPhone;
  }
  
  public void validateCellPhone()
  {
    this.validateAttribute(CELLPHONE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getCellPhoneMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(CELLPHONE);
  }
  
  public java.util.Date getCreateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(CREATEDATE));
  }
  
  public void validateCreateDate()
  {
    this.validateAttribute(CREATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getCreateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(CREATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getCreatedBy()
  {
    if (getValue(CREATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(CREATEDBY));
    }
  }
  
  public String getCreatedById()
  {
    return getValue(CREATEDBY);
  }
  
  public void validateCreatedBy()
  {
    this.validateAttribute(CREATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getCreatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(CREATEDBY);
  }
  
  public com.runwaysdk.system.metadata.MdDomain getEntityDomain()
  {
    if (getValue(ENTITYDOMAIN).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdDomain.get(getValue(ENTITYDOMAIN));
    }
  }
  
  public String getEntityDomainId()
  {
    return getValue(ENTITYDOMAIN);
  }
  
  public void validateEntityDomain()
  {
    this.validateAttribute(ENTITYDOMAIN);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getEntityDomainMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(ENTITYDOMAIN);
  }
  
  public void setEntityDomain(com.runwaysdk.system.metadata.MdDomain value)
  {
    if(value == null)
    {
      setValue(ENTITYDOMAIN, "");
    }
    else
    {
      setValue(ENTITYDOMAIN, value.getOid());
    }
  }
  
  public com.runwaysdk.system.PhoneNumber getHomePhone()
  {
    return (com.runwaysdk.system.PhoneNumber) homePhone;
  }
  
  public void validateHomePhone()
  {
    this.validateAttribute(HOMEPHONE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getHomePhoneMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(HOMEPHONE);
  }
  
  public String getOid()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getKeyName()
  {
    return getValue(KEYNAME);
  }
  
  public void validateKeyName()
  {
    this.validateAttribute(KEYNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getKeyNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(KEYNAME);
  }
  
  public void setKeyName(String value)
  {
    if(value == null)
    {
      setValue(KEYNAME, "");
    }
    else
    {
      setValue(KEYNAME, value);
    }
  }
  
  public java.util.Date getLastUpdateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(LASTUPDATEDATE));
  }
  
  public void validateLastUpdateDate()
  {
    this.validateAttribute(LASTUPDATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLastUpdateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(LASTUPDATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getLastUpdatedBy()
  {
    if (getValue(LASTUPDATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(LASTUPDATEDBY));
    }
  }
  
  public String getLastUpdatedById()
  {
    return getValue(LASTUPDATEDBY);
  }
  
  public void validateLastUpdatedBy()
  {
    this.validateAttribute(LASTUPDATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLastUpdatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(LASTUPDATEDBY);
  }
  
  public com.runwaysdk.system.Users getLockedBy()
  {
    if (getValue(LOCKEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.Users.get(getValue(LOCKEDBY));
    }
  }
  
  public String getLockedById()
  {
    return getValue(LOCKEDBY);
  }
  
  public void validateLockedBy()
  {
    this.validateAttribute(LOCKEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLockedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(LOCKEDBY);
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<com.runwaysdk.jstest.States> getMultipleState()
  {
    return (java.util.List<com.runwaysdk.jstest.States>) getEnumValues(MULTIPLESTATE);
  }
  
  public void addMultipleState(com.runwaysdk.jstest.States value)
  {
    if(value != null)
    {
      addEnumItem(MULTIPLESTATE, value.getOid());
    }
  }
  
  public void removeMultipleState(com.runwaysdk.jstest.States value)
  {
    if(value != null)
    {
      removeEnumItem(MULTIPLESTATE, value.getOid());
    }
  }
  
  public void clearMultipleState()
  {
    clearEnum(MULTIPLESTATE);
  }
  
  public void validateMultipleState()
  {
    this.validateAttribute(MULTIPLESTATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getMultipleStateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(MULTIPLESTATE);
  }
  
  public com.runwaysdk.system.Actor getOwner()
  {
    if (getValue(OWNER).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.Actor.get(getValue(OWNER));
    }
  }
  
  public String getOwnerId()
  {
    return getValue(OWNER);
  }
  
  public void validateOwner()
  {
    this.validateAttribute(OWNER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getOwnerMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(OWNER);
  }
  
  public void setOwner(com.runwaysdk.system.Actor value)
  {
    if(value == null)
    {
      setValue(OWNER, "");
    }
    else
    {
      setValue(OWNER, value.getOid());
    }
  }
  
  public Long getSeq()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(SEQ));
  }
  
  public void validateSeq()
  {
    this.validateAttribute(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(SEQ);
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<com.runwaysdk.jstest.States> getSingleState()
  {
    return (java.util.List<com.runwaysdk.jstest.States>) getEnumValues(SINGLESTATE);
  }
  
  public void addSingleState(com.runwaysdk.jstest.States value)
  {
    if(value != null)
    {
      addEnumItem(SINGLESTATE, value.getOid());
    }
  }
  
  public void removeSingleState(com.runwaysdk.jstest.States value)
  {
    if(value != null)
    {
      removeEnumItem(SINGLESTATE, value.getOid());
    }
  }
  
  public void clearSingleState()
  {
    clearEnum(SINGLESTATE);
  }
  
  public void validateSingleState()
  {
    this.validateAttribute(SINGLESTATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getSingleStateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(SINGLESTATE);
  }
  
  public String getSiteMaster()
  {
    return getValue(SITEMASTER);
  }
  
  public void validateSiteMaster()
  {
    this.validateAttribute(SITEMASTER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getSiteMasterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(SITEMASTER);
  }
  
  public byte[] getTestBlob()
  {
    return getBlob(TESTBLOB);
  }
  
  public void validateTestBlob()
  {
    this.validateAttribute(TESTBLOB);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestBlobMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(TESTBLOB);
  }
  
  public void setTestBlob(byte[] value)
  {
    if(value == null)
    {
      setValue(TESTBLOB, "");
    }
    else
    {
      setBlob(TESTBLOB, value);
    }
  }
  
  public Boolean getTestBoolean()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(TESTBOOLEAN));
  }
  
  public void validateTestBoolean()
  {
    this.validateAttribute(TESTBOOLEAN);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestBooleanMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(TESTBOOLEAN);
  }
  
  public void setTestBoolean(Boolean value)
  {
    if(value == null)
    {
      setValue(TESTBOOLEAN, "");
    }
    else
    {
      setValue(TESTBOOLEAN, java.lang.Boolean.toString(value));
    }
  }
  
  public String getTestCharacter()
  {
    return getValue(TESTCHARACTER);
  }
  
  public void validateTestCharacter()
  {
    this.validateAttribute(TESTCHARACTER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestCharacterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(TESTCHARACTER);
  }
  
  public void setTestCharacter(String value)
  {
    if(value == null)
    {
      setValue(TESTCHARACTER, "");
    }
    else
    {
      setValue(TESTCHARACTER, value);
    }
  }
  
  public java.util.Date getTestDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(TESTDATE));
  }
  
  public void validateTestDate()
  {
    this.validateAttribute(TESTDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(TESTDATE);
  }
  
  public void setTestDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(TESTDATE, "");
    }
    else
    {
      setValue(TESTDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public java.util.Date getTestDateTime()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(TESTDATETIME));
  }
  
  public void validateTestDateTime()
  {
    this.validateAttribute(TESTDATETIME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestDateTimeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(TESTDATETIME);
  }
  
  public void setTestDateTime(java.util.Date value)
  {
    if(value == null)
    {
      setValue(TESTDATETIME, "");
    }
    else
    {
      setValue(TESTDATETIME, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATETIME_FORMAT).format(value));
    }
  }
  
  public java.math.BigDecimal getTestDecimal()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(TESTDECIMAL));
  }
  
  public void validateTestDecimal()
  {
    this.validateAttribute(TESTDECIMAL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestDecimalMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(TESTDECIMAL);
  }
  
  public void setTestDecimal(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(TESTDECIMAL, "");
    }
    else
    {
      setValue(TESTDECIMAL, value.toString());
    }
  }
  
  public Double getTestDouble()
  {
    return com.runwaysdk.constants.MdAttributeDoubleUtil.getTypeSafeValue(getValue(TESTDOUBLE));
  }
  
  public void validateTestDouble()
  {
    this.validateAttribute(TESTDOUBLE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestDoubleMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(TESTDOUBLE);
  }
  
  public void setTestDouble(Double value)
  {
    if(value == null)
    {
      setValue(TESTDOUBLE, "");
    }
    else
    {
      setValue(TESTDOUBLE, java.lang.Double.toString(value));
    }
  }
  
  public Float getTestFloat()
  {
    return com.runwaysdk.constants.MdAttributeFloatUtil.getTypeSafeValue(getValue(TESTFLOAT));
  }
  
  public void validateTestFloat()
  {
    this.validateAttribute(TESTFLOAT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestFloatMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(TESTFLOAT);
  }
  
  public void setTestFloat(Float value)
  {
    if(value == null)
    {
      setValue(TESTFLOAT, "");
    }
    else
    {
      setValue(TESTFLOAT, java.lang.Float.toString(value));
    }
  }
  
  public boolean testHashEquals(String value)
  {
    return ((com.runwaysdk.dataaccess.AttributeEncryptionIF)com.runwaysdk.business.BusinessFacade.getAttribute(this, "testHash")).encryptionEquals(value, false);
  }
  
  public void validateTestHash()
  {
    this.validateAttribute(TESTHASH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestHashMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(TESTHASH);
  }
  
  public void setTestHash(String value)
  {
    if(value == null)
    {
      setValue(TESTHASH, "");
    }
    else
    {
      setValue(TESTHASH, value);
    }
  }
  
  public Integer getTestInteger()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(TESTINTEGER));
  }
  
  public void validateTestInteger()
  {
    this.validateAttribute(TESTINTEGER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestIntegerMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(TESTINTEGER);
  }
  
  public void setTestInteger(Integer value)
  {
    if(value == null)
    {
      setValue(TESTINTEGER, "");
    }
    else
    {
      setValue(TESTINTEGER, java.lang.Integer.toString(value));
    }
  }
  
  public Long getTestLong()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(TESTLONG));
  }
  
  public void validateTestLong()
  {
    this.validateAttribute(TESTLONG);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestLongMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(TESTLONG);
  }
  
  public void setTestLong(Long value)
  {
    if(value == null)
    {
      setValue(TESTLONG, "");
    }
    else
    {
      setValue(TESTLONG, java.lang.Long.toString(value));
    }
  }
  
  public com.runwaysdk.jstest.RefClass getTestReferenceObject()
  {
    if (getValue(TESTREFERENCEOBJECT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.jstest.RefClass.get(getValue(TESTREFERENCEOBJECT));
    }
  }
  
  public String getTestReferenceObjectId()
  {
    return getValue(TESTREFERENCEOBJECT);
  }
  
  public void validateTestReferenceObject()
  {
    this.validateAttribute(TESTREFERENCEOBJECT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestReferenceObjectMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(TESTREFERENCEOBJECT);
  }
  
  public void setTestReferenceObject(com.runwaysdk.jstest.RefClass value)
  {
    if(value == null)
    {
      setValue(TESTREFERENCEOBJECT, "");
    }
    else
    {
      setValue(TESTREFERENCEOBJECT, value.getOid());
    }
  }
  
  public String getTestSymmetric()
  {
    return getValue(TESTSYMMETRIC);
  }
  
  public void validateTestSymmetric()
  {
    this.validateAttribute(TESTSYMMETRIC);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestSymmetricMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(TESTSYMMETRIC);
  }
  
  public void setTestSymmetric(String value)
  {
    if(value == null)
    {
      setValue(TESTSYMMETRIC, "");
    }
    else
    {
      setValue(TESTSYMMETRIC, value);
    }
  }
  
  public String getTestText()
  {
    return getValue(TESTTEXT);
  }
  
  public void validateTestText()
  {
    this.validateAttribute(TESTTEXT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestTextMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(TESTTEXT);
  }
  
  public void setTestText(String value)
  {
    if(value == null)
    {
      setValue(TESTTEXT, "");
    }
    else
    {
      setValue(TESTTEXT, value);
    }
  }
  
  public java.util.Date getTestTime()
  {
    return com.runwaysdk.constants.MdAttributeTimeUtil.getTypeSafeValue(getValue(TESTTIME));
  }
  
  public void validateTestTime()
  {
    this.validateAttribute(TESTTIME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestTimeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(TESTTIME);
  }
  
  public void setTestTime(java.util.Date value)
  {
    if(value == null)
    {
      setValue(TESTTIME, "");
    }
    else
    {
      setValue(TESTTIME, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.TIME_FORMAT).format(value));
    }
  }
  
  public String getType()
  {
    return getValue(TYPE);
  }
  
  public void validateType()
  {
    this.validateAttribute(TYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(TYPE);
  }
  
  public com.runwaysdk.system.PhoneNumber getWorkPhone()
  {
    return (com.runwaysdk.system.PhoneNumber) workPhone;
  }
  
  public void validateWorkPhone()
  {
    this.validateAttribute(WORKPHONE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getWorkPhoneMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.jstest.TestClass.CLASS);
    return mdClassIF.definesAttribute(WORKPHONE);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static TestClassQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    TestClassQuery query = new TestClassQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public com.runwaysdk.jstest.Befriends addRefClass(com.runwaysdk.jstest.RefClass refClass)
  {
    return (com.runwaysdk.jstest.Befriends) addChild(refClass, com.runwaysdk.jstest.Befriends.CLASS);
  }
  
  public void removeRefClass(com.runwaysdk.jstest.RefClass refClass)
  {
    removeAllChildren(refClass, com.runwaysdk.jstest.Befriends.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.jstest.RefClass> getAllRefClass()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.jstest.RefClass>) getChildren(com.runwaysdk.jstest.Befriends.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.jstest.Befriends> getAllRefClassRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.jstest.Befriends>) getChildRelationships(com.runwaysdk.jstest.Befriends.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.jstest.Befriends> getRefClassRel(com.runwaysdk.jstest.RefClass refClass)
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.jstest.Befriends>) getRelationshipsWithChild(refClass, com.runwaysdk.jstest.Befriends.CLASS);
  }
  
  public static TestClass get(String oid)
  {
    return (TestClass) com.runwaysdk.business.Business.get(oid);
  }
  
  public static TestClass getByKey(String key)
  {
    return (TestClass) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public java.lang.Boolean compareIntegers(java.lang.Integer num1, java.lang.Integer num2)
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.jstest.TestClass.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.lang.Boolean compareIntegers(java.lang.String oid, java.lang.Integer num1, java.lang.Integer num2)
  {
    TestClass _instance = TestClass.get(oid);
    return _instance.compareIntegers(num1, num2);
  }
  
  public com.runwaysdk.jstest.TestClass[] createInstances(java.lang.Integer num)
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.jstest.TestClass.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final com.runwaysdk.jstest.TestClass[] createInstances(java.lang.String oid, java.lang.Integer num)
  {
    TestClass _instance = TestClass.get(oid);
    return _instance.createInstances(num);
  }
  
  public static java.lang.Integer doubleAnInteger(java.lang.Integer num)
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.jstest.TestClass.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public void instanceForceException()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.jstest.TestClass.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void instanceForceException(java.lang.String oid)
  {
    TestClass _instance = TestClass.get(oid);
    _instance.instanceForceException();
  }
  
  public void instanceForceException1()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.jstest.TestClass.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void instanceForceException1(java.lang.String oid)
  {
    TestClass _instance = TestClass.get(oid);
    _instance.instanceForceException1();
  }
  
  public void instanceForceException2()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.jstest.TestClass.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void instanceForceException2(java.lang.String oid)
  {
    TestClass _instance = TestClass.get(oid);
    _instance.instanceForceException2();
  }
  
  public void instanceForceException3()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.jstest.TestClass.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void instanceForceException3(java.lang.String oid)
  {
    TestClass _instance = TestClass.get(oid);
    _instance.instanceForceException3();
  }
  
  public java.lang.Integer instanceForceInformation()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.jstest.TestClass.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.lang.Integer instanceForceInformation(java.lang.String oid)
  {
    TestClass _instance = TestClass.get(oid);
    return _instance.instanceForceInformation();
  }
  
  public java.lang.Integer instanceForceMultipleInformations()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.jstest.TestClass.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.lang.Integer instanceForceMultipleInformations(java.lang.String oid)
  {
    TestClass _instance = TestClass.get(oid);
    return _instance.instanceForceMultipleInformations();
  }
  
  public void instanceForceMultipleProblems()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.jstest.TestClass.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void instanceForceMultipleProblems(java.lang.String oid)
  {
    TestClass _instance = TestClass.get(oid);
    _instance.instanceForceMultipleProblems();
  }
  
  public java.lang.Integer instanceForceMultipleWarnings()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.jstest.TestClass.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.lang.Integer instanceForceMultipleWarnings(java.lang.String oid)
  {
    TestClass _instance = TestClass.get(oid);
    return _instance.instanceForceMultipleWarnings();
  }
  
  public void instanceForceProblem()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.jstest.TestClass.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void instanceForceProblem(java.lang.String oid)
  {
    TestClass _instance = TestClass.get(oid);
    _instance.instanceForceProblem();
  }
  
  public java.lang.Integer instanceForceWarning()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.jstest.TestClass.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.lang.Integer instanceForceWarning(java.lang.String oid)
  {
    TestClass _instance = TestClass.get(oid);
    return _instance.instanceForceWarning();
  }
  
  public void instanceForceWarningVoid()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.jstest.TestClass.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void instanceForceWarningVoid(java.lang.String oid)
  {
    TestClass _instance = TestClass.get(oid);
    _instance.instanceForceWarningVoid();
  }
  
  public static TestClass lock(java.lang.String oid)
  {
    TestClass _instance = TestClass.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static TestClass unlock(java.lang.String oid)
  {
    TestClass _instance = TestClass.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
