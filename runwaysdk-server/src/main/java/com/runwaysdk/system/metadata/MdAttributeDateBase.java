/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = 1380330026)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MdAttributeDate.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MdAttributeDateBase extends com.runwaysdk.system.metadata.MdAttributeMoment
{
  public final static String CLASS = "com.runwaysdk.system.metadata.MdAttributeDate";
  public static java.lang.String AFTERTODAYEXCLUSIVE = "afterTodayExclusive";
  public static java.lang.String AFTERTODAYINCLUSIVE = "afterTodayInclusive";
  public static java.lang.String BEFORETODAYEXCLUSIVE = "beforeTodayExclusive";
  public static java.lang.String BEFORETODAYINCLUSIVE = "beforeTodayInclusive";
  public static java.lang.String DEFAULTVALUE = "defaultValue";
  public static java.lang.String ENDDATE = "endDate";
  public static java.lang.String STARTDATE = "startDate";
  private static final long serialVersionUID = 1380330026;
  
  public MdAttributeDateBase()
  {
    super();
  }
  
  public Boolean getAfterTodayExclusive()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(AFTERTODAYEXCLUSIVE));
  }
  
  public void validateAfterTodayExclusive()
  {
    this.validateAttribute(AFTERTODAYEXCLUSIVE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getAfterTodayExclusiveMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeDate.CLASS);
    return mdClassIF.definesAttribute(AFTERTODAYEXCLUSIVE);
  }
  
  public void setAfterTodayExclusive(Boolean value)
  {
    if(value == null)
    {
      setValue(AFTERTODAYEXCLUSIVE, "");
    }
    else
    {
      setValue(AFTERTODAYEXCLUSIVE, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getAfterTodayInclusive()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(AFTERTODAYINCLUSIVE));
  }
  
  public void validateAfterTodayInclusive()
  {
    this.validateAttribute(AFTERTODAYINCLUSIVE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getAfterTodayInclusiveMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeDate.CLASS);
    return mdClassIF.definesAttribute(AFTERTODAYINCLUSIVE);
  }
  
  public void setAfterTodayInclusive(Boolean value)
  {
    if(value == null)
    {
      setValue(AFTERTODAYINCLUSIVE, "");
    }
    else
    {
      setValue(AFTERTODAYINCLUSIVE, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getBeforeTodayExclusive()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(BEFORETODAYEXCLUSIVE));
  }
  
  public void validateBeforeTodayExclusive()
  {
    this.validateAttribute(BEFORETODAYEXCLUSIVE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getBeforeTodayExclusiveMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeDate.CLASS);
    return mdClassIF.definesAttribute(BEFORETODAYEXCLUSIVE);
  }
  
  public void setBeforeTodayExclusive(Boolean value)
  {
    if(value == null)
    {
      setValue(BEFORETODAYEXCLUSIVE, "");
    }
    else
    {
      setValue(BEFORETODAYEXCLUSIVE, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getBeforeTodayInclusive()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(BEFORETODAYINCLUSIVE));
  }
  
  public void validateBeforeTodayInclusive()
  {
    this.validateAttribute(BEFORETODAYINCLUSIVE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getBeforeTodayInclusiveMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeDate.CLASS);
    return mdClassIF.definesAttribute(BEFORETODAYINCLUSIVE);
  }
  
  public void setBeforeTodayInclusive(Boolean value)
  {
    if(value == null)
    {
      setValue(BEFORETODAYINCLUSIVE, "");
    }
    else
    {
      setValue(BEFORETODAYINCLUSIVE, java.lang.Boolean.toString(value));
    }
  }
  
  public java.util.Date getDefaultValue()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(DEFAULTVALUE));
  }
  
  public void validateDefaultValue()
  {
    this.validateAttribute(DEFAULTVALUE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDefaultValueMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeDate.CLASS);
    return mdClassIF.definesAttribute(DEFAULTVALUE);
  }
  
  public void setDefaultValue(java.util.Date value)
  {
    if(value == null)
    {
      setValue(DEFAULTVALUE, "");
    }
    else
    {
      setValue(DEFAULTVALUE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public java.util.Date getEndDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(ENDDATE));
  }
  
  public void validateEndDate()
  {
    this.validateAttribute(ENDDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getEndDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeDate.CLASS);
    return mdClassIF.definesAttribute(ENDDATE);
  }
  
  public void setEndDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(ENDDATE, "");
    }
    else
    {
      setValue(ENDDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public java.util.Date getStartDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(STARTDATE));
  }
  
  public void validateStartDate()
  {
    this.validateAttribute(STARTDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getStartDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeDate.CLASS);
    return mdClassIF.definesAttribute(STARTDATE);
  }
  
  public void setStartDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(STARTDATE, "");
    }
    else
    {
      setValue(STARTDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static MdAttributeDate get(String oid)
  {
    return (MdAttributeDate) com.runwaysdk.business.Business.get(oid);
  }
  
  public static MdAttributeDate getByKey(String key)
  {
    return (MdAttributeDate) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static MdAttributeDate lock(java.lang.String oid)
  {
    MdAttributeDate _instance = MdAttributeDate.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static MdAttributeDate unlock(java.lang.String oid)
  {
    MdAttributeDate _instance = MdAttributeDate.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
