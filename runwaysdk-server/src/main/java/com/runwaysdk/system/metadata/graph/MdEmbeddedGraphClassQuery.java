package com.runwaysdk.system.metadata.graph;

@com.runwaysdk.business.ClassSignature(hash = -1384862486)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MdEmbeddedGraphClass.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class MdEmbeddedGraphClassQuery extends com.runwaysdk.system.metadata.MdGraphClassQuery

{

  public MdEmbeddedGraphClassQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
    super(componentQueryFactory);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public MdEmbeddedGraphClassQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
    super(valueQuery);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass.CLASS;
  }
  public com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF getSuperMdEmbedded()
  {
    return getSuperMdEmbedded(null);

  }
 
  public com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF getSuperMdEmbedded(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass.SUPERMDEMBEDDED);

    return (com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass.SUPERMDEMBEDDED, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF getSuperMdEmbedded(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass.SUPERMDEMBEDDED);

    return (com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass.SUPERMDEMBEDDED, mdAttributeIF, this, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass.SUPERMDEMBEDDED)) 
    {
       return new com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      return super.referenceFactory(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends MdEmbeddedGraphClass> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<MdEmbeddedGraphClass>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition superEmbeddedClass()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_superEmbeddedClass()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition superEmbeddedClass(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    return this.getBusinessQuery().isChildIn(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_superEmbeddedClass(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdEmbeddedGraphClassQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdEmbeddedGraphClassQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    embeddedGraphInheritanceQuery.AND(embeddedGraphInheritanceQuery.hasParent(mdEmbeddedGraphClassQuery));
    return this.getBusinessQuery().isChildIn(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    embeddedGraphInheritanceQuery.AND(embeddedGraphInheritanceQuery.hasParent(mdEmbeddedGraphClassQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(embeddedGraphInheritanceQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_superEmbeddedClass()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superEmbeddedClass()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_superEmbeddedClass(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    return this.getBusinessQuery().isNotChildIn(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superEmbeddedClass(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdEmbeddedGraphClassQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdEmbeddedGraphClassQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    embeddedGraphInheritanceQuery.AND(embeddedGraphInheritanceQuery.hasParent(mdEmbeddedGraphClassQuery));
    return this.getBusinessQuery().isNotChildIn(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    embeddedGraphInheritanceQuery.AND(embeddedGraphInheritanceQuery.hasParent(mdEmbeddedGraphClassQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(embeddedGraphInheritanceQuery);
  }


  public com.runwaysdk.query.Condition subEmbeddedClasses()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_subEmbeddedClasses()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition subEmbeddedClasses(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    return this.getBusinessQuery().isParentIn(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdEmbeddedGraphClassQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdEmbeddedGraphClassQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    embeddedGraphInheritanceQuery.AND(embeddedGraphInheritanceQuery.hasChild(mdEmbeddedGraphClassQuery));
    return this.getBusinessQuery().isParentIn(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    embeddedGraphInheritanceQuery.AND(embeddedGraphInheritanceQuery.hasChild(mdEmbeddedGraphClassQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(embeddedGraphInheritanceQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_subEmbeddedClasses()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subEmbeddedClasses()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    return this.getBusinessQuery().isNotParentIn(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdEmbeddedGraphClassQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdEmbeddedGraphClassQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    embeddedGraphInheritanceQuery.AND(embeddedGraphInheritanceQuery.hasChild(mdEmbeddedGraphClassQuery));
    return this.getBusinessQuery().isNotParentIn(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    embeddedGraphInheritanceQuery.AND(embeddedGraphInheritanceQuery.hasChild(mdEmbeddedGraphClassQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(embeddedGraphInheritanceQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface MdEmbeddedGraphClassQueryReferenceIF extends com.runwaysdk.system.metadata.MdGraphClassQuery.MdGraphClassQueryReferenceIF
  {

    public com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF getSuperMdEmbedded();
    public com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF getSuperMdEmbedded(String alias);
    public com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF getSuperMdEmbedded(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass mdEmbeddedGraphClass);

    public com.runwaysdk.query.BasicCondition NE(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass mdEmbeddedGraphClass);


  public com.runwaysdk.query.Condition subEmbeddedClasses();

  public com.runwaysdk.query.Condition subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery);

  public com.runwaysdk.query.Condition subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery);


  public com.runwaysdk.query.Condition SUBSELECT_subEmbeddedClasses();

  public com.runwaysdk.query.Condition SUBSELECT_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery);

  public com.runwaysdk.query.Condition SUBSELECT_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery);


  public com.runwaysdk.query.Condition NOT_IN_subEmbeddedClasses();

  public com.runwaysdk.query.Condition NOT_IN_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery);

  public com.runwaysdk.query.Condition NOT_IN_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subEmbeddedClasses();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery);


  public com.runwaysdk.query.Condition superEmbeddedClass();
  public com.runwaysdk.query.Condition superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery);

  public com.runwaysdk.query.Condition superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery);


  public com.runwaysdk.query.Condition SUBSELECT_superEmbeddedClass();
  public com.runwaysdk.query.Condition SUBSELECT_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery);

  public com.runwaysdk.query.Condition SUBSELECT_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery);


  public com.runwaysdk.query.Condition NOT_IN_superEmbeddedClass();
  public com.runwaysdk.query.Condition NOT_IN_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery);

  public com.runwaysdk.query.Condition NOT_IN_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superEmbeddedClass();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class MdEmbeddedGraphClassQueryReference extends com.runwaysdk.system.metadata.MdGraphClassQuery.MdGraphClassQueryReference
 implements MdEmbeddedGraphClassQueryReferenceIF

  {

  public MdEmbeddedGraphClassQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass mdEmbeddedGraphClass)
    {
      if(mdEmbeddedGraphClass == null) return this.EQ((java.lang.String)null);
      return this.EQ(mdEmbeddedGraphClass.getOid());
    }

    public com.runwaysdk.query.BasicCondition NE(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass mdEmbeddedGraphClass)
    {
      if(mdEmbeddedGraphClass == null) return this.NE((java.lang.String)null);
      return this.NE(mdEmbeddedGraphClass.getOid());
    }

  public com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF getSuperMdEmbedded()
  {
    return getSuperMdEmbedded(null);

  }
 
  public com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF getSuperMdEmbedded(String alias)
  {
    return (com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF)this.get(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass.SUPERMDEMBEDDED, alias, null);

  }
 
  public com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF getSuperMdEmbedded(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF)this.get(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass.SUPERMDEMBEDDED,  alias, displayLabel);

  }

  public com.runwaysdk.query.Condition subEmbeddedClasses()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_subEmbeddedClasses()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition subEmbeddedClasses(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    return this.isParentIn(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    return this.isParentIn_SUBSELECT(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdEmbeddedGraphClassQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdEmbeddedGraphClassQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    embeddedGraphInheritanceQuery.AND(embeddedGraphInheritanceQuery.hasChild(mdEmbeddedGraphClassQuery));
    return this.isParentIn(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    embeddedGraphInheritanceQuery.AND(embeddedGraphInheritanceQuery.hasChild(mdEmbeddedGraphClassQuery));
    return this.isParentIn_SUBSELECT(embeddedGraphInheritanceQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_subEmbeddedClasses()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subEmbeddedClasses()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    return this.isNotParentIn(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    return this.isNotParentIn_SUBSELECT(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdEmbeddedGraphClassQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mdEmbeddedGraphClassQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    embeddedGraphInheritanceQuery.AND(embeddedGraphInheritanceQuery.hasChild(mdEmbeddedGraphClassQuery));
    return this.isNotParentIn(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subEmbeddedClasses(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    embeddedGraphInheritanceQuery.AND(embeddedGraphInheritanceQuery.hasChild(mdEmbeddedGraphClassQuery));
    return this.isNotParentIn_SUBSELECT(embeddedGraphInheritanceQuery);
  }


  public com.runwaysdk.query.Condition superEmbeddedClass()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_superEmbeddedClass()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition superEmbeddedClass(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    return this.isChildIn(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_superEmbeddedClass(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    return this.isChildIn_SUBSELECT(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdEmbeddedGraphClassQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdEmbeddedGraphClassQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    embeddedGraphInheritanceQuery.AND(embeddedGraphInheritanceQuery.hasParent(mdEmbeddedGraphClassQuery));
    return this.isChildIn(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    embeddedGraphInheritanceQuery.AND(embeddedGraphInheritanceQuery.hasParent(mdEmbeddedGraphClassQuery));
    return this.isChildIn_SUBSELECT(embeddedGraphInheritanceQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_superEmbeddedClass()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superEmbeddedClass()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_superEmbeddedClass(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    return this.isNotChildIn(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superEmbeddedClass(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    return this.isNotChildIn_SUBSELECT(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdEmbeddedGraphClassQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritance.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdEmbeddedGraphClassQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    embeddedGraphInheritanceQuery.AND(embeddedGraphInheritanceQuery.hasParent(mdEmbeddedGraphClassQuery));
    return this.isNotChildIn(embeddedGraphInheritanceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superEmbeddedClass(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery mdEmbeddedGraphClassQuery, com.runwaysdk.system.metadata.graph.EmbeddedGraphInheritanceQuery embeddedGraphInheritanceQuery)
  {
    embeddedGraphInheritanceQuery.AND(embeddedGraphInheritanceQuery.hasParent(mdEmbeddedGraphClassQuery));
    return this.isNotChildIn_SUBSELECT(embeddedGraphInheritanceQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass.SUPERMDEMBEDDED)) 
    {
       return new com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      return super.referenceFactory(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface MdEmbeddedGraphClassQueryMultiReferenceIF extends com.runwaysdk.system.metadata.MdGraphClassQuery.MdGraphClassQueryMultiReferenceIF
  {

    public com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF getSuperMdEmbedded();
    public com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF getSuperMdEmbedded(String alias);
    public com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF getSuperMdEmbedded(String alias, String displayLabel);

    public com.runwaysdk.query.Condition containsAny(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass ... mdEmbeddedGraphClass);
    public com.runwaysdk.query.Condition notContainsAny(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass ... mdEmbeddedGraphClass);
    public com.runwaysdk.query.Condition containsAll(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass ... mdEmbeddedGraphClass);
    public com.runwaysdk.query.Condition notContainsAll(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass ... mdEmbeddedGraphClass);
    public com.runwaysdk.query.Condition containsExactly(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass ... mdEmbeddedGraphClass);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class MdEmbeddedGraphClassQueryMultiReference extends com.runwaysdk.system.metadata.MdGraphClassQuery.MdGraphClassQueryMultiReference
 implements MdEmbeddedGraphClassQueryMultiReferenceIF

  {

  public MdEmbeddedGraphClassQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass ... mdEmbeddedGraphClass)  {

      String[] itemIdArray = new String[mdEmbeddedGraphClass.length]; 

      for (int i=0; i<mdEmbeddedGraphClass.length; i++)
      {
        itemIdArray[i] = mdEmbeddedGraphClass[i].getOid();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass ... mdEmbeddedGraphClass)  {

      String[] itemIdArray = new String[mdEmbeddedGraphClass.length]; 

      for (int i=0; i<mdEmbeddedGraphClass.length; i++)
      {
        itemIdArray[i] = mdEmbeddedGraphClass[i].getOid();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass ... mdEmbeddedGraphClass)  {

      String[] itemIdArray = new String[mdEmbeddedGraphClass.length]; 

      for (int i=0; i<mdEmbeddedGraphClass.length; i++)
      {
        itemIdArray[i] = mdEmbeddedGraphClass[i].getOid();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass ... mdEmbeddedGraphClass)  {

      String[] itemIdArray = new String[mdEmbeddedGraphClass.length]; 

      for (int i=0; i<mdEmbeddedGraphClass.length; i++)
      {
        itemIdArray[i] = mdEmbeddedGraphClass[i].getOid();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass ... mdEmbeddedGraphClass)  {

      String[] itemIdArray = new String[mdEmbeddedGraphClass.length]; 

      for (int i=0; i<mdEmbeddedGraphClass.length; i++)
      {
        itemIdArray[i] = mdEmbeddedGraphClass[i].getOid();
      }

      return this.containsExactly(itemIdArray);
  }
  public com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF getSuperMdEmbedded()
  {
    return getSuperMdEmbedded(null);

  }
 
  public com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF getSuperMdEmbedded(String alias)
  {
    return (com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF)this.get(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass.SUPERMDEMBEDDED, alias, null);

  }
 
  public com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF getSuperMdEmbedded(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReferenceIF)this.get(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass.SUPERMDEMBEDDED,  alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClass.SUPERMDEMBEDDED)) 
    {
       return new com.runwaysdk.system.metadata.graph.MdEmbeddedGraphClassQuery.MdEmbeddedGraphClassQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      return super.referenceFactory(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
  }

  }
}
