/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = 1268533967)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MdEnumeration.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MdEnumerationBase extends com.runwaysdk.system.metadata.MdType
{
  public final static String CLASS = "com.runwaysdk.system.metadata.MdEnumeration";
  public static java.lang.String INCLUDEALL = "includeAll";
  public static java.lang.String MASTERMDBUSINESS = "masterMdBusiness";
  public static java.lang.String TABLENAME = "tableName";
  private static final long serialVersionUID = 1268533967;
  
  public MdEnumerationBase()
  {
    super();
  }
  
  public Boolean getIncludeAll()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(INCLUDEALL));
  }
  
  public void validateIncludeAll()
  {
    this.validateAttribute(INCLUDEALL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIncludeAllMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdEnumeration.CLASS);
    return mdClassIF.definesAttribute(INCLUDEALL);
  }
  
  public void setIncludeAll(Boolean value)
  {
    if(value == null)
    {
      setValue(INCLUDEALL, "");
    }
    else
    {
      setValue(INCLUDEALL, java.lang.Boolean.toString(value));
    }
  }
  
  public com.runwaysdk.system.metadata.MdBusiness getMasterMdBusiness()
  {
    if (getValue(MASTERMDBUSINESS).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdBusiness.get(getValue(MASTERMDBUSINESS));
    }
  }
  
  public String getMasterMdBusinessId()
  {
    return getValue(MASTERMDBUSINESS);
  }
  
  public void validateMasterMdBusiness()
  {
    this.validateAttribute(MASTERMDBUSINESS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getMasterMdBusinessMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdEnumeration.CLASS);
    return mdClassIF.definesAttribute(MASTERMDBUSINESS);
  }
  
  public void setMasterMdBusiness(com.runwaysdk.system.metadata.MdBusiness value)
  {
    if(value == null)
    {
      setValue(MASTERMDBUSINESS, "");
    }
    else
    {
      setValue(MASTERMDBUSINESS, value.getOid());
    }
  }
  
  public String getTableName()
  {
    return getValue(TABLENAME);
  }
  
  public void validateTableName()
  {
    this.validateAttribute(TABLENAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTableNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdEnumeration.CLASS);
    return mdClassIF.definesAttribute(TABLENAME);
  }
  
  public void setTableName(String value)
  {
    if(value == null)
    {
      setValue(TABLENAME, "");
    }
    else
    {
      setValue(TABLENAME, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.system.metadata.EnumerationAttributeItem addItem(com.runwaysdk.system.EnumerationMaster enumerationMaster)
  {
    return (com.runwaysdk.system.metadata.EnumerationAttributeItem) addChild(enumerationMaster, com.runwaysdk.system.metadata.EnumerationAttributeItem.CLASS);
  }
  
  public void removeItem(com.runwaysdk.system.EnumerationMaster enumerationMaster)
  {
    removeAllChildren(enumerationMaster, com.runwaysdk.system.metadata.EnumerationAttributeItem.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.EnumerationMaster> getAllItem()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.EnumerationMaster>) getChildren(com.runwaysdk.system.metadata.EnumerationAttributeItem.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.EnumerationAttributeItem> getAllItemRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.EnumerationAttributeItem>) getChildRelationships(com.runwaysdk.system.metadata.EnumerationAttributeItem.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.EnumerationAttributeItem getItemRel(com.runwaysdk.system.EnumerationMaster enumerationMaster)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.EnumerationAttributeItem> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.EnumerationAttributeItem>) getRelationshipsWithChild(enumerationMaster, com.runwaysdk.system.metadata.EnumerationAttributeItem.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public com.runwaysdk.system.metadata.EnumerationAttribute addMasterClass(com.runwaysdk.system.metadata.MdBusiness mdBusiness)
  {
    return (com.runwaysdk.system.metadata.EnumerationAttribute) addParent(mdBusiness, com.runwaysdk.system.metadata.EnumerationAttribute.CLASS);
  }
  
  public void removeMasterClass(com.runwaysdk.system.metadata.MdBusiness mdBusiness)
  {
    removeAllParents(mdBusiness, com.runwaysdk.system.metadata.EnumerationAttribute.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdBusiness> getAllMasterClass()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdBusiness>) getParents(com.runwaysdk.system.metadata.EnumerationAttribute.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.EnumerationAttribute> getAllMasterClassRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.EnumerationAttribute>) getParentRelationships(com.runwaysdk.system.metadata.EnumerationAttribute.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.EnumerationAttribute getMasterClassRel(com.runwaysdk.system.metadata.MdBusiness mdBusiness)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.EnumerationAttribute> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.EnumerationAttribute>) getRelationshipsWithParent(mdBusiness, com.runwaysdk.system.metadata.EnumerationAttribute.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static MdEnumeration get(String oid)
  {
    return (MdEnumeration) com.runwaysdk.business.Business.get(oid);
  }
  
  public static MdEnumeration getByKey(String key)
  {
    return (MdEnumeration) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static MdEnumeration lock(java.lang.String oid)
  {
    MdEnumeration _instance = MdEnumeration.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static MdEnumeration unlock(java.lang.String oid)
  {
    MdEnumeration _instance = MdEnumeration.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
