/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.dataaccess.attributes.entity;

import java.util.Collection;

import com.runwaysdk.dataaccess.AttributeIF;
import com.runwaysdk.dataaccess.AttributeStructIF;
import com.runwaysdk.dataaccess.EntityDAO;
import com.runwaysdk.dataaccess.MdAttributeConcreteDAOIF;
import com.runwaysdk.dataaccess.MdStructDAOIF;
import com.runwaysdk.dataaccess.ProgrammingErrorException;
import com.runwaysdk.dataaccess.StaleEntityException;
import com.runwaysdk.dataaccess.StructDAO;
import com.runwaysdk.dataaccess.attributes.AttributeSet;
import com.runwaysdk.dataaccess.attributes.AttributeTypeException;
import com.runwaysdk.dataaccess.metadata.DeleteContext;

/**
 * @author nathan
 * 
 *         TODO To change the template for this generated comment go to Window - Preferences - Java - Code Style - Code Templates
 */
public class AttributeStruct extends Attribute implements AttributeStructIF
{
  /**
   * Generated by Eclipse
   */
  private static final long serialVersionUID = 1667000047638614117L;

  private StructDAO         structDAO;

  /**
   * @param name
   * @param mdAttributeKey
   *          key of the defining attribute metadata.
   * @param definingType
   * @param value
   */
  public AttributeStruct(String name, String mdAttributeKey, String definingType, String value)
  {
    super(name, mdAttributeKey, definingType, value);
    this.structDAO = null;
  }

  /**
   * 
   * @param name
   * @param mdAttributeKey
   *          key of the defining attribute metadata.
   * @param definingEntityType
   * @param value
   * @param structDAO
   */
  public AttributeStruct(String name, String mdAttributeKey, String definingEntityType, String value, StructDAO structDAO)
  {
    super(name, mdAttributeKey, definingEntityType, value);
    this.structDAO = structDAO;
  }

  /**
   * Some attributes store objects instead of strings.
   * 
   * @param name
   * @return object stored on the attribute.
   */
  public Object getObjectValue()
  {
    return this.structDAO;
  }

  /**
   * Returns the <code>MdStructDAOIF</code> that defines the type that this attribute references.
   * 
   * Preconditions: this.structDAO has been initialized.
   * 
   */
  public MdStructDAOIF getMdStructDAOIF()
  {
    return this.structDAO.getMdStructDAO();
  }

  /**
   * Always returns true if the containing component is new, false otherwise. The oid to the struct never changes after it has been persisted.
   * 
   * <br>
   * <b>Precondition: </b> true <br>
   * <b>Postcondition: </b> true
   * 
   * @return true if the containing component is new, false otherwise. The oid to the struct never changes after it has been persisted.
   */
  public boolean isModified()
  {
    if (this.getContainingComponent().isNew())
    {
      return true;
    }
    else
    {
      return this.getStructDAO().isModified();
    }
  }

  /**
   * 
   * @param structDAO
   */
  public void setStructDAO(StructDAO structDAO)
  {
    if (structDAO != null)
    {
      this.structDAO = structDAO;
      this.value = this.structDAO.getOid();
    }
  }

  /**
   * 
   * precondition: this.structDAO is initialized
   * 
   * @param attributeName
   * @param value
   */
  public void setValue(String attributeName, String value)
  {
    this.getStructDAO().getAttribute(attributeName).setValue(value);
  }

  /**
   * precondition: this.structDAO is initialized
   * 
   * @param blobName
   *          The name of the blob attribute
   * @param value
   *          The byte[] array to set
   */
  public void setBlob(String blobName, byte[] value)
  {
    try
    {
      AttributeBlob blob = (AttributeBlob) this.getStructDAO().getAttribute(blobName);
      blob.setBlobAsBytes(value);
    }
    catch (ClassCastException e)
    {
      String error = "Attribute [" + blobName + "] on struct [" + getName() + "] on type [" + getDefiningClassType() + "] is not a blob attribute";

      throw new AttributeTypeException(error);
    }

    this.setModified(true);
  }

  /**
   * precondition: this.structDAO is initialized
   * 
   * @param blobName
   *          The name of the blob attribute
   * @return
   */
  public byte[] getBlob(String blobName)
  {
    try
    {
      AttributeBlob blob = (AttributeBlob) this.getStructDAO().getAttribute(blobName);
      return blob.getBlobAsBytes();
    }
    catch (ClassCastException e)
    {
      String error = "Attribute [" + blobName + "] on struct [" + getName() + "] on type [" + getDefiningClassType() + "] is not a blob attribute";

      throw new AttributeTypeException(error);
    }
  }

  /**
   * Adds an item to a set Attribute.
   * 
   * @param name
   *          Name of the set attribute
   * @param value
   *          Value to be added to the attribute
   */
  public void addItem(String name, String value)
  {
    try
    {
      AttributeSet attrSet = (AttributeSet) this.getStructDAO().getAttribute(name);
      attrSet.addItem(value);
    }
    catch (ClassCastException e)
    {
      String error = "Attribute [" + name + "] on struct [" + getName() + "] on type [" + getDefiningClassType() + "] is not a set attribute";
      throw new AttributeTypeException(error);
    }

    this.setModified(true);
  }

  /**
   * Replaces the items of a set attribute. If the attribute does not allow multiplicity, then the {@code values} collection must contain only one item.
   * 
   * @param name
   *          Name of the set attribute
   * @param values
   *          Collection of item ids
   * 
   */
  public void replaceItems(String name, Collection<String> values)
  {
    try
    {
      AttributeSet attrSet = (AttributeSet) this.getStructDAO().getAttribute(name);
      boolean modified = attrSet.replaceItems(values);

      this.setModified(modified);
    }
    catch (ClassCastException e)
    {
      String error = "Attribute [" + name + "] on struct [" + getName() + "] on type [" + getDefiningClassType() + "] is not a set attribute";
      throw new AttributeTypeException(error);
    }
  }

  /**
   * Removes an item from a set Attribute.
   * 
   * @param name
   *          Name of the set attribute
   * @param value
   *          Value to be added to the attribute
   */
  public void removeItem(String name, String value)
  {
    try
    {
      AttributeSet attrSet = (AttributeSet) this.getStructDAO().getAttribute(name);
      attrSet.removeItem(value);
    }
    catch (ClassCastException e)
    {
      String error = "Attribute [" + name + "] on struct [" + getName() + "] on type [" + getDefiningClassType() + "] is not a set attribute";
      throw new AttributeTypeException(error);
    }

    this.setModified(true);
  }

  /**
   * Removes all items from a set Attribute.
   * 
   * @param name
   *          Name of the set attribute
   */
  public void clearItems(String name)
  {
    try
    {
      AttributeSet attrSet = (AttributeSet) this.getStructDAO().getAttribute(name);
      attrSet.clearItems();
    }
    catch (ClassCastException e)
    {
      String error = "Attribute [" + name + "] on struct [" + getName() + "] on type [" + getDefiningClassType() + "] is not a set attribute";
      throw new AttributeTypeException(error);
    }

    this.setModified(true);
  }

  /**
   * 
   * precondition: this.structDAO is initialized
   * 
   * @param attributeName
   * @return
   */
  protected AttributeIF getAttribute(String attributeName)
  {
    // this may or may not be true, but there is no way to inform this attribute
    // if a client
    // modified a subattribute
    this.setModified(true);
    return this.getStructDAO().getAttributeIF(attributeName);
  }

  /**
   * 
   * precondition: this.structDAO is initialized
   * 
   * @param attributeName
   * @return
   */
  public String getValue(String attributeName)
  {
    // this may or may not be true, but there is no way to inform this attribute
    // if a client
    // modified a subattribute
    this.setModified(true);
    return this.getStructDAO().getAttributeIF(attributeName).getValue();
  }

  /**
   * 
   * precondition: this.structDAO is initialized
   * 
   * @return
   */
  public AttributeIF[] getAttributeArrayIF()
  {
    return this.getStructDAO().getAttributeArrayIF();
  }

  /**
   * 
   * @return the string OID of the structDAO object. precondition: this.structDAO is initialized.
   */
  protected String save(boolean validateRequired)
  {
    StructDAO structDAO = this.getStructDAO();

    if (!this.isImport())
    {
      return structDAO.save(validateRequired);
    }
    else
    {
      return structDAO.importSave();
    }
  }

  /**
   * 
   * @param businessContext
   *          true if this is being called from a business context, false otherwise. If true then cascading deletes of other Entity objects will happen at the Business layer instead of the data access
   *          layer.
   * 
   */
  public void delete(DeleteContext context)
  {
    StructDAO structDAO = this.getStructDAO();

    if (!structDAO.isNew() && this.structDAO.isAppliedToDB())
    {
      try
      {
        this.getStructDAO().delete(context);
      }
      catch (StaleEntityException e)
      {
        // Do nothing
        // Since this attribute has a hard reference to the attribute struct, it is possible that
        // it may become stale from the struct being deleted directly or possible referenced from
        // another attribute. Since structs do not have sequence numbers, a stale entity exception
        // means it was already deleted.
      }
    }
  }

  /**
   * 
   * @return
   */
  public StructDAO getStructDAO()
  {
    if (this.structDAO != null)
    {
      return this.structDAO;
    }
    else
    {
      String error = "StructDAO [" + this.getDefiningClassType() + "] was not initialized for the struct attribute [" + this.getName() + "]";
      throw new ProgrammingErrorException(error);
    }

  }

  /**
   * Cleans up any object that references this attribute in some way. Deletes the StructDAO instance used by this struct. <b>Precondition: </b> this attribute MUST be a member of the given BusinessDAO <br>
   */
  public void removeReferences(EntityDAO componentData, DeleteContext context)
  {
    super.removeReferences(componentData, context);
    this.delete(context);
  }

  /**
   * Apply the StructDAO for this struct attribute and then store the oid of that BusinessDAO as the value of this struct attribute.
   * 
   * <b>Precondition: </b> this MdAttribute MUST be the metadata of this attribute. <br>
   */
  public void initReferences(MdAttributeConcreteDAOIF mdAttribute)
  {
    // indicates if we are validating the struct attributes or not
    boolean validateStruct = false;
    if (mdAttribute.isRequired())
    {
      validateStruct = true;
    }
    this.setValue(this.save(validateStruct));
  }

  /**
   * Update changes made to the StructDAO.
   * 
   * <b>Precondition: </b> this MdAttribute MUST be the metadata of this attribute. <br>
   */
  public void updateReferences(MdAttributeConcreteDAOIF mdAttribute)
  {
    // indicates if we are validating the struct attributes or not
    boolean validateStruct = false;
    if (mdAttribute.isRequired())
    {
      validateStruct = true;
    }
    this.save(validateStruct);
  }

  /**
   *
   */
  public Attribute attributeClone()
  {
    return new AttributeStruct(this.getName(), this.mdAttributeKey, this.getDefiningClassType(), new String(this.getValue()), (StructDAO) this.getStructDAO().clone());
  }

  /**
   *
   */
  public Attribute attributeCopy()
  {
    return new AttributeStruct(this.getName(), this.mdAttributeKey, this.getDefiningClassType(), new String(this.getValue()), (StructDAO) this.getStructDAO().copy());
  }

  /*
   * (non-Javadoc)
   * 
   * @see com.runwaysdk.dataaccess.AttributeStructIF#getAttributeIF(java.lang.String)
   */
  public AttributeIF getAttributeIF(String attributeName)
  {
    return this.getStructDAO().getAttributeIF(attributeName);
  }

  @Override
  public void setCommitState()
  {
    super.setCommitState();

    if (this.getStructDAO().isAppliedToDB())
    {
      this.getStructDAO().setCommitState();
    }
  }

  @Override
  public void rollbackState()
  {
    super.rollbackState();

    this.getStructDAO().rollbackState();
  }

  @Override
  public void rollbackState(Integer rollbackSavepointId)
  {
    super.rollbackState(rollbackSavepointId);

    this.getStructDAO().rollbackState(rollbackSavepointId);
  }
}
