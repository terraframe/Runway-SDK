/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = -346176980)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MdAttributeConcrete.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MdAttributeConcreteBase extends com.runwaysdk.system.metadata.MdAttribute
{
  public final static String CLASS = "com.runwaysdk.system.metadata.MdAttributeConcrete";
  public final static java.lang.String ATTRIBUTENAME = "attributeName";
  public final static java.lang.String COLUMNNAME = "columnName";
  public final static java.lang.String DEFININGMDCLASS = "definingMdClass";
  public final static java.lang.String DISPLAYLABEL = "displayLabel";
  private com.runwaysdk.business.Struct displayLabel = null;
  
  public final static java.lang.String GENERATEACCESSOR = "generateAccessor";
  public final static java.lang.String GETTERVISIBILITY = "getterVisibility";
  public final static java.lang.String IMMUTABLE = "immutable";
  public final static java.lang.String INDEXNAME = "indexName";
  public final static java.lang.String INDEXTYPE = "indexType";
  public final static java.lang.String REQUIRED = "required";
  public final static java.lang.String SETTERVISIBILITY = "setterVisibility";
  public final static java.lang.String SYSTEM = "system";
  private static final long serialVersionUID = -346176980;
  
  public MdAttributeConcreteBase()
  {
    super();
    displayLabel = super.getStruct("displayLabel");
  }
  
  public String getAttributeName()
  {
    return getValue(ATTRIBUTENAME);
  }
  
  public void validateAttributeName()
  {
    this.validateAttribute(ATTRIBUTENAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getAttributeNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeConcrete.CLASS);
    return mdClassIF.definesAttribute(ATTRIBUTENAME);
  }
  
  public void setAttributeName(String value)
  {
    if(value == null)
    {
      setValue(ATTRIBUTENAME, "");
    }
    else
    {
      setValue(ATTRIBUTENAME, value);
    }
  }
  
  public String getColumnName()
  {
    return getValue(COLUMNNAME);
  }
  
  public void validateColumnName()
  {
    this.validateAttribute(COLUMNNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getColumnNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeConcrete.CLASS);
    return mdClassIF.definesAttribute(COLUMNNAME);
  }
  
  public void setColumnName(String value)
  {
    if(value == null)
    {
      setValue(COLUMNNAME, "");
    }
    else
    {
      setValue(COLUMNNAME, value);
    }
  }
  
  public com.runwaysdk.system.metadata.MdClass getDefiningMdClass()
  {
    if (getValue(DEFININGMDCLASS).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdClass.get(getValue(DEFININGMDCLASS));
    }
  }
  
  public String getDefiningMdClassId()
  {
    return getValue(DEFININGMDCLASS);
  }
  
  public void validateDefiningMdClass()
  {
    this.validateAttribute(DEFININGMDCLASS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDefiningMdClassMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeConcrete.CLASS);
    return mdClassIF.definesAttribute(DEFININGMDCLASS);
  }
  
  public void setDefiningMdClass(com.runwaysdk.system.metadata.MdClass value)
  {
    if(value == null)
    {
      setValue(DEFININGMDCLASS, "");
    }
    else
    {
      setValue(DEFININGMDCLASS, value.getOid());
    }
  }
  
  public com.runwaysdk.system.metadata.MetadataDisplayLabel getDisplayLabel()
  {
    return (com.runwaysdk.system.metadata.MetadataDisplayLabel) displayLabel;
  }
  
  public void validateDisplayLabel()
  {
    this.validateAttribute(DISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeConcrete.CLASS);
    return mdClassIF.definesAttribute(DISPLAYLABEL);
  }
  
  public Boolean getGenerateAccessor()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(GENERATEACCESSOR));
  }
  
  public void validateGenerateAccessor()
  {
    this.validateAttribute(GENERATEACCESSOR);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getGenerateAccessorMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeConcrete.CLASS);
    return mdClassIF.definesAttribute(GENERATEACCESSOR);
  }
  
  public void setGenerateAccessor(Boolean value)
  {
    if(value == null)
    {
      setValue(GENERATEACCESSOR, "");
    }
    else
    {
      setValue(GENERATEACCESSOR, java.lang.Boolean.toString(value));
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<com.runwaysdk.system.metadata.VisibilityModifier> getGetterVisibility()
  {
    return (java.util.List<com.runwaysdk.system.metadata.VisibilityModifier>) getEnumValues(GETTERVISIBILITY);
  }
  
  public void addGetterVisibility(com.runwaysdk.system.metadata.VisibilityModifier value)
  {
    if(value != null)
    {
      addEnumItem(GETTERVISIBILITY, value.getOid());
    }
  }
  
  public void removeGetterVisibility(com.runwaysdk.system.metadata.VisibilityModifier value)
  {
    if(value != null)
    {
      removeEnumItem(GETTERVISIBILITY, value.getOid());
    }
  }
  
  public void clearGetterVisibility()
  {
    clearEnum(GETTERVISIBILITY);
  }
  
  public void validateGetterVisibility()
  {
    this.validateAttribute(GETTERVISIBILITY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getGetterVisibilityMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeConcrete.CLASS);
    return mdClassIF.definesAttribute(GETTERVISIBILITY);
  }
  
  public Boolean getImmutable()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(IMMUTABLE));
  }
  
  public void validateImmutable()
  {
    this.validateAttribute(IMMUTABLE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getImmutableMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeConcrete.CLASS);
    return mdClassIF.definesAttribute(IMMUTABLE);
  }
  
  public void setImmutable(Boolean value)
  {
    if(value == null)
    {
      setValue(IMMUTABLE, "");
    }
    else
    {
      setValue(IMMUTABLE, java.lang.Boolean.toString(value));
    }
  }
  
  public String getIndexName()
  {
    return getValue(INDEXNAME);
  }
  
  public void validateIndexName()
  {
    this.validateAttribute(INDEXNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIndexNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeConcrete.CLASS);
    return mdClassIF.definesAttribute(INDEXNAME);
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<com.runwaysdk.system.metadata.MdAttributeIndices> getIndexType()
  {
    return (java.util.List<com.runwaysdk.system.metadata.MdAttributeIndices>) getEnumValues(INDEXTYPE);
  }
  
  public void addIndexType(com.runwaysdk.system.metadata.MdAttributeIndices value)
  {
    if(value != null)
    {
      addEnumItem(INDEXTYPE, value.getOid());
    }
  }
  
  public void removeIndexType(com.runwaysdk.system.metadata.MdAttributeIndices value)
  {
    if(value != null)
    {
      removeEnumItem(INDEXTYPE, value.getOid());
    }
  }
  
  public void clearIndexType()
  {
    clearEnum(INDEXTYPE);
  }
  
  public void validateIndexType()
  {
    this.validateAttribute(INDEXTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIndexTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeConcrete.CLASS);
    return mdClassIF.definesAttribute(INDEXTYPE);
  }
  
  public Boolean getRequired()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(REQUIRED));
  }
  
  public void validateRequired()
  {
    this.validateAttribute(REQUIRED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getRequiredMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeConcrete.CLASS);
    return mdClassIF.definesAttribute(REQUIRED);
  }
  
  public void setRequired(Boolean value)
  {
    if(value == null)
    {
      setValue(REQUIRED, "");
    }
    else
    {
      setValue(REQUIRED, java.lang.Boolean.toString(value));
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<com.runwaysdk.system.metadata.VisibilityModifier> getSetterVisibility()
  {
    return (java.util.List<com.runwaysdk.system.metadata.VisibilityModifier>) getEnumValues(SETTERVISIBILITY);
  }
  
  public void addSetterVisibility(com.runwaysdk.system.metadata.VisibilityModifier value)
  {
    if(value != null)
    {
      addEnumItem(SETTERVISIBILITY, value.getOid());
    }
  }
  
  public void removeSetterVisibility(com.runwaysdk.system.metadata.VisibilityModifier value)
  {
    if(value != null)
    {
      removeEnumItem(SETTERVISIBILITY, value.getOid());
    }
  }
  
  public void clearSetterVisibility()
  {
    clearEnum(SETTERVISIBILITY);
  }
  
  public void validateSetterVisibility()
  {
    this.validateAttribute(SETTERVISIBILITY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getSetterVisibilityMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeConcrete.CLASS);
    return mdClassIF.definesAttribute(SETTERVISIBILITY);
  }
  
  public Boolean getSystem()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(SYSTEM));
  }
  
  public void validateSystem()
  {
    this.validateAttribute(SYSTEM);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getSystemMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdAttributeConcrete.CLASS);
    return mdClassIF.definesAttribute(SYSTEM);
  }
  
  public void setSystem(Boolean value)
  {
    if(value == null)
    {
      setValue(SYSTEM, "");
    }
    else
    {
      setValue(SYSTEM, java.lang.Boolean.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.system.metadata.VirtualizeAttribute addVirtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtual mdAttributeVirtual)
  {
    return (com.runwaysdk.system.metadata.VirtualizeAttribute) addChild(mdAttributeVirtual, com.runwaysdk.system.metadata.VirtualizeAttribute.CLASS);
  }
  
  public void removeVirtualAttribute(com.runwaysdk.system.metadata.MdAttributeVirtual mdAttributeVirtual)
  {
    removeAllChildren(mdAttributeVirtual, com.runwaysdk.system.metadata.VirtualizeAttribute.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdAttributeVirtual> getAllVirtualAttribute()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdAttributeVirtual>) getChildren(com.runwaysdk.system.metadata.VirtualizeAttribute.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.VirtualizeAttribute> getAllVirtualAttributeRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.VirtualizeAttribute>) getChildRelationships(com.runwaysdk.system.metadata.VirtualizeAttribute.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.VirtualizeAttribute getVirtualAttributeRel(com.runwaysdk.system.metadata.MdAttributeVirtual mdAttributeVirtual)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.VirtualizeAttribute> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.VirtualizeAttribute>) getRelationshipsWithChild(mdAttributeVirtual, com.runwaysdk.system.metadata.VirtualizeAttribute.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public com.runwaysdk.system.metadata.ClassAttributeConcrete addDefiningClass(com.runwaysdk.system.metadata.MdClass mdClass)
  {
    return (com.runwaysdk.system.metadata.ClassAttributeConcrete) addParent(mdClass, com.runwaysdk.system.metadata.ClassAttributeConcrete.CLASS);
  }
  
  public void removeDefiningClass(com.runwaysdk.system.metadata.MdClass mdClass)
  {
    removeAllParents(mdClass, com.runwaysdk.system.metadata.ClassAttributeConcrete.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdClass> getAllDefiningClass()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdClass>) getParents(com.runwaysdk.system.metadata.ClassAttributeConcrete.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.ClassAttributeConcrete> getAllDefiningClassRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.ClassAttributeConcrete>) getParentRelationships(com.runwaysdk.system.metadata.ClassAttributeConcrete.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.ClassAttributeConcrete getDefiningClassRel(com.runwaysdk.system.metadata.MdClass mdClass)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.ClassAttributeConcrete> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.ClassAttributeConcrete>) getRelationshipsWithParent(mdClass, com.runwaysdk.system.metadata.ClassAttributeConcrete.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public com.runwaysdk.system.metadata.IndexAttribute addIndex(com.runwaysdk.system.metadata.MdIndex mdIndex)
  {
    return (com.runwaysdk.system.metadata.IndexAttribute) addParent(mdIndex, com.runwaysdk.system.metadata.IndexAttribute.CLASS);
  }
  
  public void removeIndex(com.runwaysdk.system.metadata.MdIndex mdIndex)
  {
    removeAllParents(mdIndex, com.runwaysdk.system.metadata.IndexAttribute.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdIndex> getAllIndex()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdIndex>) getParents(com.runwaysdk.system.metadata.IndexAttribute.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.IndexAttribute> getAllIndexRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.IndexAttribute>) getParentRelationships(com.runwaysdk.system.metadata.IndexAttribute.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.IndexAttribute getIndexRel(com.runwaysdk.system.metadata.MdIndex mdIndex)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.IndexAttribute> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.IndexAttribute>) getRelationshipsWithParent(mdIndex, com.runwaysdk.system.metadata.IndexAttribute.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public com.runwaysdk.system.metadata.DimensionDefinesLocalStructAttribute addgetMdDimension(com.runwaysdk.system.metadata.MdDimension mdDimension)
  {
    return (com.runwaysdk.system.metadata.DimensionDefinesLocalStructAttribute) addParent(mdDimension, com.runwaysdk.system.metadata.DimensionDefinesLocalStructAttribute.CLASS);
  }
  
  public void removegetMdDimension(com.runwaysdk.system.metadata.MdDimension mdDimension)
  {
    removeAllParents(mdDimension, com.runwaysdk.system.metadata.DimensionDefinesLocalStructAttribute.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdDimension> getAllgetMdDimension()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdDimension>) getParents(com.runwaysdk.system.metadata.DimensionDefinesLocalStructAttribute.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.DimensionDefinesLocalStructAttribute> getAllgetMdDimensionRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.DimensionDefinesLocalStructAttribute>) getParentRelationships(com.runwaysdk.system.metadata.DimensionDefinesLocalStructAttribute.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.metadata.DimensionDefinesLocalStructAttribute getgetMdDimensionRel(com.runwaysdk.system.metadata.MdDimension mdDimension)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.DimensionDefinesLocalStructAttribute> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.DimensionDefinesLocalStructAttribute>) getRelationshipsWithParent(mdDimension, com.runwaysdk.system.metadata.DimensionDefinesLocalStructAttribute.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static MdAttributeConcrete get(String oid)
  {
    return (MdAttributeConcrete) com.runwaysdk.business.Business.get(oid);
  }
  
  public static MdAttributeConcrete getByKey(String key)
  {
    return (MdAttributeConcrete) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static MdAttributeConcrete lock(java.lang.String oid)
  {
    MdAttributeConcrete _instance = MdAttributeConcrete.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static MdAttributeConcrete unlock(java.lang.String oid)
  {
    MdAttributeConcrete _instance = MdAttributeConcrete.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return this.getClassDisplayLabel();
    }
  }
}
