/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = -1574579475)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MdField.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MdFieldBase extends com.runwaysdk.system.metadata.Metadata
{
  public final static String CLASS = "com.runwaysdk.system.metadata.MdField";
  public static java.lang.String DISPLAYLABEL = "displayLabel";
  private com.runwaysdk.business.Struct displayLabel = null;
  
  public static java.lang.String FIELDCONDITION = "fieldCondition";
  public static java.lang.String FIELDNAME = "fieldName";
  public static java.lang.String FIELDORDER = "fieldOrder";
  public static java.lang.String REQUIRED = "required";
  private static final long serialVersionUID = -1574579475;
  
  public MdFieldBase()
  {
    super();
    displayLabel = super.getStruct("displayLabel");
  }
  
  public com.runwaysdk.system.metadata.MdFieldDisplayLabel getDisplayLabel()
  {
    return (com.runwaysdk.system.metadata.MdFieldDisplayLabel) displayLabel;
  }
  
  public void validateDisplayLabel()
  {
    this.validateAttribute(DISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdField.CLASS);
    return mdClassIF.definesAttribute(DISPLAYLABEL);
  }
  
  public com.runwaysdk.system.metadata.FieldCondition getFieldCondition()
  {
    if (getValue(FIELDCONDITION).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.FieldCondition.get(getValue(FIELDCONDITION));
    }
  }
  
  public String getFieldConditionId()
  {
    return getValue(FIELDCONDITION);
  }
  
  public void validateFieldCondition()
  {
    this.validateAttribute(FIELDCONDITION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getFieldConditionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdField.CLASS);
    return mdClassIF.definesAttribute(FIELDCONDITION);
  }
  
  public void setFieldCondition(com.runwaysdk.system.metadata.FieldCondition value)
  {
    if(value == null)
    {
      setValue(FIELDCONDITION, "");
    }
    else
    {
      setValue(FIELDCONDITION, value.getOid());
    }
  }
  
  public String getFieldName()
  {
    return getValue(FIELDNAME);
  }
  
  public void validateFieldName()
  {
    this.validateAttribute(FIELDNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getFieldNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdField.CLASS);
    return mdClassIF.definesAttribute(FIELDNAME);
  }
  
  public void setFieldName(String value)
  {
    if(value == null)
    {
      setValue(FIELDNAME, "");
    }
    else
    {
      setValue(FIELDNAME, value);
    }
  }
  
  public Integer getFieldOrder()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(FIELDORDER));
  }
  
  public void validateFieldOrder()
  {
    this.validateAttribute(FIELDORDER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getFieldOrderMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdField.CLASS);
    return mdClassIF.definesAttribute(FIELDORDER);
  }
  
  public void setFieldOrder(Integer value)
  {
    if(value == null)
    {
      setValue(FIELDORDER, "");
    }
    else
    {
      setValue(FIELDORDER, java.lang.Integer.toString(value));
    }
  }
  
  public Boolean getRequired()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(REQUIRED));
  }
  
  public void validateRequired()
  {
    this.validateAttribute(REQUIRED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getRequiredMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdField.CLASS);
    return mdClassIF.definesAttribute(REQUIRED);
  }
  
  public void setRequired(Boolean value)
  {
    if(value == null)
    {
      setValue(REQUIRED, "");
    }
    else
    {
      setValue(REQUIRED, java.lang.Boolean.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.system.metadata.FormField addMdForm(com.runwaysdk.system.metadata.MdForm mdForm)
  {
    return (com.runwaysdk.system.metadata.FormField) addParent(mdForm, com.runwaysdk.system.metadata.FormField.CLASS);
  }
  
  public void removeMdForm(com.runwaysdk.system.metadata.MdForm mdForm)
  {
    removeAllParents(mdForm, com.runwaysdk.system.metadata.FormField.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdForm> getAllMdForm()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.MdForm>) getParents(com.runwaysdk.system.metadata.FormField.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.FormField> getAllMdFormRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.FormField>) getParentRelationships(com.runwaysdk.system.metadata.FormField.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.FormField> getMdFormRel(com.runwaysdk.system.metadata.MdForm mdForm)
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.metadata.FormField>) getRelationshipsWithParent(mdForm, com.runwaysdk.system.metadata.FormField.CLASS);
  }
  
  public static MdField get(String oid)
  {
    return (MdField) com.runwaysdk.business.Business.get(oid);
  }
  
  public static MdField getByKey(String key)
  {
    return (MdField) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static MdField lock(java.lang.String oid)
  {
    MdField _instance = MdField.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static MdField unlock(java.lang.String oid)
  {
    MdField _instance = MdField.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
