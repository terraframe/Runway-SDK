# Message indicating that one or more problems occurred.
ProblemCollectionException=A problem occurred and your operation could not be completed.

# Thrown when a user tries to access the admin screen without proper role access.
# {0} The username of the user without proper role access.
AdminScreenAccessException=The user [{0}] does not have access to the Admin Screen.

# Invalid Id
# {0} id
InvalidIdException=Object ID [{0}] is not a valid ID.

# Error when permissions are not configured correctly in order for a user to complete an action.
DomainPermissionException=You do not have permission to perform this operation.  If you feel you should be able to perform this operation, alert your technical support staff.

# The defualt message for serious programming errors.
ProgrammingErrorException=A serious programming error has occurred.  Please alert your technical support staff immediately.

# Thrown when data is requested that does not exist in the database
# {0} The display label of the type of data that wasn't found
DataNotFoundException=The requested [{0}] was not found.  Please verify that all information was correctly entered in your request and try again.

# Thrown when an attribute with the given name does not exist on a Component
# Attribute name
AttributeDoesNotExistExceptionNoType=The attribute [{0}] does not exist.

# Thrown when an attribute with the given name does not exist on a Component
# Attribute name
# Display label of the component class
AttributeDoesNotExistExceptionWithType=The attribute [{0}] on [{1}] does not exist.

# Thrown when one site tries to modify an object owned by another site.
# {0} toString value of entity
# {1} The entity site
# {2} The modifying site.
SiteException=An object [{0}] owned by site [{1}] cannot be modified by site [{2}].

# Thrown when the cache algorithm for a type is incompatible with its heirarchy
# {0} The type that is being defined
# {1} The (invalid) caching algorithm of the new type
# {2} The parent (or grandparent, etc.) of the new type whose cache algorithm is incompatible
# {3} The cache algorithm of the exiting parent type
CacheCodeException=Type [{0}] cannot cache [{1}], because it inherits from [{2}], which caches [{3}].  Please select a different caching algorithm.

# Thrown when the cache algorithm for a type is incompatible with its heirarchy
# {0} The type that is being defined
# {1} The (invalid) caching algorithm of the new type
CacheCodeExceptionShort=Type [{0}] cannot cache [{1}].  Please select a different caching algorithm.

# Thrown when a requested object is not of the expected type
UnexpectedTypeException=An object of an unexpected type was returned.  Please try your operation again.  If the problem continues, alert your technical support staff.

# Thrown when the core attempts to instantiate an abstract type
# {0} The display label of the abstract type
AbstractInstantiationException=The type [{0}] is abstract, and cannot be instantiated.

# Thrown when a relationship contraint is violated (Circular relationship, invalid parent type, etc)
RelationshipConstraintException=The requested operation would violate a constraint on Relationships.

# Thrown when a path between a child node and a parent node is created, yet such a path already exists.
# {0} Unique label business object string for parent
# {1} Child relationship label
# {2} Unique label business object string for child
DuplicateGraphPathException=[{0}] already [{1}] [{2}].

# Thrown when defining a relationship and the parent relationship cannot be extended
# {0} Parent Relationship Label
RelationshipInvalidParentDefException1=Super Relationship [{0}] cannot be extended.

# Thrown when defining a relationship and the parent type is not a relationship, rather a class
# {0} Parent CLass Labael
RelationshipInvalidParentDefException2=Relationship types must inherit from another relationship type. The given super type [{0}] is a class.

# Thrown when an attempt is made to add a basic object to a relationship
# {0} Basic object type label
# {1} Relationship label
RelationshipInvalidObjectException=[{0}] is a basic object.  It cannot participate in the [{1}] relationship.

# Thrown when an attempt is made to define a recursive relationship on a Tree
# {0} Relationship type label
# {1} Child object unique label
# {2} Parent object unique label
RelationshipRecursionException=Relationship [{0}] cannot be created.  [{1}] already has the parent object [{2}] as a child. This would cause an infinite recursive relationship.

# Thrown when a relationship is defined that would violate a cardinality constraint
# {0} Object type label
# {1} Cardinality
# {2} Relationship type label
# {3} Object instance label
# {4} Other object type label.
RelationshipCardinalityException=A [{0}] can only be in {1} [{2}] relationships with objects of type [{4}].  {3} already has {1} [{4}].

# Thrown when metadata is not allowed to be deleted
# {0} displayLabel of the undeleteable metadata
MetadataCannotBeDeletedException=Metadata that defines [{0}] cannot be deleted.

# Thrown when an unapplied object is deleted
# {0} toString of the object being deleted
DeleteUnappliedObjectException=[{0}] cannot be deleted because it has not yet been applied.

# {0} toString of object being deleted
# {1} reference attribute display label
# {2} reference type display label
CannotDeleteReferencedObject=Cannot delete [{0}].  Attribute [{1}] on type [{2}] references it and is a required attribute.

# Thrown when there is a problem encrypting an attribute
# {0} Display label of the attribute
EncryptionException=Operation cancelled - there was a problem encrypting [{0}].  Please try again.

# Indicates an error in the inheritance hierarchy
InheritanceException=The requested operation would corrupt the inheritance hierarchy.

#Thrown only for MySQL in the rare event that two threads try to apply objects at the same time with values
# that violate a uniqueness constraint
DuplicateDataException=An object already exists that has values on attributes that are unique.

# Thrown when a new instance would conflict with existing data
# {0} Display label of the entity type
# {1} The duplicate attribute value
# {2} Display label of the colliding attribute
DuplicateDataExceptionSingle=An instance of [{0}] already exists with [{1}] as the value for {2} - please choose a different value.

# Thrown when a new instance would conflict with existing data
# {0} Display label of the entity type
# {1} Display label of the colliding attribute
DuplicateDataExceptionSingleNoValue=An instance of [{0}] already exists with the same value for {1} - please choose a different value.

# Thrown when a new instance would conflict with existing data
# {0} Display label of the entity type
# {1} The list of duplicate attribute values
# {2} Display labels of the colliding attributes
DuplicateDataExceptionMultiple=A instance of [{0}] already exists with values {1} for attributes {2} - please choose different values.

# Thrown when a new instance would conflict with existing data
# {0} Display label of the entity type
# {1} Display labels of the colliding attributes
DuplicateDataExceptionMultipleNoValues=A instance of [{0}] already exists with the same values for attributes {1} - please choose different values.

# Indicates an error when dynamically loading a generated class.
# {0} Display Label of the loaded class
ClassLoaderException=Error encountered when loading [{0}].  Please try again.  If the problem continues, alert your technical support staff.

# Thrown when an entity or attribtue name is reserved
# {0} The reserved word
ReservedWordException		   	=The name [{0}] is reserved - please specify a different name.
ReservedWordExceptionType	   	=The type name [{0}] is reserved - please specify a different name.
ReservedWordExceptionTable	   	=The table name [{0}] is reserved - please specify a different name.
ReservedWordExceptionAttribute 	=The attribute name [{0}] is reserved - please specify a different name.
ReservedWordExceptionColumn    	=The column name [{0}] is reserved - please specify a different name.
ReservedWordExceptionTransition	=The transition name [{0}] is reserved - please specify a different name.
ReservedWordExceptionState		=The state name [{0}] is reserved - please specify a different name.

# Thrown when an entity or attribtue name is not a valid identifier
# {0} Invalid Identifier
InvalidIdentifierException=The identifier [{0}] is not valid.  All identifiers must begin with a letter, an underscore, or a Unicode currency character. Any other symbol, such as a number, is not valid.

# Thrown when an entity or attribtue name is not a valid identifier
# {0} Invalid Column Name
InvalidColumnNameException=The column name [{0}] is not valid.  Column names must begin with a letter, then followed by a letter, number, or an underscore.

# Thrown when an entity or attribtue name violates a convention
# {0} The invalid name
NameConventionException=The name [{0}] violates a naming convention - java style conventions are enforced.  Please consult your documentation for details.

# Thrown when a reference attribute is invalid
# {0} Display label of the attribute
# {1} Display label of the type that is referenced
InvalidReferenceException=The value for [{0}] is invalid - it must reference a [{1}].

# Thrown when an attribute is referenced as the wrong type
# {0} Display label of the attribute.
# {1} Display label of the type that defines the attribute.
# {2} Expected attribute type display label.
# {3} Provided attribute type display label.
InvalidAttributeTypeException=The attribute [{0}] on class [{1}] is of the wrong type.  The expected type is [{2}] but the given type is [{3}].

# Indicates an error in a type or attribute definition.
InvalidDefinitionException=Your operation created or modified metadata with invalid values.  Please check your input and try again. If the problem continues, please contact your support staff.

# Thrown when an identical group by index is defined on a entity.
# {0} entity type
# {1} index display label
# {2} comma separated list of attribute names
IdenticalIndexException=Index [{1}] on entity [{0}] is invalid. An index is already defined on entity [{0}] with attributes [{2}].

# Only the root of a type hierarchy can be published
# {0} Display label of the class
ClassPublishException=Only the root of a class hierarchy can be published.  Class [{0}] is not the root of a class hierarchy.

# Indicates that two MdEnumerations are defined pointing to the same master list that have the same type name.
# {0} MdEnumeration label
# {1} Type of the master class
# {2} Type name on the newly defined MdEnumeration
DuplicateMdEnumerationDefinitionException=A [{0}] already exists for [{1}] with type name [{2}].

# Thrown when an enumeration name is not valid with respect to the given enumeration.
# {0} enumName name of the enumeration that was invalid.
# {1} mdEnumerationIF enumeration.
InvalidEnumerationName=The enummeration name [{0}] is not valid for enumeration [{1}].

# Thrown when an attribute is specified to be on an index, yet the attribute is not defined
# by the type that defines the table the index is on.
# {0} Type display label
# {1} Attribute display label
InvalidAttributeForIndexDefinitionException=Attribute [{1}] is not defined by by [{0}].

# Thrown when an attempt is made to apply an index to the database, yet no attributes
# have been added to that index.
NoAttributeOnIndexException=Index on [{0}] could not be applied to the database because it does not contain any attributes.

# Indicates an uniqueness constraint error on a non-required attribute definition.
# {0} DisplayLabel of the attribute
RequiredUniquenessConstraintException=Attribute [{0}] cannot participate in a uniqueness constraint because it isn't required.

# Indicates an error in an attribute definition.
# {0} Display label of the attribute
AttributeDefinitionException=The definition of attribute [{0}] contains an error.  Please check your input and try again. If the problem continues, please contact your support staff.

# Thrown when an attribute is already defined iby the given class.
# {0} display label of the attribute that is already defined.
# {1} display label of the class that a new attribute is being added to.
DuplicateAttributeDefinition=Cannot add an attribute named [{0}] to class [{1}] because that class already defines an attribute with that name.

# Thrown when an attribute is already defined in the inheritance hierarchy of the given class.
# {0} display label of the attribute that is already defined.
# {1} display label of the class that a new attribute is being added to.
# {2} display label of class that already has the attribute defined.
DuplicateAttributeInInheritedHierarchy=Cannot add an attribute named [{0}] to class [{1}] because its parent class [{2}] already defines an attribute with that name.

# Thrown when an attribute is already defined by a subclass of the given class.
# {0} display label of the attribute that is already defined.
# {1} display label of the class that a new attribute is being added to.
# {2} display label of class that already has the attribute defined.
DuplicateAttributeDefinedInSubclass=Cannot add an attribute named [{0}] to class [{1}] because a child class [{3}] already defines an attribute with that name.

# Thrown when an attribute is added to a type that cannot have attributes to it at runtime.
# {0} display label of the attribute that is already defined.
# {1} display label of the type that is not allowed to have attributes added to it at runtime.
CannotAddAttriubteToClassException=Cannot add attribute [{0}] to class [{1}] or one of its sublasses because attributes cannot be added to that class at runtime.

# Thrown when the class cannot define attributes of the given type.
# {0} display label of the attribute that is being defined.
# {1} display label of the type that defines the given attribute.
# {2} display label of the class that the given attribute is being added to.
AttributeOfWrongTypeForClassException=Cannot add attribute [{0}] to class [{2}].  Class [{2}] cannot define an attribute of type [{1}].

# Thrown when the type of the given attribute cannot participate in a uniqueness constraint.
# {0} display label of the attribute that is being defined.
# {1} display label of the type that defines the type of the attributes.
AttributeInvalidUniquenessConstraintException=Attribute [{0}] cannot participate in a uniqueness constraint.  Attributes of type [{1}] cannot be unique.

# Thrown when a reference attribute type has not been configured to reference a class.
# {0} display label of the attribute
# {1} display label of the type that defines the attribute.
ReferenceAttributeNotReferencingClassException=Attribute [{0}] on class [{1}] is a reference attribute but is not configured to reference anything. It cannot contain a value.

# Indicates the type of the parameter is invalid.
# {0} invalid parameter type
# {1} invalid parameter label
# {2} method display label
ParameterDefinitionException_InvalidType=Type [{0}] of parameter [{1}] on method [{2}] is invalid.  Parameter types must be a Java primitive wrapper class or a predefined class that is published.

# Indicates a parameter with the given name already exists on the method.
# {0} Method label
# {1} Parameter name
ParameterDefinitionException_NameExists=[{0}] already has a parameter with the name [{1}].

# Indicates a parameter with the given given already exists on the method.
# {0} Method label
# {1} Existing parameter name
# {2} Display order
ParameterDefinitionException_OrderExists=[{0}] already has parameter [{1}] with order [{2}].

# Indicates an error in a method definition.
# {0} Defining type label
# {1} Method name
MethodDefinitionException_NameExists=[{0}] already has a method with the name [{1}].

# The return type on a method definition is invalid.
# {0} invalid return type
# {1} method display label
MethodDefinitionException_InvalidReturnType=The return type [{0}] on method [{1}] is invalid.  Return types must be a Java primitive wrapper class or a predefined class that is published.

# The method was defined on an invalid type.
# {0} MdMethod display label
# {1} MdType that the method is defined on
# {2} MdClass display label
# {3} MdFacade display label
methodDefinitionException_DefiningType=Method [{0}] is defined on an invalid type.  [{1}] is not a [{2}] or a [{3}].

# Indicates an error in a parameter definition.
# {0} Display label of the parameter
ParameterDefinitionException_InvalidType=The parameter [{0}] is invalid.  Parameters must be a Java primitive wrapper class or a predefined class that is published.

# Encapsulates errors arising from the RBAC implementation.
RBACException=An error was encountered while assigning permissions.  Please alert your support staff if the problem continues.

# Thrown when a permission was assigned to a state machine.
# {0} StateMachine type
# {1} StateMachine owner type
RBACExceptionInvalidStateMachine = State Machine [{0}] cannot have permissions. Add them to [{1}] instead.

# An invalid permission was assigned to a class
# {0} operation
# {1} class display label
RBACExceptionInvalidOperation = Operation [{0}] is not applicable for type [{1}].

# Cannot add a single actor to the owner role.
# {0} single actor name
# {1} role name
RBACExceptionOwnerRole = SingleActor [{0}] cannont be assigned to role [{1}].

# Thrown when a role is added to a conflicting role.
# {0} Single actor name
# {1} Current role
# {2} Conflicting role
RBACExceptionSingleActorConflictingRole = SingleActor [{0}] cannot be assigned to role [{1}] because it already belongs to conflicting role [{2}].

# Invalid role inheritance
# {0} Child role name
# {1} Parent role name
RBACExceptionInheritance = Role [{0}] cannot inherit from role [{1}] because it would break existing user assignment conflict of intrest constraints.

# Role invalidates existing contraints on SSD.
# {0} Role name
# {1} Sduty name
RBACExceptionInvalidSSDConstraint = Role [{0}] invalidates existing constraints on SSD [{1}].

# Invalid SSD Cardinatlity
# {0} cardinality
# {1} Sduty Name
RBACExceptionInvalidSSDCardinality = The new cardinality of [{0}] is invalid for SSD [{1}] due to existing user-role assignments.

# Indicates a lock on an object by another user already exists.
# {0} The object that could not be locked
ExistingLockException=[{0}] is currently being modified by another user.  Please try again later.

# Indicates the current user does not have a lock on the object.
# {0} The object that could not be locked
NeedLockException=You must have a lock on [{0}] before you can modify it.

# Indicates a lock on an object by another user already exists when trying to unlock an object.
# {0} The object that could not be unlocked
ExistingUnlockException=You cannot unlock [{0}] because it is locked by another user.

# Indicates the current user does not have a lock on the object in order to unlock it.
# {0} The object that could not be unlocked
NeedLockforUnlockException=You must have a lock on [{0}] before you can unlock it.

# Thrown when the user is adding someone to a role but does not have adequate permissions.
RoleManagementException_ADD=You do not have adequate permissions to add a user to a role.

# Thrown when the user is removing someone from a role but does not have adequate permissions.
RoleManagementException_REMOVE=You do not have adequate permissions to remove a user from a role.

# Thrown when a user tries to create an object without permission
# {0} toString for the entity that was being created
CreatePermissionException=You do not have permission to create [{0}].

# Thrown when a user tries to delete an object without permission
# {0} toString for the entity that was being delete
DeletePermissionException=You do not have permission to delete [{0}].

# Thrown when a user tries to read an object without permission
# {0} toString for the entity that was being delete
ReadPermissionException=You do not have permission to read [{0}].

# Thrown when a user tries to read objects of a type without permission
# {0} Display label of the type
ReadTypePermissionException=You do not have permission to read [{0}].

# Thrown when a user does not have delete permission for a type
# {0} Display label of the type
DeleteTypePermissionException=You do not have permission to delete instances of type [{0}].

# Thrown when an invalid Groovy query is executed.
# {0} The Groovy query that caused the error.
# {1} The query error.
GroovyQueryException=The following groovy query:\n[{0}]\n Produced the following error:\n[{1}]

# Thrown when a user is not in the admin role and is attempting to execute an arbitrary groovy query.
# {0} required role name
GroovyQueryExecuteException=You must be in the [{0}] role to execute arbitrary queries.

# Thrown when a user tries to update an object without permission
# {0} toString for the entity that was being updated
WritePermissionException=You do not have permission to update [{0}].

# Thrown when a user tries to grant permission to a type but does not have permission to do so
# {0} toString for the type that a permission is being granted to
GrantTypePermissionException=You do not have permission to grant permissions on type [{0}].

# Thrown when a user tries to grant permission to a method but does not have permission to do so
# {0} toString for the type that defines the method
# {1} toString for the method that a permission is being granted to
GrantMethodPermissionException=You do not have permission to grant permissions on method [{1}] defined by [{0}].

# Thrown when a user tries to grant permission on an attribute on a class
# {0} Class display label
# {1} Attribute display label
GrantAttributePermissionException=You do not have permission to grant permissions on attribute [{1}] on type [{0}].

# Thrown when a user tries to grant permission on an attribute on a class in a state
# {0} Class display label
# {1} Attribute display label
# {2} State display label
GrantAttributeStatePermissionException=You do not have permission to grant permissions on attribute [{1}] on type [{0}] in state [{2}].

# Thrown when a user tries to grant permission on a state
# {0} State display label
GrantStatePermissionException=You do not have permission to grant permissions on the state [{0}].

# Thrown when a user tries to revoke permission from a type but does not have permission to do so
# {0} toString for the type that a permission is being revoked
RevokeTypePermissionException=You do not have permission to revoke permissions from type [{0}].

# Thrown when a user tries to revoke permission to a method but does not have permission to do so
# {0} toString for the type that defines the method
# {1} toString for the method that a permission is being revoked from
RevokeMethodPermissionException=You do not have permission to revoke permissions on method [{1}] defined by [{0}].

# Thrown when a user tries to revoke permission on an attribute on a class
# {0} Class display label
# {1} Attribute display label
RevokeAttributePermissionException=You do not have permission to revoke permissions on attribute [{1}] on type [{0}].

# Thrown when a user tries to revoke permission on an attribute on a class in a state
# {0} Class display label
# {1} Attribute display label
# {2} State display label
RevokeAttributeStatePermissionException=You do not have permission to revoke permissions on attribute [{1}] on type [{0}] in state [{2}].

# Thrown when a user tries to revoke permission on a state
# {0} State display label
RevokeStatePermissionException=You do not have permission to revoke permissions on the state [{0}].

# Thrown when a user tries to execute a method without permission without permission
# {0} Display label of the MdType the method is defined on
# {1} Display label of the MdMethod the user is trying to execute
ExecuteStaticPermissionException=You do not have permission to [{1}] on [{0}].

# Thrown when a user tries to execute a method without permission without permission
# {0} toString value of the instance the method executes against
# {1} Display label of the MdMethod the user is trying to execute
ExecuteInstancePermissionException=You do not have permission to [{1}] on [{0}].

# Thrown when a user tries to promote an object to a state without permission without permission
# {0} toString for the business object being promoted
# {1} label of the state the business object is being promoted to
PromotePermissionException=You do not have permission to promote [{0}] to [{1}].

# Thrown when a user tries to add a child to a business object without permission
# {0} toString for the business child object
# {1} toString for the business parent object
# {2} display label of the child end of the relationship
AddChildPermissionException=You do not have permission to add [{0}] to [{1}] as [{2}].

# Thrown when a user tries to add a parent to a business object without permission
# {0} toString for the business parent object
# {1} toString for the business child object
# {2} display label of the parent end relationship
AddParentPermissionException=You do not have permission to add [{0}] to [{1}] as [{2}].

# Thrown when a user tries to delete a child from a business object without permis
# {0} toString for the business child object
# {1} toString for the business parent object
# {2} display label of the child end of the relationship
DeleteChildPermissionException=You do not have permission to remove [{0}] from [{1}] as [{2}].

# Thrown when a user tries to delete a parent from a business object without permis
# {0} toString for the business parent object
# {1} toString for the business child object
# {2} display label of the parent end relationship
DeleteParentPermissionException=You do not have permission to remove [{0}] from [{1}] as [{2}].

# Thrown when a user tries to read the children of a parent object but does not have adequate permissions.
# {0} display label of the child end of the relationship
# {2} toString for the business parent object
ReadChildPermissionException=You do not have permission to read [{0}] on [{1}].

# Thrown when a user tries to read the parents of a child object but does not have adequate permissions.
# {0} display label of the parent end of the relationship
# {2} toString for the business child object
ReadParentPermissionException=You do not have permission to read [{0}] on [{1}].

# Thrown when a user tries to modify an attribute without permission
# {0} toString for the entity that was being read/written/etc
# {1} The attribute name
# {2} The user attempting the operation
AttributeWritePermissionException=User [{2}] does not have permission to modify attribute [{1}] on [{0}].

# Thrown when the value set for an attribute is invalid
# {0} The invalid value
# {1} Display label of the attribute being set
AttributeValueException=[{0}] is not a valid value for [{1}].

# Thrown when the value set for an attribute is invalid
# {0} The invalid value
AttributeValueExceptionGeneric=[{0}] is not a valid value.

# Thrown when the value set for an attribute is invalid
# {0} The invalid value
# {1} Display label of the attribute being set
# {2} Bounds violated by value
AttributeValueAboveRangeProblem=[{0}] is not a valid value for [{1}]. Value cannot be greater than [{2}].

# Thrown when the value set for an attribute is invalid
# {0} The invalid value
# {1} Display label of the attribute being set
# {2} Bounds violated by value
AttributeValueBelowRangeProblem=[{0}] is not a valid value for [{1}]. Value cannot be less than [{2}].

# Thrown when the value set for an attribute is invalid
# {0} The invalid value
# {1} Display label of the attribute being set
AttributeValueCannotBeNegativeProblem=[{0}] is not a valid value for [{1}]. Value cannot be negative.

# Thrown when the value set for an attribute is invalid
# {0} The invalid value
# {1} Display label of the attribute being set
AttributeValueCannotBePositiveProblem=[{0}] is not a valid value for [{1}]. Value cannot be positive.

# Thrown when the value set for an attribute is invalid
# {0} The invalid value
# {1} Display label of the attribute being set
AttributeValueCannotBeZeroProblem=[{0}] is not a valid value for [{1}]. Value cannot be zero.

# Thrown when the value set for an attribute is invalid
# {0} Display label of the required attribute
EmptyValueProblem=[{0}] requires a value.

# Thrown when a user attempts to modify a immutable attribute
# {0} Display label of the immutable attribute
ImmutableAttributeProblem=[{0}] cannot be modified.

# Thrown when a user attempts to modify a system attribute
# {0} Display label of the immutable attribute
SystemAttributeProblem=[{0}] cannot be modified because it is a system attribute.

# Thrown when an attribute exceeds the amount of space available
# {0} Display label of the attribute that is too long
# {1} Maximum length
# {2} Length unit
AttributeLengthException= [{0}] many not exceed a length of {1} {2}.

AttributeLengthException.Unit.Character  = character
AttributeLengthException.Unit.Characters = characters
AttributeLengthException.Unit.Byte       = byte
AttributeLengthException.Unit.Bytes      = bytes

# Encapsulates generic errors that arise from state machines.
StateException=An error was encountered in a state machine.  Please try your operation again.  If the problem continues, alert your technical support staff.

# Thrown when a state machine with the given name already exists on a type
# {0} Name of the state
# {1} Type that has a state machine
DuplicateStateDefinitionException = A state named [{0}] already exists in the [{1}] state machine.

# Thrown when a default state is defined on a state machine that already has a default state.
# {0} Type that has a state machine
DefaultStateExistsException = A default state has already been defined for State Machine [{0}].

# Thrown when an invalid entry state is set on an object
# {0} Name of the entry state
# {1} Type that has a state machine
InvalidEntryStateException = State [{0} on machine [{1}] is not an entry state.

# Thrown when changes are made to a stale object.
# {0} toString of the stale entity
StaleEntityException=[{0}] is out of date - please update and try your operation again.

# Thrown when there is an error in an archival (non-readable) xml document
XMLException=A system xml file appears to be corrupt - please notify your technical support team.

# Thrown when a login fails
InvalidLoginException=Login failed - please try again.

# Thrown when a user has too many sessions open
# {0} The username related to the exception
MaximumSessionsException=The user [{0}] has the maximum number of sessions open.

# Thrown when a user has too many sessions open
# {0} The username related to the exception
NoLocaleException=The user [{0}] did not provide a locale when logging in.

# Thrown when parsing a Supported Locale fails
# {0} The supported locale
InvalidLocaleFormatException=The locale [{0}] does not have the proper format - please notify your technical support team.

# Thrown when a user is inactive
# {0} The username related to the exception
InactiveUserException=The user [{0}] is inactive.

# Thrown for errors with the session
InvalidSessionException=Your session has expired.  Please log in.

# Thrown for errors with the session
VaultException=There was a problem accessing the file vault.  Please try again.

# Thrown when an error is encountered while compiling business classes.
CompilerException=Your request created compile errors in business classes.\n{0}

# Thrown when a type defines an invalid size for a Most Recently Used Cache
# {0} The type being cached
# {1} The invalid cache size
InvalidMRUCacheSizeException=[{0}] can't specify a cache size [{1}] for the Most Recently Used Cache Algorithm. Please change the cache size or cache algorithm.

# Thrown when a base method is called that should have been overridden
# {0} The type name that contains the method
# {1} The name of the method
UnimplementedStubException=Method [{1}] on type [{0}] has not been implemented.

# Thrown when a query is being built from a type-unsafe context and
# an invalid comparison operator is specified on an aggregate function.
# {0} invalid comparison operator
InvalidAggregateOperatorException=Comparison operator [{0}] is not valid for an aggregate function.

# Thrown when a query is being built from a type-unsafe context and
# an invalid comparison operator is specified on a MIN or MAX function.
# {0} invalid comparison operator
InvalidMinMaxOperatorException=Comparison operator [{0}] is not valid for the [minimum] or [maximum] function.

# Thrown when a query is being built from a type-unsafe context and
# an invalid comparison operator is specified on a number
# {0} invalid comparison operator
InvalidNumberOperatorException=Comparison operator [{0}] is not valid for a number.

# Thrown when a query is being built from a type-unsafe context and
# an invalid comparison operator is specified on a String
# {0} invalid comparison operator
InvalidStringOperatorException=Comparison operator [{0}] is not valid for text.

# Thrown when a query is being built from a type-unsafe context and
# an invalid comparison operator is specified on a Boolean
# {0} invalid comparison operator
InvalidBooleanOperatorException=Comparison operator [{0}] is not valid for boolean (true/false).

# Thrown when a query is being built from a type-unsafe context and
# an invalid comparison operator is specified on a Moment
# {0} invalid comparison operator
InvalidMomentOperatorException=Comparison operator [{0}] is not valid for date, time, or datetime.

# Thrown when a query is being built from a type-unsafe context and
# an invalid comparison operator is specified on a Boolean
# {0} invalid comparison operator
InvalidBlobOperatorException=Comparison operator [{0}] is not valid for a blob.

# Thrown when a query is being built from a type-unsafe context and
# an invalid comparison operator is specified on a Struct
# {0} invalid comparison operator
InvalidStructOperatorException=Comparison operator [{0}] is not valid for a struct.

# Thrown when a query is being built from a type-unsafe context and
# an invalid comparison operator is specified on a ref
# {0} invalid comparison operator
InvalidRefOperatorException=Comparison operator [{0}] is not valid for a reference.

# Thrown when an aggregate function is in the group by clause of a value query.
NoAggregateInGroupByException=You cannot group by an aggregate function.

# Thrown when a sub query used in a select clause returns more than one row.
SubSelectReturnedMultipleRowsException=Subquery returns more than 1 row.

# Thrown when a non-primitive selectable is put into an ORDER BY clause.
InvalidOrderByPrimitiveException=Only primitive attributes can participate in the ORDER BY clause.

# Thrown when a non numeric selectable is passed to a numeric function.
# {0} Selectable display label
InvalidNumericSelectableException=[{0}] is not a numeric value.  It was passed into a numeric function.

# Thrown when a non date or time selectable is passed to a date or time function.
# {0} Selectable display label
InvalidMomentSelectableException=[{0}] is not a date or a time value.  It was passed into a date or a time functio

# Thrown when a value query is missing a select clause.
ValueQueryMissingSelectCaluseException=No attributes were selected to be included in the result of the query.

# Thrown when an attribute in the select clause is ambiguous.
# {0} Ambiguous attribute name
AmbiguousAttributeException=Attribute [{0}] in the select clause is ambiguous.

# Thrown when an attribute appears in the GROUP BY clause but is not specified in the select clause.
# {0} Attribute display label
MissingAttributeInSelectForGroupByException=The attribute [{0}] specified in the GROUP BY section must also be included in the result of the query.

# Thrown when an attribute in the having clause is not defined in the SELECT clause or the GROUP BY clause.
# {0} attribute display label
# {1} defining type display label
MissingHavingClauseAttributeException=The attribute [{0}] defined by [{1}] in the HAVING clause must also be included in the result of the query or in the GROUP BY section.

# Thrown when the group by clause is used but an attribute exists in the select clause that is not in the group by clause or in an aggregate function.
# {0} Attribute display label
AttributeNotInGroupByOrAggregate=When an attribute is specified as GROUP BY, all attributes must then either be GROUP BY or must be used in an aggregate function.  The attribute [{0}] is neither GROUP BY nor is used in an aggregate function.

# Message stating that the backup is complete
BackupCompleteMessage=Backup complete

# Message stating that the restore is complete
RestoreCompleteMessage=Restore complete

# Message stating that the database is being backed up
BackingupDatabaseMessage=Backing up database

# Message stating that a file is being backed up
# {0} file name and path
BackingUpFileMessage=Backing up file: {0}

# Message stating that the application is being restored
RestoringApplicationMessage=Restoring application:

# Message stating that files are being extracted from the backup
ExtractingFilesMessage=Extracting Files:

# Message stating that tables are being dropped
DroppingTablesMessage=Dropping tables:

# Message stating that database records are being imported
ImportingDatabaseRecords=Importing database records:

# Message stating that database records are being imported
# {0} Webapp Folder path
CleaningWebappFolder=Cleaning webapp folder: {0}

# Message stating that the given file is being extracted from the database
# {0} file path and name
ExtractingFileMessage=Extracting file: {0}

RoleNamespaceException=The rolename [{0}] must be namespaced.

# Thrown when a gap exists in imported sequence numbers for a given site.
# {0} imported site
# {1} last imported sequence from the given site
# {2} first export sequence in the ExportSequence
# {3} the needed import sequence for the given site
SynchronizationSequenceGapException=There cannot be a gap in sequence numbers when importing from another site.  The last imported sequence number from site [{0}] was [{1}], but the current import starts with sequence number [{2}].  Please import from site [{0}] starting with sequence number [{3}].

# Thrown when a error occurs when importing a transaction item
# {0} component site master
# {1} localized error message of the error that was thrown
TransactionImportInvalidItem=An error occurred when importing a record that originated from site {0}.  The error is: {1}.

# Thrown when the incoming transaction file is of a different version that the transaction importer.
# {0} The version of the transaction importer.
# {1} The version of the incoming transaction file.
TransactionVersionException=There was a version mismatch between the file [{1}] and the importer [{0}].  Please update the local node to [{1}] or re-export the file from a node of version [{0}].

SourceElementNotDeclaredException=Cannot update a merged element which does not exist.

# Thrown when condition validation fails
# {0} Attribute label.
# {1} Condition.
FieldValidationProblem=The attribute [{0}] is not applicable when {1}.

# {0} Field label.
# {1} Operation.
# {2} Value.
FieldCondition=[{0}] is not [{1}] to [{2}].

# {0} First condition
# {1} Second condition
AndCondition=[{0}] and [{1}].

# Thrown when a MdAttributeDec definition has a length value which is less that 1.
# {0} Attribute name
# {1} Invalid length value
AttributeDefinitionLengthException=The value [{1}] on attribute definition [{0}] is invalid.  It must be an integer greater than 1.

# Thrown when a MdAttributeDec definition has a decimal value which is less that 1 or greater than the length value.
# {0} Attribute name
# {1} Invalid decimal value
# {2} Length value
AttributeDefinitionDecimalException=The value [{1}] on attribute definition [{0}] is invalid.  It must be between [1] and [{2}].

NumericFieldOverflowException=A specified numeric value is too large for its database column

# Displayed during the backup procedure when the temp backup directory is being compressed.
# {0} The fully qualified path of the directory being compressed
CompressingDirectoryMessage=Compressing the directory: {0}

# Displayed when the backing up the cache files.
BackingUpCacheMessage=Backing up cache files.
