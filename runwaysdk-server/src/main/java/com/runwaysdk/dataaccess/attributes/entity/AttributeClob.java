/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * Created January 12, 2006
 */
package com.runwaysdk.dataaccess.attributes.entity;

import com.runwaysdk.dataaccess.MdEntityDAOIF;
import com.runwaysdk.dataaccess.attributes.AttributeException;
import com.runwaysdk.dataaccess.database.Database;


public class AttributeClob extends Attribute
{
  /**
   * Generated by Eclipse
   */
  private static final long serialVersionUID = -7053663014634979091L;

  /**
   * Inherited constructor, sets <code>name</code> and
   * <code>definingEntityType</code>.
   *
   * @param name The name of this CLOB attribute.
   * @param mdAttributeKey key of the defining attribute metadata.
   * @param definingEntityType Name of the class that defines this attribute.
   */
  protected AttributeClob(String name, String mdAttributeKey, String definingEntityType)
  {
    super(name, mdAttributeKey, definingEntityType);
  }

  /**
   * Inherited constructor, sets <code>name</code>, <code>definingEntityType</code>,
   * and <code>value</code>.
   *
   * @param name
   *          The name of this CLOB attribute.
   * @param mdAttributeKey key of the defining attribute metadata.
   * @param definingEntityType
   *          Name of the class that defines this attribute.
   * @param value
   *          The value of this CLOB. "<code>true</code>" or "<code>false</code>"
   */
  protected AttributeClob(String name, String mdAttributeKey, String definingEntityType, String value)
  {
    super(name, mdAttributeKey, definingEntityType, value);
  }


  /**
   * Returns the formatted value of the attribute.  Some attributes format
   * this value to something other than what is stored in the database.
   *
   * <br>
   * <b>Precondition: </b> true <br>
   * <b>Postcondition: </b> return value != null
   *
   * @return value of the attribute.
   */
  public String getValue()
  {
    // fetch the CLOB from the cache if the containing component has not
    // been applied
    // to the database. Otherwise, fetch directly from the database.
    if (!this.getContainingComponent().isAppliedToDB())
    {
      return this.value;
    }
    else
    {
      String table = ((MdEntityDAOIF)this.getMdAttribute().definedByClass()).getTableName();
      String columnName = this.getMdAttribute().getColumnName();
      String oid = this.getContainingComponent().getOid();
      return Database.getClob(table, columnName, oid);
    }
  }

  /**
   * Checks the value, and sets it if it is valid.
   *
   * <br>
   * <b>Precondition: </b> value != null <br>
   * <b>Postcondition: </b> this.value = value this.value.equals(value)
   * this.validate(this.value) = <b>true </b>
   *
   * <br>
   * <b>modifies: </b> isModified() returns true, but only if the new value is
   *                   different from the old value
   *
   * @param value new value of the attribute
   *
   * @throws AttributeException if the value is invalid for this Attribute
   */
  public void setValue(String value)
  {
    // If the new value is the same as the old one, skip it
    this.validate(value, this.getMdAttribute());
    this.setModified(true);

    if (!this.getContainingComponent().isAppliedToDB())
    {
      this.value = value;
    }
    else
    {
      String table = ((MdEntityDAOIF)this.getMdAttribute().definedByClass()).getTableName();
      String columnName = this.getMdAttribute().getColumnName();
      String oid = this.getContainingComponent().getOid();
      Database.setClob(table, columnName, oid, value);
    }
  }

  /**
   * Sets the state of the attribute object after a transaction has been committed/
   *
   */
  public void setCommitState()
  {
     super.setCommitState();
     this.flushClobCache();
  }

  /**
   * Flushes all of the CLOB stored locally. This method
   * is mainly called after the value of this attribute has been saved to the
   * database.
   */
  public void flushClobCache()
  {
    this.value = "";
  }

  /**
   * Returns a deep clone of this attribute.
   *
   * <br/><b>Precondition: </b> true <br/><b>Postcondition: </b> true
   *
   * @return a deep clone of this Attribute
   */
  public AttributeClob attributeClone()
  {
    return new AttributeClob(this.getName(), this.mdAttributeKey, this.getDefiningClassType(), new String(this.getRawValue()));
  }
}
